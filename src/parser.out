Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    NEGACION

Grammar

Rule 0     S' -> codigo
Rule 1     codigo -> algoritmo
Rule 2     codigo -> algoritmo codigo
Rule 3     codigo -> comnetario
Rule 4     algoritmo -> imprimir
Rule 5     algoritmo -> asignacion
Rule 6     algoritmo -> expresion END
Rule 7     algoritmo -> comparacion END
Rule 8     algoritmo -> sentenciaIf
Rule 9     algoritmo -> sentenciaFOR
Rule 10    algoritmo -> sentenciaWhile
Rule 11    algoritmo -> input
Rule 12    algoritmo -> funciones
Rule 13    algoritmo -> expresionSinRetorno
Rule 14    funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
Rule 15    funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
Rule 16    asignacion -> tipo VARIABLE IGUAL expresiones END
Rule 17    asignacion -> VARIABLE IGUAL expresiones END
Rule 18    expresionSinRetorno -> funcionStructura END
Rule 19    expresionSinRetorno -> funcionStructura
Rule 20    funcionStructura -> first
Rule 21    funcionStructura -> last
Rule 22    funcionStructura -> length
Rule 23    funcionStructura -> remove
Rule 24    funcionStructura -> add
Rule 25    parametros -> empty
Rule 26    parametros -> tipo VARIABLE
Rule 27    parametros -> tipo VARIABLE COMA parametros
Rule 28    string -> STRING
Rule 29    expresiones -> expresion
Rule 30    expresiones -> comparacion
Rule 31    expresiones -> BOOLEAN
Rule 32    expresiones -> opstring
Rule 33    expresiones -> indexacion
Rule 34    expresiones -> lista
Rule 35    expresiones -> conjuntos
Rule 36    expresiones -> first
Rule 37    expresiones -> last
Rule 38    expresiones -> length
Rule 39    expresiones -> remove
Rule 40    expresiones -> add
Rule 41    expresiones -> slice
Rule 42    expresiones -> opLogicas
Rule 43    opstring -> string
Rule 44    opstring -> VARIABLE
Rule 45    opstring -> string MAS opstring
Rule 46    opstring -> VARIABLE MAS opstring
Rule 47    imprimir -> PRINT PIZQ opstring PDER END
Rule 48    input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END
Rule 49    expresion -> valor
Rule 50    lista -> CIZQ elementos CDER
Rule 51    first -> VARIABLE POINT FIRST PIZQ PDER
Rule 52    last -> VARIABLE POINT LAST PIZQ PDER
Rule 53    length -> VARIABLE POINT LEN PIZQ PDER
Rule 54    add -> VARIABLE POINT ADD PIZQ valor PDER
Rule 55    slice -> VARIABLE POINT SLICE PIZQ valor COMA valor PDER
Rule 56    remove -> VARIABLE POINT REMOVE PIZQ valor PDER
Rule 57    conjuntos -> LIZQ elementos LDER
Rule 58    elementos -> valor
Rule 59    elementos -> valor COMA elementos
Rule 60    opLogicas -> terminoLogico
Rule 61    opLogicas -> terminoLogico operadorLog terminoLogico
Rule 62    opLogicas -> terminoLogico operadorLog terminoLogico operadorLog opLogicas
Rule 63    terminoLogico -> VARIABLE
Rule 64    terminoLogico -> BOOLEAN
Rule 65    terminoLogico -> PIZQ comparacion PDER
Rule 66    expresion -> valor operadorMat expresion
Rule 67    comparacion -> expresion operadorComp expresion
Rule 68    operadorLog -> AND
Rule 69    operadorLog -> OR
Rule 70    operadorMat -> MAS
Rule 71    operadorMat -> RESTA
Rule 72    operadorMat -> PROD
Rule 73    operadorMat -> DIV
Rule 74    operadorMat -> MOD
Rule 75    operadorComp -> MAYOR
Rule 76    operadorComp -> MENOR
Rule 77    operadorComp -> MAYORIG
Rule 78    operadorComp -> MENORIG
Rule 79    operadorComp -> DIGUAL
Rule 80    operadorComp -> DIF
Rule 81    tipo -> VAR
Rule 82    tipo -> INT
Rule 83    tipo -> BOOL
Rule 84    tipo -> DOUBLE
Rule 85    tipo -> VOID
Rule 86    tipo -> STR
Rule 87    valor -> ENTERO
Rule 88    valor -> VARIABLE
Rule 89    sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
Rule 90    sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
Rule 91    varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
Rule 92    varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER
Rule 93    varianteIf -> ELSE LIZQ algoritmo LDER
Rule 94    varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
Rule 95    varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
Rule 96    varianteIf -> empty
Rule 97    sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
Rule 98    parametrosF -> inicializacionFor END comparacion END VARIABLE increDecre
Rule 99    parametrosF -> inicializacionFor END opLogicas END VARIABLE increDecre
Rule 100   parametrosF -> VARIABLE IN VARIABLE
Rule 101   inicializacionFor -> VARIABLE IGUAL ENTERO
Rule 102   inicializacionFor -> INT VARIABLE IGUAL ENTERO
Rule 103   inicializacionFor -> VAR VARIABLE IGUAL ENTERO
Rule 104   increDecre -> INCREMENTO
Rule 105   increDecre -> DECREMENTO
Rule 106   sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
Rule 107   sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
Rule 108   comnetario -> COMENTARIO VARIABLE
Rule 109   sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
Rule 110   sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
Rule 111   indexacion -> VARIABLE CIZQ valor CDER
Rule 112   empty -> <empty>

Terminals, with rules where they appear

ADD                  : 54
AND                  : 68
BOOL                 : 83
BOOLEAN              : 31 64
CDER                 : 50 111
CIZQ                 : 50 111
COMA                 : 27 55 59
COMENTARIO           : 108
DECREMENTO           : 105
DIF                  : 80
DIGUAL               : 79
DIV                  : 73
DO                   : 109 110
DOUBLE               : 84
ELSE                 : 93
ELSEIF               : 91 92 94 95
END                  : 6 7 14 16 17 18 47 48 98 98 99 99 109 110
ENTERO               : 87 101 102 103
FIRST                : 51
FOR                  : 97
IF                   : 89 90
IGUAL                : 16 17 48 101 102 103
IN                   : 100
INCREMENTO           : 104
INPUT                : 48
INT                  : 82 102
LAST                 : 52
LDER                 : 14 15 57 89 90 91 92 93 94 95 97 106 107 109 110
LEN                  : 53
LIZQ                 : 14 15 57 89 90 91 92 93 94 95 97 106 107 109 110
MAS                  : 45 46 70
MAYOR                : 75
MAYORIG              : 77
MENOR                : 76
MENORIG              : 78
MOD                  : 74
NEGACION             : 
OR                   : 69
PDER                 : 14 15 47 48 51 52 53 54 55 56 65 89 90 91 92 94 95 97 106 107 109 110
PIZQ                 : 14 15 47 48 51 52 53 54 55 56 65 89 90 91 92 94 95 97 106 107 109 110
POINT                : 51 52 53 54 55 56
PRINT                : 47
PROD                 : 72
REMOVE               : 56
RESTA                : 71
RETURN               : 14
SLICE                : 55
STR                  : 86
STRING               : 28
VAR                  : 81 103
VARIABLE             : 14 15 16 17 26 27 44 46 48 51 52 53 54 55 56 63 88 98 99 100 100 101 102 103 108 111
VOID                 : 15 85
WHILE                : 106 107 109 110
error                : 

Nonterminals, with rules where they appear

add                  : 24 40
algoritmo            : 1 2 89 90 91 92 93 94 95 97 106 107 109 110
asignacion           : 5
codigo               : 2 14 15 0
comnetario           : 3
comparacion          : 7 30 65 89 91 94 98 106 109
conjuntos            : 35
elementos            : 50 57 59
empty                : 25 96
expresion            : 6 14 29 66 67 67
expresionSinRetorno  : 13
expresiones          : 16 17
first                : 20 36
funcionStructura     : 18 19
funciones            : 12
imprimir             : 4
increDecre           : 98 99
indexacion           : 33
inicializacionFor    : 98 99
input                : 11
last                 : 21 37
length               : 22 38
lista                : 34
opLogicas            : 42 62 90 92 95 99 107 110
operadorComp         : 67
operadorLog          : 61 62 62
operadorMat          : 66
opstring             : 32 45 46 47
parametros           : 14 15 27
parametrosF          : 97
remove               : 23 39
sentenciaFOR         : 9
sentenciaIf          : 8
sentenciaWhile       : 10
slice                : 41
string               : 43 45
terminoLogico        : 60 61 61 62 62
tipo                 : 14 16 26 27 48
valor                : 49 54 55 55 56 58 59 66 111
varianteIf           : 89 90 94 95

Parsing method: LALR

state 0

    (0) S' -> . codigo
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) codigo -> . comnetario
    (4) algoritmo -> . imprimir
    (5) algoritmo -> . asignacion
    (6) algoritmo -> . expresion END
    (7) algoritmo -> . comparacion END
    (8) algoritmo -> . sentenciaIf
    (9) algoritmo -> . sentenciaFOR
    (10) algoritmo -> . sentenciaWhile
    (11) algoritmo -> . input
    (12) algoritmo -> . funciones
    (13) algoritmo -> . expresionSinRetorno
    (108) comnetario -> . COMENTARIO VARIABLE
    (47) imprimir -> . PRINT PIZQ opstring PDER END
    (16) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (17) asignacion -> . VARIABLE IGUAL expresiones END
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (67) comparacion -> . expresion operadorComp expresion
    (89) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (90) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (97) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (109) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (110) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (48) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (14) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (15) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (18) expresionSinRetorno -> . funcionStructura END
    (19) expresionSinRetorno -> . funcionStructura
    (81) tipo -> . VAR
    (82) tipo -> . INT
    (83) tipo -> . BOOL
    (84) tipo -> . DOUBLE
    (85) tipo -> . VOID
    (86) tipo -> . STR
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE
    (20) funcionStructura -> . first
    (21) funcionStructura -> . last
    (22) funcionStructura -> . length
    (23) funcionStructura -> . remove
    (24) funcionStructura -> . add
    (51) first -> . VARIABLE POINT FIRST PIZQ PDER
    (52) last -> . VARIABLE POINT LAST PIZQ PDER
    (53) length -> . VARIABLE POINT LEN PIZQ PDER
    (56) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (54) add -> . VARIABLE POINT ADD PIZQ valor PDER

    COMENTARIO      shift and go to state 14
    PRINT           shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VOID            shift and go to state 23
    VAR             shift and go to state 25
    INT             shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    STR             shift and go to state 29
    ENTERO          shift and go to state 30

    codigo                         shift and go to state 1
    algoritmo                      shift and go to state 2
    comnetario                     shift and go to state 3
    imprimir                       shift and go to state 4
    asignacion                     shift and go to state 5
    expresion                      shift and go to state 6
    comparacion                    shift and go to state 7
    sentenciaIf                    shift and go to state 8
    sentenciaFOR                   shift and go to state 9
    sentenciaWhile                 shift and go to state 10
    input                          shift and go to state 11
    funciones                      shift and go to state 12
    expresionSinRetorno            shift and go to state 13
    tipo                           shift and go to state 17
    valor                          shift and go to state 18
    funcionStructura               shift and go to state 24
    first                          shift and go to state 31
    last                           shift and go to state 32
    length                         shift and go to state 33
    remove                         shift and go to state 34
    add                            shift and go to state 35

state 1

    (0) S' -> codigo .



state 2

    (1) codigo -> algoritmo .
    (2) codigo -> algoritmo . codigo
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) codigo -> . comnetario
    (4) algoritmo -> . imprimir
    (5) algoritmo -> . asignacion
    (6) algoritmo -> . expresion END
    (7) algoritmo -> . comparacion END
    (8) algoritmo -> . sentenciaIf
    (9) algoritmo -> . sentenciaFOR
    (10) algoritmo -> . sentenciaWhile
    (11) algoritmo -> . input
    (12) algoritmo -> . funciones
    (13) algoritmo -> . expresionSinRetorno
    (108) comnetario -> . COMENTARIO VARIABLE
    (47) imprimir -> . PRINT PIZQ opstring PDER END
    (16) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (17) asignacion -> . VARIABLE IGUAL expresiones END
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (67) comparacion -> . expresion operadorComp expresion
    (89) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (90) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (97) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (109) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (110) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (48) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (14) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (15) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (18) expresionSinRetorno -> . funcionStructura END
    (19) expresionSinRetorno -> . funcionStructura
    (81) tipo -> . VAR
    (82) tipo -> . INT
    (83) tipo -> . BOOL
    (84) tipo -> . DOUBLE
    (85) tipo -> . VOID
    (86) tipo -> . STR
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE
    (20) funcionStructura -> . first
    (21) funcionStructura -> . last
    (22) funcionStructura -> . length
    (23) funcionStructura -> . remove
    (24) funcionStructura -> . add
    (51) first -> . VARIABLE POINT FIRST PIZQ PDER
    (52) last -> . VARIABLE POINT LAST PIZQ PDER
    (53) length -> . VARIABLE POINT LEN PIZQ PDER
    (56) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (54) add -> . VARIABLE POINT ADD PIZQ valor PDER

    $end            reduce using rule 1 (codigo -> algoritmo .)
    RETURN          reduce using rule 1 (codigo -> algoritmo .)
    LDER            reduce using rule 1 (codigo -> algoritmo .)
    COMENTARIO      shift and go to state 14
    PRINT           shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VOID            shift and go to state 23
    VAR             shift and go to state 25
    INT             shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    STR             shift and go to state 29
    ENTERO          shift and go to state 30

    algoritmo                      shift and go to state 2
    codigo                         shift and go to state 36
    comnetario                     shift and go to state 3
    imprimir                       shift and go to state 4
    asignacion                     shift and go to state 5
    expresion                      shift and go to state 6
    comparacion                    shift and go to state 7
    sentenciaIf                    shift and go to state 8
    sentenciaFOR                   shift and go to state 9
    sentenciaWhile                 shift and go to state 10
    input                          shift and go to state 11
    funciones                      shift and go to state 12
    expresionSinRetorno            shift and go to state 13
    tipo                           shift and go to state 17
    valor                          shift and go to state 18
    funcionStructura               shift and go to state 24
    first                          shift and go to state 31
    last                           shift and go to state 32
    length                         shift and go to state 33
    remove                         shift and go to state 34
    add                            shift and go to state 35

state 3

    (3) codigo -> comnetario .

    $end            reduce using rule 3 (codigo -> comnetario .)
    RETURN          reduce using rule 3 (codigo -> comnetario .)
    LDER            reduce using rule 3 (codigo -> comnetario .)


state 4

    (4) algoritmo -> imprimir .

    COMENTARIO      reduce using rule 4 (algoritmo -> imprimir .)
    PRINT           reduce using rule 4 (algoritmo -> imprimir .)
    VARIABLE        reduce using rule 4 (algoritmo -> imprimir .)
    IF              reduce using rule 4 (algoritmo -> imprimir .)
    FOR             reduce using rule 4 (algoritmo -> imprimir .)
    WHILE           reduce using rule 4 (algoritmo -> imprimir .)
    DO              reduce using rule 4 (algoritmo -> imprimir .)
    VOID            reduce using rule 4 (algoritmo -> imprimir .)
    VAR             reduce using rule 4 (algoritmo -> imprimir .)
    INT             reduce using rule 4 (algoritmo -> imprimir .)
    BOOL            reduce using rule 4 (algoritmo -> imprimir .)
    DOUBLE          reduce using rule 4 (algoritmo -> imprimir .)
    STR             reduce using rule 4 (algoritmo -> imprimir .)
    ENTERO          reduce using rule 4 (algoritmo -> imprimir .)
    $end            reduce using rule 4 (algoritmo -> imprimir .)
    RETURN          reduce using rule 4 (algoritmo -> imprimir .)
    LDER            reduce using rule 4 (algoritmo -> imprimir .)


state 5

    (5) algoritmo -> asignacion .

    COMENTARIO      reduce using rule 5 (algoritmo -> asignacion .)
    PRINT           reduce using rule 5 (algoritmo -> asignacion .)
    VARIABLE        reduce using rule 5 (algoritmo -> asignacion .)
    IF              reduce using rule 5 (algoritmo -> asignacion .)
    FOR             reduce using rule 5 (algoritmo -> asignacion .)
    WHILE           reduce using rule 5 (algoritmo -> asignacion .)
    DO              reduce using rule 5 (algoritmo -> asignacion .)
    VOID            reduce using rule 5 (algoritmo -> asignacion .)
    VAR             reduce using rule 5 (algoritmo -> asignacion .)
    INT             reduce using rule 5 (algoritmo -> asignacion .)
    BOOL            reduce using rule 5 (algoritmo -> asignacion .)
    DOUBLE          reduce using rule 5 (algoritmo -> asignacion .)
    STR             reduce using rule 5 (algoritmo -> asignacion .)
    ENTERO          reduce using rule 5 (algoritmo -> asignacion .)
    $end            reduce using rule 5 (algoritmo -> asignacion .)
    RETURN          reduce using rule 5 (algoritmo -> asignacion .)
    LDER            reduce using rule 5 (algoritmo -> asignacion .)


state 6

    (6) algoritmo -> expresion . END
    (67) comparacion -> expresion . operadorComp expresion
    (75) operadorComp -> . MAYOR
    (76) operadorComp -> . MENOR
    (77) operadorComp -> . MAYORIG
    (78) operadorComp -> . MENORIG
    (79) operadorComp -> . DIGUAL
    (80) operadorComp -> . DIF

    END             shift and go to state 37
    MAYOR           shift and go to state 39
    MENOR           shift and go to state 40
    MAYORIG         shift and go to state 41
    MENORIG         shift and go to state 42
    DIGUAL          shift and go to state 43
    DIF             shift and go to state 44

    operadorComp                   shift and go to state 38

state 7

    (7) algoritmo -> comparacion . END

    END             shift and go to state 45


state 8

    (8) algoritmo -> sentenciaIf .

    COMENTARIO      reduce using rule 8 (algoritmo -> sentenciaIf .)
    PRINT           reduce using rule 8 (algoritmo -> sentenciaIf .)
    VARIABLE        reduce using rule 8 (algoritmo -> sentenciaIf .)
    IF              reduce using rule 8 (algoritmo -> sentenciaIf .)
    FOR             reduce using rule 8 (algoritmo -> sentenciaIf .)
    WHILE           reduce using rule 8 (algoritmo -> sentenciaIf .)
    DO              reduce using rule 8 (algoritmo -> sentenciaIf .)
    VOID            reduce using rule 8 (algoritmo -> sentenciaIf .)
    VAR             reduce using rule 8 (algoritmo -> sentenciaIf .)
    INT             reduce using rule 8 (algoritmo -> sentenciaIf .)
    BOOL            reduce using rule 8 (algoritmo -> sentenciaIf .)
    DOUBLE          reduce using rule 8 (algoritmo -> sentenciaIf .)
    STR             reduce using rule 8 (algoritmo -> sentenciaIf .)
    ENTERO          reduce using rule 8 (algoritmo -> sentenciaIf .)
    $end            reduce using rule 8 (algoritmo -> sentenciaIf .)
    RETURN          reduce using rule 8 (algoritmo -> sentenciaIf .)
    LDER            reduce using rule 8 (algoritmo -> sentenciaIf .)


state 9

    (9) algoritmo -> sentenciaFOR .

    COMENTARIO      reduce using rule 9 (algoritmo -> sentenciaFOR .)
    PRINT           reduce using rule 9 (algoritmo -> sentenciaFOR .)
    VARIABLE        reduce using rule 9 (algoritmo -> sentenciaFOR .)
    IF              reduce using rule 9 (algoritmo -> sentenciaFOR .)
    FOR             reduce using rule 9 (algoritmo -> sentenciaFOR .)
    WHILE           reduce using rule 9 (algoritmo -> sentenciaFOR .)
    DO              reduce using rule 9 (algoritmo -> sentenciaFOR .)
    VOID            reduce using rule 9 (algoritmo -> sentenciaFOR .)
    VAR             reduce using rule 9 (algoritmo -> sentenciaFOR .)
    INT             reduce using rule 9 (algoritmo -> sentenciaFOR .)
    BOOL            reduce using rule 9 (algoritmo -> sentenciaFOR .)
    DOUBLE          reduce using rule 9 (algoritmo -> sentenciaFOR .)
    STR             reduce using rule 9 (algoritmo -> sentenciaFOR .)
    ENTERO          reduce using rule 9 (algoritmo -> sentenciaFOR .)
    $end            reduce using rule 9 (algoritmo -> sentenciaFOR .)
    RETURN          reduce using rule 9 (algoritmo -> sentenciaFOR .)
    LDER            reduce using rule 9 (algoritmo -> sentenciaFOR .)


state 10

    (10) algoritmo -> sentenciaWhile .

    COMENTARIO      reduce using rule 10 (algoritmo -> sentenciaWhile .)
    PRINT           reduce using rule 10 (algoritmo -> sentenciaWhile .)
    VARIABLE        reduce using rule 10 (algoritmo -> sentenciaWhile .)
    IF              reduce using rule 10 (algoritmo -> sentenciaWhile .)
    FOR             reduce using rule 10 (algoritmo -> sentenciaWhile .)
    WHILE           reduce using rule 10 (algoritmo -> sentenciaWhile .)
    DO              reduce using rule 10 (algoritmo -> sentenciaWhile .)
    VOID            reduce using rule 10 (algoritmo -> sentenciaWhile .)
    VAR             reduce using rule 10 (algoritmo -> sentenciaWhile .)
    INT             reduce using rule 10 (algoritmo -> sentenciaWhile .)
    BOOL            reduce using rule 10 (algoritmo -> sentenciaWhile .)
    DOUBLE          reduce using rule 10 (algoritmo -> sentenciaWhile .)
    STR             reduce using rule 10 (algoritmo -> sentenciaWhile .)
    ENTERO          reduce using rule 10 (algoritmo -> sentenciaWhile .)
    $end            reduce using rule 10 (algoritmo -> sentenciaWhile .)
    RETURN          reduce using rule 10 (algoritmo -> sentenciaWhile .)
    LDER            reduce using rule 10 (algoritmo -> sentenciaWhile .)


state 11

    (11) algoritmo -> input .

    COMENTARIO      reduce using rule 11 (algoritmo -> input .)
    PRINT           reduce using rule 11 (algoritmo -> input .)
    VARIABLE        reduce using rule 11 (algoritmo -> input .)
    IF              reduce using rule 11 (algoritmo -> input .)
    FOR             reduce using rule 11 (algoritmo -> input .)
    WHILE           reduce using rule 11 (algoritmo -> input .)
    DO              reduce using rule 11 (algoritmo -> input .)
    VOID            reduce using rule 11 (algoritmo -> input .)
    VAR             reduce using rule 11 (algoritmo -> input .)
    INT             reduce using rule 11 (algoritmo -> input .)
    BOOL            reduce using rule 11 (algoritmo -> input .)
    DOUBLE          reduce using rule 11 (algoritmo -> input .)
    STR             reduce using rule 11 (algoritmo -> input .)
    ENTERO          reduce using rule 11 (algoritmo -> input .)
    $end            reduce using rule 11 (algoritmo -> input .)
    RETURN          reduce using rule 11 (algoritmo -> input .)
    LDER            reduce using rule 11 (algoritmo -> input .)


state 12

    (12) algoritmo -> funciones .

    COMENTARIO      reduce using rule 12 (algoritmo -> funciones .)
    PRINT           reduce using rule 12 (algoritmo -> funciones .)
    VARIABLE        reduce using rule 12 (algoritmo -> funciones .)
    IF              reduce using rule 12 (algoritmo -> funciones .)
    FOR             reduce using rule 12 (algoritmo -> funciones .)
    WHILE           reduce using rule 12 (algoritmo -> funciones .)
    DO              reduce using rule 12 (algoritmo -> funciones .)
    VOID            reduce using rule 12 (algoritmo -> funciones .)
    VAR             reduce using rule 12 (algoritmo -> funciones .)
    INT             reduce using rule 12 (algoritmo -> funciones .)
    BOOL            reduce using rule 12 (algoritmo -> funciones .)
    DOUBLE          reduce using rule 12 (algoritmo -> funciones .)
    STR             reduce using rule 12 (algoritmo -> funciones .)
    ENTERO          reduce using rule 12 (algoritmo -> funciones .)
    $end            reduce using rule 12 (algoritmo -> funciones .)
    RETURN          reduce using rule 12 (algoritmo -> funciones .)
    LDER            reduce using rule 12 (algoritmo -> funciones .)


state 13

    (13) algoritmo -> expresionSinRetorno .

    COMENTARIO      reduce using rule 13 (algoritmo -> expresionSinRetorno .)
    PRINT           reduce using rule 13 (algoritmo -> expresionSinRetorno .)
    VARIABLE        reduce using rule 13 (algoritmo -> expresionSinRetorno .)
    IF              reduce using rule 13 (algoritmo -> expresionSinRetorno .)
    FOR             reduce using rule 13 (algoritmo -> expresionSinRetorno .)
    WHILE           reduce using rule 13 (algoritmo -> expresionSinRetorno .)
    DO              reduce using rule 13 (algoritmo -> expresionSinRetorno .)
    VOID            reduce using rule 13 (algoritmo -> expresionSinRetorno .)
    VAR             reduce using rule 13 (algoritmo -> expresionSinRetorno .)
    INT             reduce using rule 13 (algoritmo -> expresionSinRetorno .)
    BOOL            reduce using rule 13 (algoritmo -> expresionSinRetorno .)
    DOUBLE          reduce using rule 13 (algoritmo -> expresionSinRetorno .)
    STR             reduce using rule 13 (algoritmo -> expresionSinRetorno .)
    ENTERO          reduce using rule 13 (algoritmo -> expresionSinRetorno .)
    $end            reduce using rule 13 (algoritmo -> expresionSinRetorno .)
    RETURN          reduce using rule 13 (algoritmo -> expresionSinRetorno .)
    LDER            reduce using rule 13 (algoritmo -> expresionSinRetorno .)


state 14

    (108) comnetario -> COMENTARIO . VARIABLE

    VARIABLE        shift and go to state 46


state 15

    (17) asignacion -> VARIABLE . IGUAL expresiones END
    (88) valor -> VARIABLE .
    (51) first -> VARIABLE . POINT FIRST PIZQ PDER
    (52) last -> VARIABLE . POINT LAST PIZQ PDER
    (53) length -> VARIABLE . POINT LEN PIZQ PDER
    (56) remove -> VARIABLE . POINT REMOVE PIZQ valor PDER
    (54) add -> VARIABLE . POINT ADD PIZQ valor PDER

    IGUAL           shift and go to state 47
    MAS             reduce using rule 88 (valor -> VARIABLE .)
    RESTA           reduce using rule 88 (valor -> VARIABLE .)
    PROD            reduce using rule 88 (valor -> VARIABLE .)
    DIV             reduce using rule 88 (valor -> VARIABLE .)
    MOD             reduce using rule 88 (valor -> VARIABLE .)
    END             reduce using rule 88 (valor -> VARIABLE .)
    MAYOR           reduce using rule 88 (valor -> VARIABLE .)
    MENOR           reduce using rule 88 (valor -> VARIABLE .)
    MAYORIG         reduce using rule 88 (valor -> VARIABLE .)
    MENORIG         reduce using rule 88 (valor -> VARIABLE .)
    DIGUAL          reduce using rule 88 (valor -> VARIABLE .)
    DIF             reduce using rule 88 (valor -> VARIABLE .)
    POINT           shift and go to state 48


state 16

    (47) imprimir -> PRINT . PIZQ opstring PDER END

    PIZQ            shift and go to state 49


state 17

    (16) asignacion -> tipo . VARIABLE IGUAL expresiones END
    (48) input -> tipo . VARIABLE IGUAL INPUT PIZQ PDER END
    (14) funciones -> tipo . VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER

    VARIABLE        shift and go to state 50


state 18

    (49) expresion -> valor .
    (66) expresion -> valor . operadorMat expresion
    (70) operadorMat -> . MAS
    (71) operadorMat -> . RESTA
    (72) operadorMat -> . PROD
    (73) operadorMat -> . DIV
    (74) operadorMat -> . MOD

    END             reduce using rule 49 (expresion -> valor .)
    MAYOR           reduce using rule 49 (expresion -> valor .)
    MENOR           reduce using rule 49 (expresion -> valor .)
    MAYORIG         reduce using rule 49 (expresion -> valor .)
    MENORIG         reduce using rule 49 (expresion -> valor .)
    DIGUAL          reduce using rule 49 (expresion -> valor .)
    DIF             reduce using rule 49 (expresion -> valor .)
    PDER            reduce using rule 49 (expresion -> valor .)
    MAS             shift and go to state 52
    RESTA           shift and go to state 53
    PROD            shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56

    operadorMat                    shift and go to state 51

state 19

    (89) sentenciaIf -> IF . PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (90) sentenciaIf -> IF . PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf

    PIZQ            shift and go to state 57


state 20

    (97) sentenciaFOR -> FOR . PIZQ parametrosF PDER LIZQ algoritmo LDER

    PIZQ            shift and go to state 58


state 21

    (106) sentenciaWhile -> WHILE . PIZQ comparacion PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> WHILE . PIZQ opLogicas PDER LIZQ algoritmo LDER

    PIZQ            shift and go to state 59


state 22

    (109) sentenciaWhile -> DO . LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (110) sentenciaWhile -> DO . LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END

    LIZQ            shift and go to state 60


state 23

    (15) funciones -> VOID . VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (85) tipo -> VOID .

  ! shift/reduce conflict for VARIABLE resolved as shift
    VARIABLE        shift and go to state 61

  ! VARIABLE        [ reduce using rule 85 (tipo -> VOID .) ]


state 24

    (18) expresionSinRetorno -> funcionStructura . END
    (19) expresionSinRetorno -> funcionStructura .

    END             shift and go to state 62
    COMENTARIO      reduce using rule 19 (expresionSinRetorno -> funcionStructura .)
    PRINT           reduce using rule 19 (expresionSinRetorno -> funcionStructura .)
    VARIABLE        reduce using rule 19 (expresionSinRetorno -> funcionStructura .)
    IF              reduce using rule 19 (expresionSinRetorno -> funcionStructura .)
    FOR             reduce using rule 19 (expresionSinRetorno -> funcionStructura .)
    WHILE           reduce using rule 19 (expresionSinRetorno -> funcionStructura .)
    DO              reduce using rule 19 (expresionSinRetorno -> funcionStructura .)
    VOID            reduce using rule 19 (expresionSinRetorno -> funcionStructura .)
    VAR             reduce using rule 19 (expresionSinRetorno -> funcionStructura .)
    INT             reduce using rule 19 (expresionSinRetorno -> funcionStructura .)
    BOOL            reduce using rule 19 (expresionSinRetorno -> funcionStructura .)
    DOUBLE          reduce using rule 19 (expresionSinRetorno -> funcionStructura .)
    STR             reduce using rule 19 (expresionSinRetorno -> funcionStructura .)
    ENTERO          reduce using rule 19 (expresionSinRetorno -> funcionStructura .)
    $end            reduce using rule 19 (expresionSinRetorno -> funcionStructura .)
    RETURN          reduce using rule 19 (expresionSinRetorno -> funcionStructura .)
    LDER            reduce using rule 19 (expresionSinRetorno -> funcionStructura .)


state 25

    (81) tipo -> VAR .

    VARIABLE        reduce using rule 81 (tipo -> VAR .)


state 26

    (82) tipo -> INT .

    VARIABLE        reduce using rule 82 (tipo -> INT .)


state 27

    (83) tipo -> BOOL .

    VARIABLE        reduce using rule 83 (tipo -> BOOL .)


state 28

    (84) tipo -> DOUBLE .

    VARIABLE        reduce using rule 84 (tipo -> DOUBLE .)


state 29

    (86) tipo -> STR .

    VARIABLE        reduce using rule 86 (tipo -> STR .)


state 30

    (87) valor -> ENTERO .

    MAS             reduce using rule 87 (valor -> ENTERO .)
    RESTA           reduce using rule 87 (valor -> ENTERO .)
    PROD            reduce using rule 87 (valor -> ENTERO .)
    DIV             reduce using rule 87 (valor -> ENTERO .)
    MOD             reduce using rule 87 (valor -> ENTERO .)
    END             reduce using rule 87 (valor -> ENTERO .)
    MAYOR           reduce using rule 87 (valor -> ENTERO .)
    MENOR           reduce using rule 87 (valor -> ENTERO .)
    MAYORIG         reduce using rule 87 (valor -> ENTERO .)
    MENORIG         reduce using rule 87 (valor -> ENTERO .)
    DIGUAL          reduce using rule 87 (valor -> ENTERO .)
    DIF             reduce using rule 87 (valor -> ENTERO .)
    PDER            reduce using rule 87 (valor -> ENTERO .)
    COMA            reduce using rule 87 (valor -> ENTERO .)
    CDER            reduce using rule 87 (valor -> ENTERO .)
    LDER            reduce using rule 87 (valor -> ENTERO .)


state 31

    (20) funcionStructura -> first .

    END             reduce using rule 20 (funcionStructura -> first .)
    COMENTARIO      reduce using rule 20 (funcionStructura -> first .)
    PRINT           reduce using rule 20 (funcionStructura -> first .)
    VARIABLE        reduce using rule 20 (funcionStructura -> first .)
    IF              reduce using rule 20 (funcionStructura -> first .)
    FOR             reduce using rule 20 (funcionStructura -> first .)
    WHILE           reduce using rule 20 (funcionStructura -> first .)
    DO              reduce using rule 20 (funcionStructura -> first .)
    VOID            reduce using rule 20 (funcionStructura -> first .)
    VAR             reduce using rule 20 (funcionStructura -> first .)
    INT             reduce using rule 20 (funcionStructura -> first .)
    BOOL            reduce using rule 20 (funcionStructura -> first .)
    DOUBLE          reduce using rule 20 (funcionStructura -> first .)
    STR             reduce using rule 20 (funcionStructura -> first .)
    ENTERO          reduce using rule 20 (funcionStructura -> first .)
    $end            reduce using rule 20 (funcionStructura -> first .)
    RETURN          reduce using rule 20 (funcionStructura -> first .)
    LDER            reduce using rule 20 (funcionStructura -> first .)


state 32

    (21) funcionStructura -> last .

    END             reduce using rule 21 (funcionStructura -> last .)
    COMENTARIO      reduce using rule 21 (funcionStructura -> last .)
    PRINT           reduce using rule 21 (funcionStructura -> last .)
    VARIABLE        reduce using rule 21 (funcionStructura -> last .)
    IF              reduce using rule 21 (funcionStructura -> last .)
    FOR             reduce using rule 21 (funcionStructura -> last .)
    WHILE           reduce using rule 21 (funcionStructura -> last .)
    DO              reduce using rule 21 (funcionStructura -> last .)
    VOID            reduce using rule 21 (funcionStructura -> last .)
    VAR             reduce using rule 21 (funcionStructura -> last .)
    INT             reduce using rule 21 (funcionStructura -> last .)
    BOOL            reduce using rule 21 (funcionStructura -> last .)
    DOUBLE          reduce using rule 21 (funcionStructura -> last .)
    STR             reduce using rule 21 (funcionStructura -> last .)
    ENTERO          reduce using rule 21 (funcionStructura -> last .)
    $end            reduce using rule 21 (funcionStructura -> last .)
    RETURN          reduce using rule 21 (funcionStructura -> last .)
    LDER            reduce using rule 21 (funcionStructura -> last .)


state 33

    (22) funcionStructura -> length .

    END             reduce using rule 22 (funcionStructura -> length .)
    COMENTARIO      reduce using rule 22 (funcionStructura -> length .)
    PRINT           reduce using rule 22 (funcionStructura -> length .)
    VARIABLE        reduce using rule 22 (funcionStructura -> length .)
    IF              reduce using rule 22 (funcionStructura -> length .)
    FOR             reduce using rule 22 (funcionStructura -> length .)
    WHILE           reduce using rule 22 (funcionStructura -> length .)
    DO              reduce using rule 22 (funcionStructura -> length .)
    VOID            reduce using rule 22 (funcionStructura -> length .)
    VAR             reduce using rule 22 (funcionStructura -> length .)
    INT             reduce using rule 22 (funcionStructura -> length .)
    BOOL            reduce using rule 22 (funcionStructura -> length .)
    DOUBLE          reduce using rule 22 (funcionStructura -> length .)
    STR             reduce using rule 22 (funcionStructura -> length .)
    ENTERO          reduce using rule 22 (funcionStructura -> length .)
    $end            reduce using rule 22 (funcionStructura -> length .)
    RETURN          reduce using rule 22 (funcionStructura -> length .)
    LDER            reduce using rule 22 (funcionStructura -> length .)


state 34

    (23) funcionStructura -> remove .

    END             reduce using rule 23 (funcionStructura -> remove .)
    COMENTARIO      reduce using rule 23 (funcionStructura -> remove .)
    PRINT           reduce using rule 23 (funcionStructura -> remove .)
    VARIABLE        reduce using rule 23 (funcionStructura -> remove .)
    IF              reduce using rule 23 (funcionStructura -> remove .)
    FOR             reduce using rule 23 (funcionStructura -> remove .)
    WHILE           reduce using rule 23 (funcionStructura -> remove .)
    DO              reduce using rule 23 (funcionStructura -> remove .)
    VOID            reduce using rule 23 (funcionStructura -> remove .)
    VAR             reduce using rule 23 (funcionStructura -> remove .)
    INT             reduce using rule 23 (funcionStructura -> remove .)
    BOOL            reduce using rule 23 (funcionStructura -> remove .)
    DOUBLE          reduce using rule 23 (funcionStructura -> remove .)
    STR             reduce using rule 23 (funcionStructura -> remove .)
    ENTERO          reduce using rule 23 (funcionStructura -> remove .)
    $end            reduce using rule 23 (funcionStructura -> remove .)
    RETURN          reduce using rule 23 (funcionStructura -> remove .)
    LDER            reduce using rule 23 (funcionStructura -> remove .)


state 35

    (24) funcionStructura -> add .

    END             reduce using rule 24 (funcionStructura -> add .)
    COMENTARIO      reduce using rule 24 (funcionStructura -> add .)
    PRINT           reduce using rule 24 (funcionStructura -> add .)
    VARIABLE        reduce using rule 24 (funcionStructura -> add .)
    IF              reduce using rule 24 (funcionStructura -> add .)
    FOR             reduce using rule 24 (funcionStructura -> add .)
    WHILE           reduce using rule 24 (funcionStructura -> add .)
    DO              reduce using rule 24 (funcionStructura -> add .)
    VOID            reduce using rule 24 (funcionStructura -> add .)
    VAR             reduce using rule 24 (funcionStructura -> add .)
    INT             reduce using rule 24 (funcionStructura -> add .)
    BOOL            reduce using rule 24 (funcionStructura -> add .)
    DOUBLE          reduce using rule 24 (funcionStructura -> add .)
    STR             reduce using rule 24 (funcionStructura -> add .)
    ENTERO          reduce using rule 24 (funcionStructura -> add .)
    $end            reduce using rule 24 (funcionStructura -> add .)
    RETURN          reduce using rule 24 (funcionStructura -> add .)
    LDER            reduce using rule 24 (funcionStructura -> add .)


state 36

    (2) codigo -> algoritmo codigo .

    $end            reduce using rule 2 (codigo -> algoritmo codigo .)
    RETURN          reduce using rule 2 (codigo -> algoritmo codigo .)
    LDER            reduce using rule 2 (codigo -> algoritmo codigo .)


state 37

    (6) algoritmo -> expresion END .

    COMENTARIO      reduce using rule 6 (algoritmo -> expresion END .)
    PRINT           reduce using rule 6 (algoritmo -> expresion END .)
    VARIABLE        reduce using rule 6 (algoritmo -> expresion END .)
    IF              reduce using rule 6 (algoritmo -> expresion END .)
    FOR             reduce using rule 6 (algoritmo -> expresion END .)
    WHILE           reduce using rule 6 (algoritmo -> expresion END .)
    DO              reduce using rule 6 (algoritmo -> expresion END .)
    VOID            reduce using rule 6 (algoritmo -> expresion END .)
    VAR             reduce using rule 6 (algoritmo -> expresion END .)
    INT             reduce using rule 6 (algoritmo -> expresion END .)
    BOOL            reduce using rule 6 (algoritmo -> expresion END .)
    DOUBLE          reduce using rule 6 (algoritmo -> expresion END .)
    STR             reduce using rule 6 (algoritmo -> expresion END .)
    ENTERO          reduce using rule 6 (algoritmo -> expresion END .)
    $end            reduce using rule 6 (algoritmo -> expresion END .)
    RETURN          reduce using rule 6 (algoritmo -> expresion END .)
    LDER            reduce using rule 6 (algoritmo -> expresion END .)


state 38

    (67) comparacion -> expresion operadorComp . expresion
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE

    ENTERO          shift and go to state 30
    VARIABLE        shift and go to state 64

    expresion                      shift and go to state 63
    valor                          shift and go to state 18

state 39

    (75) operadorComp -> MAYOR .

    ENTERO          reduce using rule 75 (operadorComp -> MAYOR .)
    VARIABLE        reduce using rule 75 (operadorComp -> MAYOR .)


state 40

    (76) operadorComp -> MENOR .

    ENTERO          reduce using rule 76 (operadorComp -> MENOR .)
    VARIABLE        reduce using rule 76 (operadorComp -> MENOR .)


state 41

    (77) operadorComp -> MAYORIG .

    ENTERO          reduce using rule 77 (operadorComp -> MAYORIG .)
    VARIABLE        reduce using rule 77 (operadorComp -> MAYORIG .)


state 42

    (78) operadorComp -> MENORIG .

    ENTERO          reduce using rule 78 (operadorComp -> MENORIG .)
    VARIABLE        reduce using rule 78 (operadorComp -> MENORIG .)


state 43

    (79) operadorComp -> DIGUAL .

    ENTERO          reduce using rule 79 (operadorComp -> DIGUAL .)
    VARIABLE        reduce using rule 79 (operadorComp -> DIGUAL .)


state 44

    (80) operadorComp -> DIF .

    ENTERO          reduce using rule 80 (operadorComp -> DIF .)
    VARIABLE        reduce using rule 80 (operadorComp -> DIF .)


state 45

    (7) algoritmo -> comparacion END .

    COMENTARIO      reduce using rule 7 (algoritmo -> comparacion END .)
    PRINT           reduce using rule 7 (algoritmo -> comparacion END .)
    VARIABLE        reduce using rule 7 (algoritmo -> comparacion END .)
    IF              reduce using rule 7 (algoritmo -> comparacion END .)
    FOR             reduce using rule 7 (algoritmo -> comparacion END .)
    WHILE           reduce using rule 7 (algoritmo -> comparacion END .)
    DO              reduce using rule 7 (algoritmo -> comparacion END .)
    VOID            reduce using rule 7 (algoritmo -> comparacion END .)
    VAR             reduce using rule 7 (algoritmo -> comparacion END .)
    INT             reduce using rule 7 (algoritmo -> comparacion END .)
    BOOL            reduce using rule 7 (algoritmo -> comparacion END .)
    DOUBLE          reduce using rule 7 (algoritmo -> comparacion END .)
    STR             reduce using rule 7 (algoritmo -> comparacion END .)
    ENTERO          reduce using rule 7 (algoritmo -> comparacion END .)
    $end            reduce using rule 7 (algoritmo -> comparacion END .)
    RETURN          reduce using rule 7 (algoritmo -> comparacion END .)
    LDER            reduce using rule 7 (algoritmo -> comparacion END .)


state 46

    (108) comnetario -> COMENTARIO VARIABLE .

    $end            reduce using rule 108 (comnetario -> COMENTARIO VARIABLE .)
    RETURN          reduce using rule 108 (comnetario -> COMENTARIO VARIABLE .)
    LDER            reduce using rule 108 (comnetario -> COMENTARIO VARIABLE .)


state 47

    (17) asignacion -> VARIABLE IGUAL . expresiones END
    (29) expresiones -> . expresion
    (30) expresiones -> . comparacion
    (31) expresiones -> . BOOLEAN
    (32) expresiones -> . opstring
    (33) expresiones -> . indexacion
    (34) expresiones -> . lista
    (35) expresiones -> . conjuntos
    (36) expresiones -> . first
    (37) expresiones -> . last
    (38) expresiones -> . length
    (39) expresiones -> . remove
    (40) expresiones -> . add
    (41) expresiones -> . slice
    (42) expresiones -> . opLogicas
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (67) comparacion -> . expresion operadorComp expresion
    (43) opstring -> . string
    (44) opstring -> . VARIABLE
    (45) opstring -> . string MAS opstring
    (46) opstring -> . VARIABLE MAS opstring
    (111) indexacion -> . VARIABLE CIZQ valor CDER
    (50) lista -> . CIZQ elementos CDER
    (57) conjuntos -> . LIZQ elementos LDER
    (51) first -> . VARIABLE POINT FIRST PIZQ PDER
    (52) last -> . VARIABLE POINT LAST PIZQ PDER
    (53) length -> . VARIABLE POINT LEN PIZQ PDER
    (56) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (54) add -> . VARIABLE POINT ADD PIZQ valor PDER
    (55) slice -> . VARIABLE POINT SLICE PIZQ valor COMA valor PDER
    (60) opLogicas -> . terminoLogico
    (61) opLogicas -> . terminoLogico operadorLog terminoLogico
    (62) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE
    (28) string -> . STRING
    (63) terminoLogico -> . VARIABLE
    (64) terminoLogico -> . BOOLEAN
    (65) terminoLogico -> . PIZQ comparacion PDER

    BOOLEAN         shift and go to state 69
    VARIABLE        shift and go to state 65
    CIZQ            shift and go to state 82
    LIZQ            shift and go to state 83
    ENTERO          shift and go to state 30
    STRING          shift and go to state 86
    PIZQ            shift and go to state 84

    expresiones                    shift and go to state 66
    expresion                      shift and go to state 67
    comparacion                    shift and go to state 68
    opstring                       shift and go to state 70
    indexacion                     shift and go to state 71
    lista                          shift and go to state 72
    conjuntos                      shift and go to state 73
    first                          shift and go to state 74
    last                           shift and go to state 75
    length                         shift and go to state 76
    remove                         shift and go to state 77
    add                            shift and go to state 78
    slice                          shift and go to state 79
    opLogicas                      shift and go to state 80
    valor                          shift and go to state 18
    string                         shift and go to state 81
    terminoLogico                  shift and go to state 85

state 48

    (51) first -> VARIABLE POINT . FIRST PIZQ PDER
    (52) last -> VARIABLE POINT . LAST PIZQ PDER
    (53) length -> VARIABLE POINT . LEN PIZQ PDER
    (56) remove -> VARIABLE POINT . REMOVE PIZQ valor PDER
    (54) add -> VARIABLE POINT . ADD PIZQ valor PDER

    FIRST           shift and go to state 87
    LAST            shift and go to state 88
    LEN             shift and go to state 89
    REMOVE          shift and go to state 90
    ADD             shift and go to state 91


state 49

    (47) imprimir -> PRINT PIZQ . opstring PDER END
    (43) opstring -> . string
    (44) opstring -> . VARIABLE
    (45) opstring -> . string MAS opstring
    (46) opstring -> . VARIABLE MAS opstring
    (28) string -> . STRING

    VARIABLE        shift and go to state 93
    STRING          shift and go to state 86

    opstring                       shift and go to state 92
    string                         shift and go to state 81

state 50

    (16) asignacion -> tipo VARIABLE . IGUAL expresiones END
    (48) input -> tipo VARIABLE . IGUAL INPUT PIZQ PDER END
    (14) funciones -> tipo VARIABLE . PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER

    IGUAL           shift and go to state 94
    PIZQ            shift and go to state 95


state 51

    (66) expresion -> valor operadorMat . expresion
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE

    ENTERO          shift and go to state 30
    VARIABLE        shift and go to state 64

    valor                          shift and go to state 18
    expresion                      shift and go to state 96

state 52

    (70) operadorMat -> MAS .

    ENTERO          reduce using rule 70 (operadorMat -> MAS .)
    VARIABLE        reduce using rule 70 (operadorMat -> MAS .)


state 53

    (71) operadorMat -> RESTA .

    ENTERO          reduce using rule 71 (operadorMat -> RESTA .)
    VARIABLE        reduce using rule 71 (operadorMat -> RESTA .)


state 54

    (72) operadorMat -> PROD .

    ENTERO          reduce using rule 72 (operadorMat -> PROD .)
    VARIABLE        reduce using rule 72 (operadorMat -> PROD .)


state 55

    (73) operadorMat -> DIV .

    ENTERO          reduce using rule 73 (operadorMat -> DIV .)
    VARIABLE        reduce using rule 73 (operadorMat -> DIV .)


state 56

    (74) operadorMat -> MOD .

    ENTERO          reduce using rule 74 (operadorMat -> MOD .)
    VARIABLE        reduce using rule 74 (operadorMat -> MOD .)


state 57

    (89) sentenciaIf -> IF PIZQ . comparacion PDER LIZQ algoritmo LDER varianteIf
    (90) sentenciaIf -> IF PIZQ . opLogicas PDER LIZQ algoritmo LDER varianteIf
    (67) comparacion -> . expresion operadorComp expresion
    (60) opLogicas -> . terminoLogico
    (61) opLogicas -> . terminoLogico operadorLog terminoLogico
    (62) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (63) terminoLogico -> . VARIABLE
    (64) terminoLogico -> . BOOLEAN
    (65) terminoLogico -> . PIZQ comparacion PDER
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE

    VARIABLE        shift and go to state 100
    BOOLEAN         shift and go to state 101
    PIZQ            shift and go to state 84
    ENTERO          shift and go to state 30

    comparacion                    shift and go to state 97
    opLogicas                      shift and go to state 98
    expresion                      shift and go to state 99
    terminoLogico                  shift and go to state 85
    valor                          shift and go to state 18

state 58

    (97) sentenciaFOR -> FOR PIZQ . parametrosF PDER LIZQ algoritmo LDER
    (98) parametrosF -> . inicializacionFor END comparacion END VARIABLE increDecre
    (99) parametrosF -> . inicializacionFor END opLogicas END VARIABLE increDecre
    (100) parametrosF -> . VARIABLE IN VARIABLE
    (101) inicializacionFor -> . VARIABLE IGUAL ENTERO
    (102) inicializacionFor -> . INT VARIABLE IGUAL ENTERO
    (103) inicializacionFor -> . VAR VARIABLE IGUAL ENTERO

    VARIABLE        shift and go to state 104
    INT             shift and go to state 105
    VAR             shift and go to state 106

    parametrosF                    shift and go to state 102
    inicializacionFor              shift and go to state 103

state 59

    (106) sentenciaWhile -> WHILE PIZQ . comparacion PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> WHILE PIZQ . opLogicas PDER LIZQ algoritmo LDER
    (67) comparacion -> . expresion operadorComp expresion
    (60) opLogicas -> . terminoLogico
    (61) opLogicas -> . terminoLogico operadorLog terminoLogico
    (62) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (63) terminoLogico -> . VARIABLE
    (64) terminoLogico -> . BOOLEAN
    (65) terminoLogico -> . PIZQ comparacion PDER
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE

    VARIABLE        shift and go to state 100
    BOOLEAN         shift and go to state 101
    PIZQ            shift and go to state 84
    ENTERO          shift and go to state 30

    comparacion                    shift and go to state 107
    opLogicas                      shift and go to state 108
    expresion                      shift and go to state 99
    terminoLogico                  shift and go to state 85
    valor                          shift and go to state 18

state 60

    (109) sentenciaWhile -> DO LIZQ . algoritmo LDER WHILE PIZQ comparacion PDER END
    (110) sentenciaWhile -> DO LIZQ . algoritmo LDER WHILE PIZQ opLogicas PDER END
    (4) algoritmo -> . imprimir
    (5) algoritmo -> . asignacion
    (6) algoritmo -> . expresion END
    (7) algoritmo -> . comparacion END
    (8) algoritmo -> . sentenciaIf
    (9) algoritmo -> . sentenciaFOR
    (10) algoritmo -> . sentenciaWhile
    (11) algoritmo -> . input
    (12) algoritmo -> . funciones
    (13) algoritmo -> . expresionSinRetorno
    (47) imprimir -> . PRINT PIZQ opstring PDER END
    (16) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (17) asignacion -> . VARIABLE IGUAL expresiones END
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (67) comparacion -> . expresion operadorComp expresion
    (89) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (90) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (97) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (109) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (110) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (48) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (14) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (15) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (18) expresionSinRetorno -> . funcionStructura END
    (19) expresionSinRetorno -> . funcionStructura
    (81) tipo -> . VAR
    (82) tipo -> . INT
    (83) tipo -> . BOOL
    (84) tipo -> . DOUBLE
    (85) tipo -> . VOID
    (86) tipo -> . STR
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE
    (20) funcionStructura -> . first
    (21) funcionStructura -> . last
    (22) funcionStructura -> . length
    (23) funcionStructura -> . remove
    (24) funcionStructura -> . add
    (51) first -> . VARIABLE POINT FIRST PIZQ PDER
    (52) last -> . VARIABLE POINT LAST PIZQ PDER
    (53) length -> . VARIABLE POINT LEN PIZQ PDER
    (56) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (54) add -> . VARIABLE POINT ADD PIZQ valor PDER

    PRINT           shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VOID            shift and go to state 23
    VAR             shift and go to state 25
    INT             shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    STR             shift and go to state 29
    ENTERO          shift and go to state 30

    algoritmo                      shift and go to state 109
    comparacion                    shift and go to state 7
    imprimir                       shift and go to state 4
    asignacion                     shift and go to state 5
    expresion                      shift and go to state 6
    sentenciaIf                    shift and go to state 8
    sentenciaFOR                   shift and go to state 9
    sentenciaWhile                 shift and go to state 10
    input                          shift and go to state 11
    funciones                      shift and go to state 12
    expresionSinRetorno            shift and go to state 13
    tipo                           shift and go to state 17
    valor                          shift and go to state 18
    funcionStructura               shift and go to state 24
    first                          shift and go to state 31
    last                           shift and go to state 32
    length                         shift and go to state 33
    remove                         shift and go to state 34
    add                            shift and go to state 35

state 61

    (15) funciones -> VOID VARIABLE . PIZQ parametros PDER LIZQ codigo LDER

    PIZQ            shift and go to state 110


state 62

    (18) expresionSinRetorno -> funcionStructura END .

    COMENTARIO      reduce using rule 18 (expresionSinRetorno -> funcionStructura END .)
    PRINT           reduce using rule 18 (expresionSinRetorno -> funcionStructura END .)
    VARIABLE        reduce using rule 18 (expresionSinRetorno -> funcionStructura END .)
    IF              reduce using rule 18 (expresionSinRetorno -> funcionStructura END .)
    FOR             reduce using rule 18 (expresionSinRetorno -> funcionStructura END .)
    WHILE           reduce using rule 18 (expresionSinRetorno -> funcionStructura END .)
    DO              reduce using rule 18 (expresionSinRetorno -> funcionStructura END .)
    VOID            reduce using rule 18 (expresionSinRetorno -> funcionStructura END .)
    VAR             reduce using rule 18 (expresionSinRetorno -> funcionStructura END .)
    INT             reduce using rule 18 (expresionSinRetorno -> funcionStructura END .)
    BOOL            reduce using rule 18 (expresionSinRetorno -> funcionStructura END .)
    DOUBLE          reduce using rule 18 (expresionSinRetorno -> funcionStructura END .)
    STR             reduce using rule 18 (expresionSinRetorno -> funcionStructura END .)
    ENTERO          reduce using rule 18 (expresionSinRetorno -> funcionStructura END .)
    $end            reduce using rule 18 (expresionSinRetorno -> funcionStructura END .)
    RETURN          reduce using rule 18 (expresionSinRetorno -> funcionStructura END .)
    LDER            reduce using rule 18 (expresionSinRetorno -> funcionStructura END .)


state 63

    (67) comparacion -> expresion operadorComp expresion .

    END             reduce using rule 67 (comparacion -> expresion operadorComp expresion .)
    PDER            reduce using rule 67 (comparacion -> expresion operadorComp expresion .)


state 64

    (88) valor -> VARIABLE .

    MAS             reduce using rule 88 (valor -> VARIABLE .)
    RESTA           reduce using rule 88 (valor -> VARIABLE .)
    PROD            reduce using rule 88 (valor -> VARIABLE .)
    DIV             reduce using rule 88 (valor -> VARIABLE .)
    MOD             reduce using rule 88 (valor -> VARIABLE .)
    END             reduce using rule 88 (valor -> VARIABLE .)
    PDER            reduce using rule 88 (valor -> VARIABLE .)
    MAYOR           reduce using rule 88 (valor -> VARIABLE .)
    MENOR           reduce using rule 88 (valor -> VARIABLE .)
    MAYORIG         reduce using rule 88 (valor -> VARIABLE .)
    MENORIG         reduce using rule 88 (valor -> VARIABLE .)
    DIGUAL          reduce using rule 88 (valor -> VARIABLE .)
    DIF             reduce using rule 88 (valor -> VARIABLE .)
    COMA            reduce using rule 88 (valor -> VARIABLE .)
    CDER            reduce using rule 88 (valor -> VARIABLE .)
    LDER            reduce using rule 88 (valor -> VARIABLE .)


state 65

    (44) opstring -> VARIABLE .
    (46) opstring -> VARIABLE . MAS opstring
    (111) indexacion -> VARIABLE . CIZQ valor CDER
    (51) first -> VARIABLE . POINT FIRST PIZQ PDER
    (52) last -> VARIABLE . POINT LAST PIZQ PDER
    (53) length -> VARIABLE . POINT LEN PIZQ PDER
    (56) remove -> VARIABLE . POINT REMOVE PIZQ valor PDER
    (54) add -> VARIABLE . POINT ADD PIZQ valor PDER
    (55) slice -> VARIABLE . POINT SLICE PIZQ valor COMA valor PDER
    (88) valor -> VARIABLE .
    (63) terminoLogico -> VARIABLE .

  ! shift/reduce conflict for MAS resolved as shift
  ! reduce/reduce conflict for END resolved using rule 44 (opstring -> VARIABLE .)
  ! reduce/reduce conflict for END resolved using rule 44 (opstring -> VARIABLE .)
    END             reduce using rule 44 (opstring -> VARIABLE .)
    MAS             shift and go to state 111
    CIZQ            shift and go to state 112
    POINT           shift and go to state 113
    RESTA           reduce using rule 88 (valor -> VARIABLE .)
    PROD            reduce using rule 88 (valor -> VARIABLE .)
    DIV             reduce using rule 88 (valor -> VARIABLE .)
    MOD             reduce using rule 88 (valor -> VARIABLE .)
    MAYOR           reduce using rule 88 (valor -> VARIABLE .)
    MENOR           reduce using rule 88 (valor -> VARIABLE .)
    MAYORIG         reduce using rule 88 (valor -> VARIABLE .)
    MENORIG         reduce using rule 88 (valor -> VARIABLE .)
    DIGUAL          reduce using rule 88 (valor -> VARIABLE .)
    DIF             reduce using rule 88 (valor -> VARIABLE .)
    AND             reduce using rule 63 (terminoLogico -> VARIABLE .)
    OR              reduce using rule 63 (terminoLogico -> VARIABLE .)

  ! MAS             [ reduce using rule 88 (valor -> VARIABLE .) ]
  ! END             [ reduce using rule 88 (valor -> VARIABLE .) ]
  ! END             [ reduce using rule 63 (terminoLogico -> VARIABLE .) ]


state 66

    (17) asignacion -> VARIABLE IGUAL expresiones . END

    END             shift and go to state 114


state 67

    (29) expresiones -> expresion .
    (67) comparacion -> expresion . operadorComp expresion
    (75) operadorComp -> . MAYOR
    (76) operadorComp -> . MENOR
    (77) operadorComp -> . MAYORIG
    (78) operadorComp -> . MENORIG
    (79) operadorComp -> . DIGUAL
    (80) operadorComp -> . DIF

    END             reduce using rule 29 (expresiones -> expresion .)
    MAYOR           shift and go to state 39
    MENOR           shift and go to state 40
    MAYORIG         shift and go to state 41
    MENORIG         shift and go to state 42
    DIGUAL          shift and go to state 43
    DIF             shift and go to state 44

    operadorComp                   shift and go to state 38

state 68

    (30) expresiones -> comparacion .

    END             reduce using rule 30 (expresiones -> comparacion .)


state 69

    (31) expresiones -> BOOLEAN .
    (64) terminoLogico -> BOOLEAN .

  ! reduce/reduce conflict for END resolved using rule 31 (expresiones -> BOOLEAN .)
    END             reduce using rule 31 (expresiones -> BOOLEAN .)
    AND             reduce using rule 64 (terminoLogico -> BOOLEAN .)
    OR              reduce using rule 64 (terminoLogico -> BOOLEAN .)

  ! END             [ reduce using rule 64 (terminoLogico -> BOOLEAN .) ]


state 70

    (32) expresiones -> opstring .

    END             reduce using rule 32 (expresiones -> opstring .)


state 71

    (33) expresiones -> indexacion .

    END             reduce using rule 33 (expresiones -> indexacion .)


state 72

    (34) expresiones -> lista .

    END             reduce using rule 34 (expresiones -> lista .)


state 73

    (35) expresiones -> conjuntos .

    END             reduce using rule 35 (expresiones -> conjuntos .)


state 74

    (36) expresiones -> first .

    END             reduce using rule 36 (expresiones -> first .)


state 75

    (37) expresiones -> last .

    END             reduce using rule 37 (expresiones -> last .)


state 76

    (38) expresiones -> length .

    END             reduce using rule 38 (expresiones -> length .)


state 77

    (39) expresiones -> remove .

    END             reduce using rule 39 (expresiones -> remove .)


state 78

    (40) expresiones -> add .

    END             reduce using rule 40 (expresiones -> add .)


state 79

    (41) expresiones -> slice .

    END             reduce using rule 41 (expresiones -> slice .)


state 80

    (42) expresiones -> opLogicas .

    END             reduce using rule 42 (expresiones -> opLogicas .)


state 81

    (43) opstring -> string .
    (45) opstring -> string . MAS opstring

    END             reduce using rule 43 (opstring -> string .)
    PDER            reduce using rule 43 (opstring -> string .)
    MAS             shift and go to state 115


state 82

    (50) lista -> CIZQ . elementos CDER
    (58) elementos -> . valor
    (59) elementos -> . valor COMA elementos
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE

    ENTERO          shift and go to state 30
    VARIABLE        shift and go to state 64

    elementos                      shift and go to state 116
    valor                          shift and go to state 117

state 83

    (57) conjuntos -> LIZQ . elementos LDER
    (58) elementos -> . valor
    (59) elementos -> . valor COMA elementos
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE

    ENTERO          shift and go to state 30
    VARIABLE        shift and go to state 64

    elementos                      shift and go to state 118
    valor                          shift and go to state 117

state 84

    (65) terminoLogico -> PIZQ . comparacion PDER
    (67) comparacion -> . expresion operadorComp expresion
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE

    ENTERO          shift and go to state 30
    VARIABLE        shift and go to state 64

    comparacion                    shift and go to state 119
    expresion                      shift and go to state 99
    valor                          shift and go to state 18

state 85

    (60) opLogicas -> terminoLogico .
    (61) opLogicas -> terminoLogico . operadorLog terminoLogico
    (62) opLogicas -> terminoLogico . operadorLog terminoLogico operadorLog opLogicas
    (68) operadorLog -> . AND
    (69) operadorLog -> . OR

    END             reduce using rule 60 (opLogicas -> terminoLogico .)
    PDER            reduce using rule 60 (opLogicas -> terminoLogico .)
    AND             shift and go to state 121
    OR              shift and go to state 122

    operadorLog                    shift and go to state 120

state 86

    (28) string -> STRING .

    MAS             reduce using rule 28 (string -> STRING .)
    END             reduce using rule 28 (string -> STRING .)
    PDER            reduce using rule 28 (string -> STRING .)


state 87

    (51) first -> VARIABLE POINT FIRST . PIZQ PDER

    PIZQ            shift and go to state 123


state 88

    (52) last -> VARIABLE POINT LAST . PIZQ PDER

    PIZQ            shift and go to state 124


state 89

    (53) length -> VARIABLE POINT LEN . PIZQ PDER

    PIZQ            shift and go to state 125


state 90

    (56) remove -> VARIABLE POINT REMOVE . PIZQ valor PDER

    PIZQ            shift and go to state 126


state 91

    (54) add -> VARIABLE POINT ADD . PIZQ valor PDER

    PIZQ            shift and go to state 127


state 92

    (47) imprimir -> PRINT PIZQ opstring . PDER END

    PDER            shift and go to state 128


state 93

    (44) opstring -> VARIABLE .
    (46) opstring -> VARIABLE . MAS opstring

    PDER            reduce using rule 44 (opstring -> VARIABLE .)
    END             reduce using rule 44 (opstring -> VARIABLE .)
    MAS             shift and go to state 111


state 94

    (16) asignacion -> tipo VARIABLE IGUAL . expresiones END
    (48) input -> tipo VARIABLE IGUAL . INPUT PIZQ PDER END
    (29) expresiones -> . expresion
    (30) expresiones -> . comparacion
    (31) expresiones -> . BOOLEAN
    (32) expresiones -> . opstring
    (33) expresiones -> . indexacion
    (34) expresiones -> . lista
    (35) expresiones -> . conjuntos
    (36) expresiones -> . first
    (37) expresiones -> . last
    (38) expresiones -> . length
    (39) expresiones -> . remove
    (40) expresiones -> . add
    (41) expresiones -> . slice
    (42) expresiones -> . opLogicas
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (67) comparacion -> . expresion operadorComp expresion
    (43) opstring -> . string
    (44) opstring -> . VARIABLE
    (45) opstring -> . string MAS opstring
    (46) opstring -> . VARIABLE MAS opstring
    (111) indexacion -> . VARIABLE CIZQ valor CDER
    (50) lista -> . CIZQ elementos CDER
    (57) conjuntos -> . LIZQ elementos LDER
    (51) first -> . VARIABLE POINT FIRST PIZQ PDER
    (52) last -> . VARIABLE POINT LAST PIZQ PDER
    (53) length -> . VARIABLE POINT LEN PIZQ PDER
    (56) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (54) add -> . VARIABLE POINT ADD PIZQ valor PDER
    (55) slice -> . VARIABLE POINT SLICE PIZQ valor COMA valor PDER
    (60) opLogicas -> . terminoLogico
    (61) opLogicas -> . terminoLogico operadorLog terminoLogico
    (62) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE
    (28) string -> . STRING
    (63) terminoLogico -> . VARIABLE
    (64) terminoLogico -> . BOOLEAN
    (65) terminoLogico -> . PIZQ comparacion PDER

    INPUT           shift and go to state 130
    BOOLEAN         shift and go to state 69
    VARIABLE        shift and go to state 65
    CIZQ            shift and go to state 82
    LIZQ            shift and go to state 83
    ENTERO          shift and go to state 30
    STRING          shift and go to state 86
    PIZQ            shift and go to state 84

    expresiones                    shift and go to state 129
    expresion                      shift and go to state 67
    comparacion                    shift and go to state 68
    opstring                       shift and go to state 70
    indexacion                     shift and go to state 71
    lista                          shift and go to state 72
    conjuntos                      shift and go to state 73
    first                          shift and go to state 74
    last                           shift and go to state 75
    length                         shift and go to state 76
    remove                         shift and go to state 77
    add                            shift and go to state 78
    slice                          shift and go to state 79
    opLogicas                      shift and go to state 80
    valor                          shift and go to state 18
    string                         shift and go to state 81
    terminoLogico                  shift and go to state 85

state 95

    (14) funciones -> tipo VARIABLE PIZQ . parametros PDER LIZQ codigo RETURN expresion END LDER
    (25) parametros -> . empty
    (26) parametros -> . tipo VARIABLE
    (27) parametros -> . tipo VARIABLE COMA parametros
    (112) empty -> .
    (81) tipo -> . VAR
    (82) tipo -> . INT
    (83) tipo -> . BOOL
    (84) tipo -> . DOUBLE
    (85) tipo -> . VOID
    (86) tipo -> . STR

    PDER            reduce using rule 112 (empty -> .)
    VAR             shift and go to state 25
    INT             shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 134
    STR             shift and go to state 29

    tipo                           shift and go to state 131
    parametros                     shift and go to state 132
    empty                          shift and go to state 133

state 96

    (66) expresion -> valor operadorMat expresion .

    END             reduce using rule 66 (expresion -> valor operadorMat expresion .)
    MAYOR           reduce using rule 66 (expresion -> valor operadorMat expresion .)
    MENOR           reduce using rule 66 (expresion -> valor operadorMat expresion .)
    MAYORIG         reduce using rule 66 (expresion -> valor operadorMat expresion .)
    MENORIG         reduce using rule 66 (expresion -> valor operadorMat expresion .)
    DIGUAL          reduce using rule 66 (expresion -> valor operadorMat expresion .)
    DIF             reduce using rule 66 (expresion -> valor operadorMat expresion .)
    PDER            reduce using rule 66 (expresion -> valor operadorMat expresion .)


state 97

    (89) sentenciaIf -> IF PIZQ comparacion . PDER LIZQ algoritmo LDER varianteIf

    PDER            shift and go to state 135


state 98

    (90) sentenciaIf -> IF PIZQ opLogicas . PDER LIZQ algoritmo LDER varianteIf

    PDER            shift and go to state 136


state 99

    (67) comparacion -> expresion . operadorComp expresion
    (75) operadorComp -> . MAYOR
    (76) operadorComp -> . MENOR
    (77) operadorComp -> . MAYORIG
    (78) operadorComp -> . MENORIG
    (79) operadorComp -> . DIGUAL
    (80) operadorComp -> . DIF

    MAYOR           shift and go to state 39
    MENOR           shift and go to state 40
    MAYORIG         shift and go to state 41
    MENORIG         shift and go to state 42
    DIGUAL          shift and go to state 43
    DIF             shift and go to state 44

    operadorComp                   shift and go to state 38

state 100

    (63) terminoLogico -> VARIABLE .
    (88) valor -> VARIABLE .

    AND             reduce using rule 63 (terminoLogico -> VARIABLE .)
    OR              reduce using rule 63 (terminoLogico -> VARIABLE .)
    PDER            reduce using rule 63 (terminoLogico -> VARIABLE .)
    END             reduce using rule 63 (terminoLogico -> VARIABLE .)
    MAS             reduce using rule 88 (valor -> VARIABLE .)
    RESTA           reduce using rule 88 (valor -> VARIABLE .)
    PROD            reduce using rule 88 (valor -> VARIABLE .)
    DIV             reduce using rule 88 (valor -> VARIABLE .)
    MOD             reduce using rule 88 (valor -> VARIABLE .)
    MAYOR           reduce using rule 88 (valor -> VARIABLE .)
    MENOR           reduce using rule 88 (valor -> VARIABLE .)
    MAYORIG         reduce using rule 88 (valor -> VARIABLE .)
    MENORIG         reduce using rule 88 (valor -> VARIABLE .)
    DIGUAL          reduce using rule 88 (valor -> VARIABLE .)
    DIF             reduce using rule 88 (valor -> VARIABLE .)


state 101

    (64) terminoLogico -> BOOLEAN .

    AND             reduce using rule 64 (terminoLogico -> BOOLEAN .)
    OR              reduce using rule 64 (terminoLogico -> BOOLEAN .)
    PDER            reduce using rule 64 (terminoLogico -> BOOLEAN .)
    END             reduce using rule 64 (terminoLogico -> BOOLEAN .)


state 102

    (97) sentenciaFOR -> FOR PIZQ parametrosF . PDER LIZQ algoritmo LDER

    PDER            shift and go to state 137


state 103

    (98) parametrosF -> inicializacionFor . END comparacion END VARIABLE increDecre
    (99) parametrosF -> inicializacionFor . END opLogicas END VARIABLE increDecre

    END             shift and go to state 138


state 104

    (100) parametrosF -> VARIABLE . IN VARIABLE
    (101) inicializacionFor -> VARIABLE . IGUAL ENTERO

    IN              shift and go to state 139
    IGUAL           shift and go to state 140


state 105

    (102) inicializacionFor -> INT . VARIABLE IGUAL ENTERO

    VARIABLE        shift and go to state 141


state 106

    (103) inicializacionFor -> VAR . VARIABLE IGUAL ENTERO

    VARIABLE        shift and go to state 142


state 107

    (106) sentenciaWhile -> WHILE PIZQ comparacion . PDER LIZQ algoritmo LDER

    PDER            shift and go to state 143


state 108

    (107) sentenciaWhile -> WHILE PIZQ opLogicas . PDER LIZQ algoritmo LDER

    PDER            shift and go to state 144


state 109

    (109) sentenciaWhile -> DO LIZQ algoritmo . LDER WHILE PIZQ comparacion PDER END
    (110) sentenciaWhile -> DO LIZQ algoritmo . LDER WHILE PIZQ opLogicas PDER END

    LDER            shift and go to state 145


state 110

    (15) funciones -> VOID VARIABLE PIZQ . parametros PDER LIZQ codigo LDER
    (25) parametros -> . empty
    (26) parametros -> . tipo VARIABLE
    (27) parametros -> . tipo VARIABLE COMA parametros
    (112) empty -> .
    (81) tipo -> . VAR
    (82) tipo -> . INT
    (83) tipo -> . BOOL
    (84) tipo -> . DOUBLE
    (85) tipo -> . VOID
    (86) tipo -> . STR

    PDER            reduce using rule 112 (empty -> .)
    VAR             shift and go to state 25
    INT             shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 134
    STR             shift and go to state 29

    parametros                     shift and go to state 146
    empty                          shift and go to state 133
    tipo                           shift and go to state 131

state 111

    (46) opstring -> VARIABLE MAS . opstring
    (43) opstring -> . string
    (44) opstring -> . VARIABLE
    (45) opstring -> . string MAS opstring
    (46) opstring -> . VARIABLE MAS opstring
    (28) string -> . STRING

    VARIABLE        shift and go to state 93
    STRING          shift and go to state 86

    opstring                       shift and go to state 147
    string                         shift and go to state 81

state 112

    (111) indexacion -> VARIABLE CIZQ . valor CDER
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE

    ENTERO          shift and go to state 30
    VARIABLE        shift and go to state 64

    valor                          shift and go to state 148

state 113

    (51) first -> VARIABLE POINT . FIRST PIZQ PDER
    (52) last -> VARIABLE POINT . LAST PIZQ PDER
    (53) length -> VARIABLE POINT . LEN PIZQ PDER
    (56) remove -> VARIABLE POINT . REMOVE PIZQ valor PDER
    (54) add -> VARIABLE POINT . ADD PIZQ valor PDER
    (55) slice -> VARIABLE POINT . SLICE PIZQ valor COMA valor PDER

    FIRST           shift and go to state 87
    LAST            shift and go to state 88
    LEN             shift and go to state 89
    REMOVE          shift and go to state 90
    ADD             shift and go to state 91
    SLICE           shift and go to state 149


state 114

    (17) asignacion -> VARIABLE IGUAL expresiones END .

    COMENTARIO      reduce using rule 17 (asignacion -> VARIABLE IGUAL expresiones END .)
    PRINT           reduce using rule 17 (asignacion -> VARIABLE IGUAL expresiones END .)
    VARIABLE        reduce using rule 17 (asignacion -> VARIABLE IGUAL expresiones END .)
    IF              reduce using rule 17 (asignacion -> VARIABLE IGUAL expresiones END .)
    FOR             reduce using rule 17 (asignacion -> VARIABLE IGUAL expresiones END .)
    WHILE           reduce using rule 17 (asignacion -> VARIABLE IGUAL expresiones END .)
    DO              reduce using rule 17 (asignacion -> VARIABLE IGUAL expresiones END .)
    VOID            reduce using rule 17 (asignacion -> VARIABLE IGUAL expresiones END .)
    VAR             reduce using rule 17 (asignacion -> VARIABLE IGUAL expresiones END .)
    INT             reduce using rule 17 (asignacion -> VARIABLE IGUAL expresiones END .)
    BOOL            reduce using rule 17 (asignacion -> VARIABLE IGUAL expresiones END .)
    DOUBLE          reduce using rule 17 (asignacion -> VARIABLE IGUAL expresiones END .)
    STR             reduce using rule 17 (asignacion -> VARIABLE IGUAL expresiones END .)
    ENTERO          reduce using rule 17 (asignacion -> VARIABLE IGUAL expresiones END .)
    $end            reduce using rule 17 (asignacion -> VARIABLE IGUAL expresiones END .)
    RETURN          reduce using rule 17 (asignacion -> VARIABLE IGUAL expresiones END .)
    LDER            reduce using rule 17 (asignacion -> VARIABLE IGUAL expresiones END .)


state 115

    (45) opstring -> string MAS . opstring
    (43) opstring -> . string
    (44) opstring -> . VARIABLE
    (45) opstring -> . string MAS opstring
    (46) opstring -> . VARIABLE MAS opstring
    (28) string -> . STRING

    VARIABLE        shift and go to state 93
    STRING          shift and go to state 86

    string                         shift and go to state 81
    opstring                       shift and go to state 150

state 116

    (50) lista -> CIZQ elementos . CDER

    CDER            shift and go to state 151


state 117

    (58) elementos -> valor .
    (59) elementos -> valor . COMA elementos

    CDER            reduce using rule 58 (elementos -> valor .)
    LDER            reduce using rule 58 (elementos -> valor .)
    COMA            shift and go to state 152


state 118

    (57) conjuntos -> LIZQ elementos . LDER

    LDER            shift and go to state 153


state 119

    (65) terminoLogico -> PIZQ comparacion . PDER

    PDER            shift and go to state 154


state 120

    (61) opLogicas -> terminoLogico operadorLog . terminoLogico
    (62) opLogicas -> terminoLogico operadorLog . terminoLogico operadorLog opLogicas
    (63) terminoLogico -> . VARIABLE
    (64) terminoLogico -> . BOOLEAN
    (65) terminoLogico -> . PIZQ comparacion PDER

    VARIABLE        shift and go to state 156
    BOOLEAN         shift and go to state 101
    PIZQ            shift and go to state 84

    terminoLogico                  shift and go to state 155

state 121

    (68) operadorLog -> AND .

    VARIABLE        reduce using rule 68 (operadorLog -> AND .)
    BOOLEAN         reduce using rule 68 (operadorLog -> AND .)
    PIZQ            reduce using rule 68 (operadorLog -> AND .)


state 122

    (69) operadorLog -> OR .

    VARIABLE        reduce using rule 69 (operadorLog -> OR .)
    BOOLEAN         reduce using rule 69 (operadorLog -> OR .)
    PIZQ            reduce using rule 69 (operadorLog -> OR .)


state 123

    (51) first -> VARIABLE POINT FIRST PIZQ . PDER

    PDER            shift and go to state 157


state 124

    (52) last -> VARIABLE POINT LAST PIZQ . PDER

    PDER            shift and go to state 158


state 125

    (53) length -> VARIABLE POINT LEN PIZQ . PDER

    PDER            shift and go to state 159


state 126

    (56) remove -> VARIABLE POINT REMOVE PIZQ . valor PDER
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE

    ENTERO          shift and go to state 30
    VARIABLE        shift and go to state 64

    valor                          shift and go to state 160

state 127

    (54) add -> VARIABLE POINT ADD PIZQ . valor PDER
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE

    ENTERO          shift and go to state 30
    VARIABLE        shift and go to state 64

    valor                          shift and go to state 161

state 128

    (47) imprimir -> PRINT PIZQ opstring PDER . END

    END             shift and go to state 162


state 129

    (16) asignacion -> tipo VARIABLE IGUAL expresiones . END

    END             shift and go to state 163


state 130

    (48) input -> tipo VARIABLE IGUAL INPUT . PIZQ PDER END

    PIZQ            shift and go to state 164


state 131

    (26) parametros -> tipo . VARIABLE
    (27) parametros -> tipo . VARIABLE COMA parametros

    VARIABLE        shift and go to state 165


state 132

    (14) funciones -> tipo VARIABLE PIZQ parametros . PDER LIZQ codigo RETURN expresion END LDER

    PDER            shift and go to state 166


state 133

    (25) parametros -> empty .

    PDER            reduce using rule 25 (parametros -> empty .)


state 134

    (85) tipo -> VOID .

    VARIABLE        reduce using rule 85 (tipo -> VOID .)


state 135

    (89) sentenciaIf -> IF PIZQ comparacion PDER . LIZQ algoritmo LDER varianteIf

    LIZQ            shift and go to state 167


state 136

    (90) sentenciaIf -> IF PIZQ opLogicas PDER . LIZQ algoritmo LDER varianteIf

    LIZQ            shift and go to state 168


state 137

    (97) sentenciaFOR -> FOR PIZQ parametrosF PDER . LIZQ algoritmo LDER

    LIZQ            shift and go to state 169


state 138

    (98) parametrosF -> inicializacionFor END . comparacion END VARIABLE increDecre
    (99) parametrosF -> inicializacionFor END . opLogicas END VARIABLE increDecre
    (67) comparacion -> . expresion operadorComp expresion
    (60) opLogicas -> . terminoLogico
    (61) opLogicas -> . terminoLogico operadorLog terminoLogico
    (62) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (63) terminoLogico -> . VARIABLE
    (64) terminoLogico -> . BOOLEAN
    (65) terminoLogico -> . PIZQ comparacion PDER
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE

    VARIABLE        shift and go to state 100
    BOOLEAN         shift and go to state 101
    PIZQ            shift and go to state 84
    ENTERO          shift and go to state 30

    comparacion                    shift and go to state 170
    opLogicas                      shift and go to state 171
    expresion                      shift and go to state 99
    terminoLogico                  shift and go to state 85
    valor                          shift and go to state 18

state 139

    (100) parametrosF -> VARIABLE IN . VARIABLE

    VARIABLE        shift and go to state 172


state 140

    (101) inicializacionFor -> VARIABLE IGUAL . ENTERO

    ENTERO          shift and go to state 173


state 141

    (102) inicializacionFor -> INT VARIABLE . IGUAL ENTERO

    IGUAL           shift and go to state 174


state 142

    (103) inicializacionFor -> VAR VARIABLE . IGUAL ENTERO

    IGUAL           shift and go to state 175


state 143

    (106) sentenciaWhile -> WHILE PIZQ comparacion PDER . LIZQ algoritmo LDER

    LIZQ            shift and go to state 176


state 144

    (107) sentenciaWhile -> WHILE PIZQ opLogicas PDER . LIZQ algoritmo LDER

    LIZQ            shift and go to state 177


state 145

    (109) sentenciaWhile -> DO LIZQ algoritmo LDER . WHILE PIZQ comparacion PDER END
    (110) sentenciaWhile -> DO LIZQ algoritmo LDER . WHILE PIZQ opLogicas PDER END

    WHILE           shift and go to state 178


state 146

    (15) funciones -> VOID VARIABLE PIZQ parametros . PDER LIZQ codigo LDER

    PDER            shift and go to state 179


state 147

    (46) opstring -> VARIABLE MAS opstring .

    END             reduce using rule 46 (opstring -> VARIABLE MAS opstring .)
    PDER            reduce using rule 46 (opstring -> VARIABLE MAS opstring .)


state 148

    (111) indexacion -> VARIABLE CIZQ valor . CDER

    CDER            shift and go to state 180


state 149

    (55) slice -> VARIABLE POINT SLICE . PIZQ valor COMA valor PDER

    PIZQ            shift and go to state 181


state 150

    (45) opstring -> string MAS opstring .

    END             reduce using rule 45 (opstring -> string MAS opstring .)
    PDER            reduce using rule 45 (opstring -> string MAS opstring .)


state 151

    (50) lista -> CIZQ elementos CDER .

    END             reduce using rule 50 (lista -> CIZQ elementos CDER .)


state 152

    (59) elementos -> valor COMA . elementos
    (58) elementos -> . valor
    (59) elementos -> . valor COMA elementos
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE

    ENTERO          shift and go to state 30
    VARIABLE        shift and go to state 64

    valor                          shift and go to state 117
    elementos                      shift and go to state 182

state 153

    (57) conjuntos -> LIZQ elementos LDER .

    END             reduce using rule 57 (conjuntos -> LIZQ elementos LDER .)


state 154

    (65) terminoLogico -> PIZQ comparacion PDER .

    AND             reduce using rule 65 (terminoLogico -> PIZQ comparacion PDER .)
    OR              reduce using rule 65 (terminoLogico -> PIZQ comparacion PDER .)
    END             reduce using rule 65 (terminoLogico -> PIZQ comparacion PDER .)
    PDER            reduce using rule 65 (terminoLogico -> PIZQ comparacion PDER .)


state 155

    (61) opLogicas -> terminoLogico operadorLog terminoLogico .
    (62) opLogicas -> terminoLogico operadorLog terminoLogico . operadorLog opLogicas
    (68) operadorLog -> . AND
    (69) operadorLog -> . OR

    END             reduce using rule 61 (opLogicas -> terminoLogico operadorLog terminoLogico .)
    PDER            reduce using rule 61 (opLogicas -> terminoLogico operadorLog terminoLogico .)
    AND             shift and go to state 121
    OR              shift and go to state 122

    operadorLog                    shift and go to state 183

state 156

    (63) terminoLogico -> VARIABLE .

    AND             reduce using rule 63 (terminoLogico -> VARIABLE .)
    OR              reduce using rule 63 (terminoLogico -> VARIABLE .)
    END             reduce using rule 63 (terminoLogico -> VARIABLE .)
    PDER            reduce using rule 63 (terminoLogico -> VARIABLE .)


state 157

    (51) first -> VARIABLE POINT FIRST PIZQ PDER .

    END             reduce using rule 51 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    COMENTARIO      reduce using rule 51 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    PRINT           reduce using rule 51 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    VARIABLE        reduce using rule 51 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    IF              reduce using rule 51 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    FOR             reduce using rule 51 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    WHILE           reduce using rule 51 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    DO              reduce using rule 51 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    VOID            reduce using rule 51 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    VAR             reduce using rule 51 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    INT             reduce using rule 51 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    BOOL            reduce using rule 51 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    DOUBLE          reduce using rule 51 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    STR             reduce using rule 51 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    ENTERO          reduce using rule 51 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    $end            reduce using rule 51 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    RETURN          reduce using rule 51 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    LDER            reduce using rule 51 (first -> VARIABLE POINT FIRST PIZQ PDER .)


state 158

    (52) last -> VARIABLE POINT LAST PIZQ PDER .

    END             reduce using rule 52 (last -> VARIABLE POINT LAST PIZQ PDER .)
    COMENTARIO      reduce using rule 52 (last -> VARIABLE POINT LAST PIZQ PDER .)
    PRINT           reduce using rule 52 (last -> VARIABLE POINT LAST PIZQ PDER .)
    VARIABLE        reduce using rule 52 (last -> VARIABLE POINT LAST PIZQ PDER .)
    IF              reduce using rule 52 (last -> VARIABLE POINT LAST PIZQ PDER .)
    FOR             reduce using rule 52 (last -> VARIABLE POINT LAST PIZQ PDER .)
    WHILE           reduce using rule 52 (last -> VARIABLE POINT LAST PIZQ PDER .)
    DO              reduce using rule 52 (last -> VARIABLE POINT LAST PIZQ PDER .)
    VOID            reduce using rule 52 (last -> VARIABLE POINT LAST PIZQ PDER .)
    VAR             reduce using rule 52 (last -> VARIABLE POINT LAST PIZQ PDER .)
    INT             reduce using rule 52 (last -> VARIABLE POINT LAST PIZQ PDER .)
    BOOL            reduce using rule 52 (last -> VARIABLE POINT LAST PIZQ PDER .)
    DOUBLE          reduce using rule 52 (last -> VARIABLE POINT LAST PIZQ PDER .)
    STR             reduce using rule 52 (last -> VARIABLE POINT LAST PIZQ PDER .)
    ENTERO          reduce using rule 52 (last -> VARIABLE POINT LAST PIZQ PDER .)
    $end            reduce using rule 52 (last -> VARIABLE POINT LAST PIZQ PDER .)
    RETURN          reduce using rule 52 (last -> VARIABLE POINT LAST PIZQ PDER .)
    LDER            reduce using rule 52 (last -> VARIABLE POINT LAST PIZQ PDER .)


state 159

    (53) length -> VARIABLE POINT LEN PIZQ PDER .

    END             reduce using rule 53 (length -> VARIABLE POINT LEN PIZQ PDER .)
    COMENTARIO      reduce using rule 53 (length -> VARIABLE POINT LEN PIZQ PDER .)
    PRINT           reduce using rule 53 (length -> VARIABLE POINT LEN PIZQ PDER .)
    VARIABLE        reduce using rule 53 (length -> VARIABLE POINT LEN PIZQ PDER .)
    IF              reduce using rule 53 (length -> VARIABLE POINT LEN PIZQ PDER .)
    FOR             reduce using rule 53 (length -> VARIABLE POINT LEN PIZQ PDER .)
    WHILE           reduce using rule 53 (length -> VARIABLE POINT LEN PIZQ PDER .)
    DO              reduce using rule 53 (length -> VARIABLE POINT LEN PIZQ PDER .)
    VOID            reduce using rule 53 (length -> VARIABLE POINT LEN PIZQ PDER .)
    VAR             reduce using rule 53 (length -> VARIABLE POINT LEN PIZQ PDER .)
    INT             reduce using rule 53 (length -> VARIABLE POINT LEN PIZQ PDER .)
    BOOL            reduce using rule 53 (length -> VARIABLE POINT LEN PIZQ PDER .)
    DOUBLE          reduce using rule 53 (length -> VARIABLE POINT LEN PIZQ PDER .)
    STR             reduce using rule 53 (length -> VARIABLE POINT LEN PIZQ PDER .)
    ENTERO          reduce using rule 53 (length -> VARIABLE POINT LEN PIZQ PDER .)
    $end            reduce using rule 53 (length -> VARIABLE POINT LEN PIZQ PDER .)
    RETURN          reduce using rule 53 (length -> VARIABLE POINT LEN PIZQ PDER .)
    LDER            reduce using rule 53 (length -> VARIABLE POINT LEN PIZQ PDER .)


state 160

    (56) remove -> VARIABLE POINT REMOVE PIZQ valor . PDER

    PDER            shift and go to state 184


state 161

    (54) add -> VARIABLE POINT ADD PIZQ valor . PDER

    PDER            shift and go to state 185


state 162

    (47) imprimir -> PRINT PIZQ opstring PDER END .

    COMENTARIO      reduce using rule 47 (imprimir -> PRINT PIZQ opstring PDER END .)
    PRINT           reduce using rule 47 (imprimir -> PRINT PIZQ opstring PDER END .)
    VARIABLE        reduce using rule 47 (imprimir -> PRINT PIZQ opstring PDER END .)
    IF              reduce using rule 47 (imprimir -> PRINT PIZQ opstring PDER END .)
    FOR             reduce using rule 47 (imprimir -> PRINT PIZQ opstring PDER END .)
    WHILE           reduce using rule 47 (imprimir -> PRINT PIZQ opstring PDER END .)
    DO              reduce using rule 47 (imprimir -> PRINT PIZQ opstring PDER END .)
    VOID            reduce using rule 47 (imprimir -> PRINT PIZQ opstring PDER END .)
    VAR             reduce using rule 47 (imprimir -> PRINT PIZQ opstring PDER END .)
    INT             reduce using rule 47 (imprimir -> PRINT PIZQ opstring PDER END .)
    BOOL            reduce using rule 47 (imprimir -> PRINT PIZQ opstring PDER END .)
    DOUBLE          reduce using rule 47 (imprimir -> PRINT PIZQ opstring PDER END .)
    STR             reduce using rule 47 (imprimir -> PRINT PIZQ opstring PDER END .)
    ENTERO          reduce using rule 47 (imprimir -> PRINT PIZQ opstring PDER END .)
    $end            reduce using rule 47 (imprimir -> PRINT PIZQ opstring PDER END .)
    RETURN          reduce using rule 47 (imprimir -> PRINT PIZQ opstring PDER END .)
    LDER            reduce using rule 47 (imprimir -> PRINT PIZQ opstring PDER END .)


state 163

    (16) asignacion -> tipo VARIABLE IGUAL expresiones END .

    COMENTARIO      reduce using rule 16 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    PRINT           reduce using rule 16 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    VARIABLE        reduce using rule 16 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    IF              reduce using rule 16 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    FOR             reduce using rule 16 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    WHILE           reduce using rule 16 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    DO              reduce using rule 16 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    VOID            reduce using rule 16 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    VAR             reduce using rule 16 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    INT             reduce using rule 16 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    BOOL            reduce using rule 16 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    DOUBLE          reduce using rule 16 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    STR             reduce using rule 16 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    ENTERO          reduce using rule 16 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    $end            reduce using rule 16 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    RETURN          reduce using rule 16 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    LDER            reduce using rule 16 (asignacion -> tipo VARIABLE IGUAL expresiones END .)


state 164

    (48) input -> tipo VARIABLE IGUAL INPUT PIZQ . PDER END

    PDER            shift and go to state 186


state 165

    (26) parametros -> tipo VARIABLE .
    (27) parametros -> tipo VARIABLE . COMA parametros

    PDER            reduce using rule 26 (parametros -> tipo VARIABLE .)
    COMA            shift and go to state 187


state 166

    (14) funciones -> tipo VARIABLE PIZQ parametros PDER . LIZQ codigo RETURN expresion END LDER

    LIZQ            shift and go to state 188


state 167

    (89) sentenciaIf -> IF PIZQ comparacion PDER LIZQ . algoritmo LDER varianteIf
    (4) algoritmo -> . imprimir
    (5) algoritmo -> . asignacion
    (6) algoritmo -> . expresion END
    (7) algoritmo -> . comparacion END
    (8) algoritmo -> . sentenciaIf
    (9) algoritmo -> . sentenciaFOR
    (10) algoritmo -> . sentenciaWhile
    (11) algoritmo -> . input
    (12) algoritmo -> . funciones
    (13) algoritmo -> . expresionSinRetorno
    (47) imprimir -> . PRINT PIZQ opstring PDER END
    (16) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (17) asignacion -> . VARIABLE IGUAL expresiones END
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (67) comparacion -> . expresion operadorComp expresion
    (89) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (90) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (97) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (109) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (110) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (48) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (14) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (15) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (18) expresionSinRetorno -> . funcionStructura END
    (19) expresionSinRetorno -> . funcionStructura
    (81) tipo -> . VAR
    (82) tipo -> . INT
    (83) tipo -> . BOOL
    (84) tipo -> . DOUBLE
    (85) tipo -> . VOID
    (86) tipo -> . STR
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE
    (20) funcionStructura -> . first
    (21) funcionStructura -> . last
    (22) funcionStructura -> . length
    (23) funcionStructura -> . remove
    (24) funcionStructura -> . add
    (51) first -> . VARIABLE POINT FIRST PIZQ PDER
    (52) last -> . VARIABLE POINT LAST PIZQ PDER
    (53) length -> . VARIABLE POINT LEN PIZQ PDER
    (56) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (54) add -> . VARIABLE POINT ADD PIZQ valor PDER

    PRINT           shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VOID            shift and go to state 23
    VAR             shift and go to state 25
    INT             shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    STR             shift and go to state 29
    ENTERO          shift and go to state 30

    comparacion                    shift and go to state 7
    algoritmo                      shift and go to state 189
    imprimir                       shift and go to state 4
    asignacion                     shift and go to state 5
    expresion                      shift and go to state 6
    sentenciaIf                    shift and go to state 8
    sentenciaFOR                   shift and go to state 9
    sentenciaWhile                 shift and go to state 10
    input                          shift and go to state 11
    funciones                      shift and go to state 12
    expresionSinRetorno            shift and go to state 13
    tipo                           shift and go to state 17
    valor                          shift and go to state 18
    funcionStructura               shift and go to state 24
    first                          shift and go to state 31
    last                           shift and go to state 32
    length                         shift and go to state 33
    remove                         shift and go to state 34
    add                            shift and go to state 35

state 168

    (90) sentenciaIf -> IF PIZQ opLogicas PDER LIZQ . algoritmo LDER varianteIf
    (4) algoritmo -> . imprimir
    (5) algoritmo -> . asignacion
    (6) algoritmo -> . expresion END
    (7) algoritmo -> . comparacion END
    (8) algoritmo -> . sentenciaIf
    (9) algoritmo -> . sentenciaFOR
    (10) algoritmo -> . sentenciaWhile
    (11) algoritmo -> . input
    (12) algoritmo -> . funciones
    (13) algoritmo -> . expresionSinRetorno
    (47) imprimir -> . PRINT PIZQ opstring PDER END
    (16) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (17) asignacion -> . VARIABLE IGUAL expresiones END
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (67) comparacion -> . expresion operadorComp expresion
    (89) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (90) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (97) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (109) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (110) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (48) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (14) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (15) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (18) expresionSinRetorno -> . funcionStructura END
    (19) expresionSinRetorno -> . funcionStructura
    (81) tipo -> . VAR
    (82) tipo -> . INT
    (83) tipo -> . BOOL
    (84) tipo -> . DOUBLE
    (85) tipo -> . VOID
    (86) tipo -> . STR
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE
    (20) funcionStructura -> . first
    (21) funcionStructura -> . last
    (22) funcionStructura -> . length
    (23) funcionStructura -> . remove
    (24) funcionStructura -> . add
    (51) first -> . VARIABLE POINT FIRST PIZQ PDER
    (52) last -> . VARIABLE POINT LAST PIZQ PDER
    (53) length -> . VARIABLE POINT LEN PIZQ PDER
    (56) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (54) add -> . VARIABLE POINT ADD PIZQ valor PDER

    PRINT           shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VOID            shift and go to state 23
    VAR             shift and go to state 25
    INT             shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    STR             shift and go to state 29
    ENTERO          shift and go to state 30

    algoritmo                      shift and go to state 190
    imprimir                       shift and go to state 4
    asignacion                     shift and go to state 5
    expresion                      shift and go to state 6
    comparacion                    shift and go to state 7
    sentenciaIf                    shift and go to state 8
    sentenciaFOR                   shift and go to state 9
    sentenciaWhile                 shift and go to state 10
    input                          shift and go to state 11
    funciones                      shift and go to state 12
    expresionSinRetorno            shift and go to state 13
    tipo                           shift and go to state 17
    valor                          shift and go to state 18
    funcionStructura               shift and go to state 24
    first                          shift and go to state 31
    last                           shift and go to state 32
    length                         shift and go to state 33
    remove                         shift and go to state 34
    add                            shift and go to state 35

state 169

    (97) sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ . algoritmo LDER
    (4) algoritmo -> . imprimir
    (5) algoritmo -> . asignacion
    (6) algoritmo -> . expresion END
    (7) algoritmo -> . comparacion END
    (8) algoritmo -> . sentenciaIf
    (9) algoritmo -> . sentenciaFOR
    (10) algoritmo -> . sentenciaWhile
    (11) algoritmo -> . input
    (12) algoritmo -> . funciones
    (13) algoritmo -> . expresionSinRetorno
    (47) imprimir -> . PRINT PIZQ opstring PDER END
    (16) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (17) asignacion -> . VARIABLE IGUAL expresiones END
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (67) comparacion -> . expresion operadorComp expresion
    (89) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (90) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (97) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (109) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (110) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (48) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (14) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (15) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (18) expresionSinRetorno -> . funcionStructura END
    (19) expresionSinRetorno -> . funcionStructura
    (81) tipo -> . VAR
    (82) tipo -> . INT
    (83) tipo -> . BOOL
    (84) tipo -> . DOUBLE
    (85) tipo -> . VOID
    (86) tipo -> . STR
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE
    (20) funcionStructura -> . first
    (21) funcionStructura -> . last
    (22) funcionStructura -> . length
    (23) funcionStructura -> . remove
    (24) funcionStructura -> . add
    (51) first -> . VARIABLE POINT FIRST PIZQ PDER
    (52) last -> . VARIABLE POINT LAST PIZQ PDER
    (53) length -> . VARIABLE POINT LEN PIZQ PDER
    (56) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (54) add -> . VARIABLE POINT ADD PIZQ valor PDER

    PRINT           shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VOID            shift and go to state 23
    VAR             shift and go to state 25
    INT             shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    STR             shift and go to state 29
    ENTERO          shift and go to state 30

    algoritmo                      shift and go to state 191
    imprimir                       shift and go to state 4
    asignacion                     shift and go to state 5
    expresion                      shift and go to state 6
    comparacion                    shift and go to state 7
    sentenciaIf                    shift and go to state 8
    sentenciaFOR                   shift and go to state 9
    sentenciaWhile                 shift and go to state 10
    input                          shift and go to state 11
    funciones                      shift and go to state 12
    expresionSinRetorno            shift and go to state 13
    tipo                           shift and go to state 17
    valor                          shift and go to state 18
    funcionStructura               shift and go to state 24
    first                          shift and go to state 31
    last                           shift and go to state 32
    length                         shift and go to state 33
    remove                         shift and go to state 34
    add                            shift and go to state 35

state 170

    (98) parametrosF -> inicializacionFor END comparacion . END VARIABLE increDecre

    END             shift and go to state 192


state 171

    (99) parametrosF -> inicializacionFor END opLogicas . END VARIABLE increDecre

    END             shift and go to state 193


state 172

    (100) parametrosF -> VARIABLE IN VARIABLE .

    PDER            reduce using rule 100 (parametrosF -> VARIABLE IN VARIABLE .)


state 173

    (101) inicializacionFor -> VARIABLE IGUAL ENTERO .

    END             reduce using rule 101 (inicializacionFor -> VARIABLE IGUAL ENTERO .)


state 174

    (102) inicializacionFor -> INT VARIABLE IGUAL . ENTERO

    ENTERO          shift and go to state 194


state 175

    (103) inicializacionFor -> VAR VARIABLE IGUAL . ENTERO

    ENTERO          shift and go to state 195


state 176

    (106) sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ . algoritmo LDER
    (4) algoritmo -> . imprimir
    (5) algoritmo -> . asignacion
    (6) algoritmo -> . expresion END
    (7) algoritmo -> . comparacion END
    (8) algoritmo -> . sentenciaIf
    (9) algoritmo -> . sentenciaFOR
    (10) algoritmo -> . sentenciaWhile
    (11) algoritmo -> . input
    (12) algoritmo -> . funciones
    (13) algoritmo -> . expresionSinRetorno
    (47) imprimir -> . PRINT PIZQ opstring PDER END
    (16) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (17) asignacion -> . VARIABLE IGUAL expresiones END
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (67) comparacion -> . expresion operadorComp expresion
    (89) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (90) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (97) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (109) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (110) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (48) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (14) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (15) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (18) expresionSinRetorno -> . funcionStructura END
    (19) expresionSinRetorno -> . funcionStructura
    (81) tipo -> . VAR
    (82) tipo -> . INT
    (83) tipo -> . BOOL
    (84) tipo -> . DOUBLE
    (85) tipo -> . VOID
    (86) tipo -> . STR
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE
    (20) funcionStructura -> . first
    (21) funcionStructura -> . last
    (22) funcionStructura -> . length
    (23) funcionStructura -> . remove
    (24) funcionStructura -> . add
    (51) first -> . VARIABLE POINT FIRST PIZQ PDER
    (52) last -> . VARIABLE POINT LAST PIZQ PDER
    (53) length -> . VARIABLE POINT LEN PIZQ PDER
    (56) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (54) add -> . VARIABLE POINT ADD PIZQ valor PDER

    PRINT           shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VOID            shift and go to state 23
    VAR             shift and go to state 25
    INT             shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    STR             shift and go to state 29
    ENTERO          shift and go to state 30

    comparacion                    shift and go to state 7
    algoritmo                      shift and go to state 196
    imprimir                       shift and go to state 4
    asignacion                     shift and go to state 5
    expresion                      shift and go to state 6
    sentenciaIf                    shift and go to state 8
    sentenciaFOR                   shift and go to state 9
    sentenciaWhile                 shift and go to state 10
    input                          shift and go to state 11
    funciones                      shift and go to state 12
    expresionSinRetorno            shift and go to state 13
    tipo                           shift and go to state 17
    valor                          shift and go to state 18
    funcionStructura               shift and go to state 24
    first                          shift and go to state 31
    last                           shift and go to state 32
    length                         shift and go to state 33
    remove                         shift and go to state 34
    add                            shift and go to state 35

state 177

    (107) sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ . algoritmo LDER
    (4) algoritmo -> . imprimir
    (5) algoritmo -> . asignacion
    (6) algoritmo -> . expresion END
    (7) algoritmo -> . comparacion END
    (8) algoritmo -> . sentenciaIf
    (9) algoritmo -> . sentenciaFOR
    (10) algoritmo -> . sentenciaWhile
    (11) algoritmo -> . input
    (12) algoritmo -> . funciones
    (13) algoritmo -> . expresionSinRetorno
    (47) imprimir -> . PRINT PIZQ opstring PDER END
    (16) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (17) asignacion -> . VARIABLE IGUAL expresiones END
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (67) comparacion -> . expresion operadorComp expresion
    (89) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (90) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (97) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (109) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (110) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (48) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (14) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (15) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (18) expresionSinRetorno -> . funcionStructura END
    (19) expresionSinRetorno -> . funcionStructura
    (81) tipo -> . VAR
    (82) tipo -> . INT
    (83) tipo -> . BOOL
    (84) tipo -> . DOUBLE
    (85) tipo -> . VOID
    (86) tipo -> . STR
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE
    (20) funcionStructura -> . first
    (21) funcionStructura -> . last
    (22) funcionStructura -> . length
    (23) funcionStructura -> . remove
    (24) funcionStructura -> . add
    (51) first -> . VARIABLE POINT FIRST PIZQ PDER
    (52) last -> . VARIABLE POINT LAST PIZQ PDER
    (53) length -> . VARIABLE POINT LEN PIZQ PDER
    (56) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (54) add -> . VARIABLE POINT ADD PIZQ valor PDER

    PRINT           shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VOID            shift and go to state 23
    VAR             shift and go to state 25
    INT             shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    STR             shift and go to state 29
    ENTERO          shift and go to state 30

    algoritmo                      shift and go to state 197
    imprimir                       shift and go to state 4
    asignacion                     shift and go to state 5
    expresion                      shift and go to state 6
    comparacion                    shift and go to state 7
    sentenciaIf                    shift and go to state 8
    sentenciaFOR                   shift and go to state 9
    sentenciaWhile                 shift and go to state 10
    input                          shift and go to state 11
    funciones                      shift and go to state 12
    expresionSinRetorno            shift and go to state 13
    tipo                           shift and go to state 17
    valor                          shift and go to state 18
    funcionStructura               shift and go to state 24
    first                          shift and go to state 31
    last                           shift and go to state 32
    length                         shift and go to state 33
    remove                         shift and go to state 34
    add                            shift and go to state 35

state 178

    (109) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE . PIZQ comparacion PDER END
    (110) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE . PIZQ opLogicas PDER END

    PIZQ            shift and go to state 198


state 179

    (15) funciones -> VOID VARIABLE PIZQ parametros PDER . LIZQ codigo LDER

    LIZQ            shift and go to state 199


state 180

    (111) indexacion -> VARIABLE CIZQ valor CDER .

    END             reduce using rule 111 (indexacion -> VARIABLE CIZQ valor CDER .)


state 181

    (55) slice -> VARIABLE POINT SLICE PIZQ . valor COMA valor PDER
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE

    ENTERO          shift and go to state 30
    VARIABLE        shift and go to state 64

    valor                          shift and go to state 200

state 182

    (59) elementos -> valor COMA elementos .

    CDER            reduce using rule 59 (elementos -> valor COMA elementos .)
    LDER            reduce using rule 59 (elementos -> valor COMA elementos .)


state 183

    (62) opLogicas -> terminoLogico operadorLog terminoLogico operadorLog . opLogicas
    (60) opLogicas -> . terminoLogico
    (61) opLogicas -> . terminoLogico operadorLog terminoLogico
    (62) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (63) terminoLogico -> . VARIABLE
    (64) terminoLogico -> . BOOLEAN
    (65) terminoLogico -> . PIZQ comparacion PDER

    VARIABLE        shift and go to state 156
    BOOLEAN         shift and go to state 101
    PIZQ            shift and go to state 84

    terminoLogico                  shift and go to state 85
    opLogicas                      shift and go to state 201

state 184

    (56) remove -> VARIABLE POINT REMOVE PIZQ valor PDER .

    END             reduce using rule 56 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    COMENTARIO      reduce using rule 56 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    PRINT           reduce using rule 56 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    VARIABLE        reduce using rule 56 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    IF              reduce using rule 56 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    FOR             reduce using rule 56 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    WHILE           reduce using rule 56 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    DO              reduce using rule 56 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    VOID            reduce using rule 56 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    VAR             reduce using rule 56 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    INT             reduce using rule 56 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    BOOL            reduce using rule 56 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    DOUBLE          reduce using rule 56 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    STR             reduce using rule 56 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    ENTERO          reduce using rule 56 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    $end            reduce using rule 56 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    RETURN          reduce using rule 56 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    LDER            reduce using rule 56 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)


state 185

    (54) add -> VARIABLE POINT ADD PIZQ valor PDER .

    END             reduce using rule 54 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    COMENTARIO      reduce using rule 54 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    PRINT           reduce using rule 54 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    VARIABLE        reduce using rule 54 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    IF              reduce using rule 54 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    FOR             reduce using rule 54 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    WHILE           reduce using rule 54 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    DO              reduce using rule 54 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    VOID            reduce using rule 54 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    VAR             reduce using rule 54 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    INT             reduce using rule 54 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    BOOL            reduce using rule 54 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    DOUBLE          reduce using rule 54 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    STR             reduce using rule 54 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    ENTERO          reduce using rule 54 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    $end            reduce using rule 54 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    RETURN          reduce using rule 54 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    LDER            reduce using rule 54 (add -> VARIABLE POINT ADD PIZQ valor PDER .)


state 186

    (48) input -> tipo VARIABLE IGUAL INPUT PIZQ PDER . END

    END             shift and go to state 202


state 187

    (27) parametros -> tipo VARIABLE COMA . parametros
    (25) parametros -> . empty
    (26) parametros -> . tipo VARIABLE
    (27) parametros -> . tipo VARIABLE COMA parametros
    (112) empty -> .
    (81) tipo -> . VAR
    (82) tipo -> . INT
    (83) tipo -> . BOOL
    (84) tipo -> . DOUBLE
    (85) tipo -> . VOID
    (86) tipo -> . STR

    PDER            reduce using rule 112 (empty -> .)
    VAR             shift and go to state 25
    INT             shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 134
    STR             shift and go to state 29

    tipo                           shift and go to state 131
    parametros                     shift and go to state 203
    empty                          shift and go to state 133

state 188

    (14) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ . codigo RETURN expresion END LDER
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) codigo -> . comnetario
    (4) algoritmo -> . imprimir
    (5) algoritmo -> . asignacion
    (6) algoritmo -> . expresion END
    (7) algoritmo -> . comparacion END
    (8) algoritmo -> . sentenciaIf
    (9) algoritmo -> . sentenciaFOR
    (10) algoritmo -> . sentenciaWhile
    (11) algoritmo -> . input
    (12) algoritmo -> . funciones
    (13) algoritmo -> . expresionSinRetorno
    (108) comnetario -> . COMENTARIO VARIABLE
    (47) imprimir -> . PRINT PIZQ opstring PDER END
    (16) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (17) asignacion -> . VARIABLE IGUAL expresiones END
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (67) comparacion -> . expresion operadorComp expresion
    (89) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (90) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (97) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (109) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (110) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (48) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (14) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (15) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (18) expresionSinRetorno -> . funcionStructura END
    (19) expresionSinRetorno -> . funcionStructura
    (81) tipo -> . VAR
    (82) tipo -> . INT
    (83) tipo -> . BOOL
    (84) tipo -> . DOUBLE
    (85) tipo -> . VOID
    (86) tipo -> . STR
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE
    (20) funcionStructura -> . first
    (21) funcionStructura -> . last
    (22) funcionStructura -> . length
    (23) funcionStructura -> . remove
    (24) funcionStructura -> . add
    (51) first -> . VARIABLE POINT FIRST PIZQ PDER
    (52) last -> . VARIABLE POINT LAST PIZQ PDER
    (53) length -> . VARIABLE POINT LEN PIZQ PDER
    (56) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (54) add -> . VARIABLE POINT ADD PIZQ valor PDER

    COMENTARIO      shift and go to state 14
    PRINT           shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VOID            shift and go to state 23
    VAR             shift and go to state 25
    INT             shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    STR             shift and go to state 29
    ENTERO          shift and go to state 30

    tipo                           shift and go to state 17
    codigo                         shift and go to state 204
    expresion                      shift and go to state 6
    algoritmo                      shift and go to state 2
    comnetario                     shift and go to state 3
    imprimir                       shift and go to state 4
    asignacion                     shift and go to state 5
    comparacion                    shift and go to state 7
    sentenciaIf                    shift and go to state 8
    sentenciaFOR                   shift and go to state 9
    sentenciaWhile                 shift and go to state 10
    input                          shift and go to state 11
    funciones                      shift and go to state 12
    expresionSinRetorno            shift and go to state 13
    valor                          shift and go to state 18
    funcionStructura               shift and go to state 24
    first                          shift and go to state 31
    last                           shift and go to state 32
    length                         shift and go to state 33
    remove                         shift and go to state 34
    add                            shift and go to state 35

state 189

    (89) sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo . LDER varianteIf

    LDER            shift and go to state 205


state 190

    (90) sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo . LDER varianteIf

    LDER            shift and go to state 206


state 191

    (97) sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo . LDER

    LDER            shift and go to state 207


state 192

    (98) parametrosF -> inicializacionFor END comparacion END . VARIABLE increDecre

    VARIABLE        shift and go to state 208


state 193

    (99) parametrosF -> inicializacionFor END opLogicas END . VARIABLE increDecre

    VARIABLE        shift and go to state 209


state 194

    (102) inicializacionFor -> INT VARIABLE IGUAL ENTERO .

    END             reduce using rule 102 (inicializacionFor -> INT VARIABLE IGUAL ENTERO .)


state 195

    (103) inicializacionFor -> VAR VARIABLE IGUAL ENTERO .

    END             reduce using rule 103 (inicializacionFor -> VAR VARIABLE IGUAL ENTERO .)


state 196

    (106) sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo . LDER

    LDER            shift and go to state 210


state 197

    (107) sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo . LDER

    LDER            shift and go to state 211


state 198

    (109) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ . comparacion PDER END
    (110) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ . opLogicas PDER END
    (67) comparacion -> . expresion operadorComp expresion
    (60) opLogicas -> . terminoLogico
    (61) opLogicas -> . terminoLogico operadorLog terminoLogico
    (62) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (63) terminoLogico -> . VARIABLE
    (64) terminoLogico -> . BOOLEAN
    (65) terminoLogico -> . PIZQ comparacion PDER
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE

    VARIABLE        shift and go to state 100
    BOOLEAN         shift and go to state 101
    PIZQ            shift and go to state 84
    ENTERO          shift and go to state 30

    comparacion                    shift and go to state 212
    opLogicas                      shift and go to state 213
    expresion                      shift and go to state 99
    terminoLogico                  shift and go to state 85
    valor                          shift and go to state 18

state 199

    (15) funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ . codigo LDER
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) codigo -> . comnetario
    (4) algoritmo -> . imprimir
    (5) algoritmo -> . asignacion
    (6) algoritmo -> . expresion END
    (7) algoritmo -> . comparacion END
    (8) algoritmo -> . sentenciaIf
    (9) algoritmo -> . sentenciaFOR
    (10) algoritmo -> . sentenciaWhile
    (11) algoritmo -> . input
    (12) algoritmo -> . funciones
    (13) algoritmo -> . expresionSinRetorno
    (108) comnetario -> . COMENTARIO VARIABLE
    (47) imprimir -> . PRINT PIZQ opstring PDER END
    (16) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (17) asignacion -> . VARIABLE IGUAL expresiones END
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (67) comparacion -> . expresion operadorComp expresion
    (89) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (90) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (97) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (109) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (110) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (48) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (14) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (15) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (18) expresionSinRetorno -> . funcionStructura END
    (19) expresionSinRetorno -> . funcionStructura
    (81) tipo -> . VAR
    (82) tipo -> . INT
    (83) tipo -> . BOOL
    (84) tipo -> . DOUBLE
    (85) tipo -> . VOID
    (86) tipo -> . STR
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE
    (20) funcionStructura -> . first
    (21) funcionStructura -> . last
    (22) funcionStructura -> . length
    (23) funcionStructura -> . remove
    (24) funcionStructura -> . add
    (51) first -> . VARIABLE POINT FIRST PIZQ PDER
    (52) last -> . VARIABLE POINT LAST PIZQ PDER
    (53) length -> . VARIABLE POINT LEN PIZQ PDER
    (56) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (54) add -> . VARIABLE POINT ADD PIZQ valor PDER

    COMENTARIO      shift and go to state 14
    PRINT           shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VOID            shift and go to state 23
    VAR             shift and go to state 25
    INT             shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    STR             shift and go to state 29
    ENTERO          shift and go to state 30

    codigo                         shift and go to state 214
    algoritmo                      shift and go to state 2
    comnetario                     shift and go to state 3
    imprimir                       shift and go to state 4
    asignacion                     shift and go to state 5
    expresion                      shift and go to state 6
    comparacion                    shift and go to state 7
    sentenciaIf                    shift and go to state 8
    sentenciaFOR                   shift and go to state 9
    sentenciaWhile                 shift and go to state 10
    input                          shift and go to state 11
    funciones                      shift and go to state 12
    expresionSinRetorno            shift and go to state 13
    tipo                           shift and go to state 17
    valor                          shift and go to state 18
    funcionStructura               shift and go to state 24
    first                          shift and go to state 31
    last                           shift and go to state 32
    length                         shift and go to state 33
    remove                         shift and go to state 34
    add                            shift and go to state 35

state 200

    (55) slice -> VARIABLE POINT SLICE PIZQ valor . COMA valor PDER

    COMA            shift and go to state 215


state 201

    (62) opLogicas -> terminoLogico operadorLog terminoLogico operadorLog opLogicas .

    END             reduce using rule 62 (opLogicas -> terminoLogico operadorLog terminoLogico operadorLog opLogicas .)
    PDER            reduce using rule 62 (opLogicas -> terminoLogico operadorLog terminoLogico operadorLog opLogicas .)


state 202

    (48) input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .

    COMENTARIO      reduce using rule 48 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    PRINT           reduce using rule 48 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    VARIABLE        reduce using rule 48 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    IF              reduce using rule 48 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    FOR             reduce using rule 48 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    WHILE           reduce using rule 48 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    DO              reduce using rule 48 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    VOID            reduce using rule 48 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    VAR             reduce using rule 48 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    INT             reduce using rule 48 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    BOOL            reduce using rule 48 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    DOUBLE          reduce using rule 48 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    STR             reduce using rule 48 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    ENTERO          reduce using rule 48 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    $end            reduce using rule 48 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    RETURN          reduce using rule 48 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    LDER            reduce using rule 48 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)


state 203

    (27) parametros -> tipo VARIABLE COMA parametros .

    PDER            reduce using rule 27 (parametros -> tipo VARIABLE COMA parametros .)


state 204

    (14) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo . RETURN expresion END LDER

    RETURN          shift and go to state 216


state 205

    (89) sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER . varianteIf
    (91) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
    (92) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER
    (93) varianteIf -> . ELSE LIZQ algoritmo LDER
    (94) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (95) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (96) varianteIf -> . empty
    (112) empty -> .

    ELSEIF          shift and go to state 218
    ELSE            shift and go to state 219
    COMENTARIO      reduce using rule 112 (empty -> .)
    PRINT           reduce using rule 112 (empty -> .)
    VARIABLE        reduce using rule 112 (empty -> .)
    IF              reduce using rule 112 (empty -> .)
    FOR             reduce using rule 112 (empty -> .)
    WHILE           reduce using rule 112 (empty -> .)
    DO              reduce using rule 112 (empty -> .)
    VOID            reduce using rule 112 (empty -> .)
    VAR             reduce using rule 112 (empty -> .)
    INT             reduce using rule 112 (empty -> .)
    BOOL            reduce using rule 112 (empty -> .)
    DOUBLE          reduce using rule 112 (empty -> .)
    STR             reduce using rule 112 (empty -> .)
    ENTERO          reduce using rule 112 (empty -> .)
    $end            reduce using rule 112 (empty -> .)
    RETURN          reduce using rule 112 (empty -> .)
    LDER            reduce using rule 112 (empty -> .)

    varianteIf                     shift and go to state 217
    empty                          shift and go to state 220

state 206

    (90) sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER . varianteIf
    (91) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
    (92) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER
    (93) varianteIf -> . ELSE LIZQ algoritmo LDER
    (94) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (95) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (96) varianteIf -> . empty
    (112) empty -> .

    ELSEIF          shift and go to state 218
    ELSE            shift and go to state 219
    COMENTARIO      reduce using rule 112 (empty -> .)
    PRINT           reduce using rule 112 (empty -> .)
    VARIABLE        reduce using rule 112 (empty -> .)
    IF              reduce using rule 112 (empty -> .)
    FOR             reduce using rule 112 (empty -> .)
    WHILE           reduce using rule 112 (empty -> .)
    DO              reduce using rule 112 (empty -> .)
    VOID            reduce using rule 112 (empty -> .)
    VAR             reduce using rule 112 (empty -> .)
    INT             reduce using rule 112 (empty -> .)
    BOOL            reduce using rule 112 (empty -> .)
    DOUBLE          reduce using rule 112 (empty -> .)
    STR             reduce using rule 112 (empty -> .)
    ENTERO          reduce using rule 112 (empty -> .)
    $end            reduce using rule 112 (empty -> .)
    RETURN          reduce using rule 112 (empty -> .)
    LDER            reduce using rule 112 (empty -> .)

    varianteIf                     shift and go to state 221
    empty                          shift and go to state 220

state 207

    (97) sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .

    COMENTARIO      reduce using rule 97 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    PRINT           reduce using rule 97 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    VARIABLE        reduce using rule 97 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    IF              reduce using rule 97 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    FOR             reduce using rule 97 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    WHILE           reduce using rule 97 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    DO              reduce using rule 97 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    VOID            reduce using rule 97 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    VAR             reduce using rule 97 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    INT             reduce using rule 97 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    BOOL            reduce using rule 97 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    DOUBLE          reduce using rule 97 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    STR             reduce using rule 97 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    ENTERO          reduce using rule 97 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    $end            reduce using rule 97 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    RETURN          reduce using rule 97 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    LDER            reduce using rule 97 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)


state 208

    (98) parametrosF -> inicializacionFor END comparacion END VARIABLE . increDecre
    (104) increDecre -> . INCREMENTO
    (105) increDecre -> . DECREMENTO

    INCREMENTO      shift and go to state 223
    DECREMENTO      shift and go to state 224

    increDecre                     shift and go to state 222

state 209

    (99) parametrosF -> inicializacionFor END opLogicas END VARIABLE . increDecre
    (104) increDecre -> . INCREMENTO
    (105) increDecre -> . DECREMENTO

    INCREMENTO      shift and go to state 223
    DECREMENTO      shift and go to state 224

    increDecre                     shift and go to state 225

state 210

    (106) sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .

    COMENTARIO      reduce using rule 106 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    PRINT           reduce using rule 106 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VARIABLE        reduce using rule 106 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    IF              reduce using rule 106 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    FOR             reduce using rule 106 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    WHILE           reduce using rule 106 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    DO              reduce using rule 106 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VOID            reduce using rule 106 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VAR             reduce using rule 106 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    INT             reduce using rule 106 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    BOOL            reduce using rule 106 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    DOUBLE          reduce using rule 106 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    STR             reduce using rule 106 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    ENTERO          reduce using rule 106 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    $end            reduce using rule 106 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    RETURN          reduce using rule 106 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    LDER            reduce using rule 106 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)


state 211

    (107) sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .

    COMENTARIO      reduce using rule 107 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    PRINT           reduce using rule 107 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    VARIABLE        reduce using rule 107 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    IF              reduce using rule 107 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    FOR             reduce using rule 107 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    WHILE           reduce using rule 107 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    DO              reduce using rule 107 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    VOID            reduce using rule 107 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    VAR             reduce using rule 107 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    INT             reduce using rule 107 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    BOOL            reduce using rule 107 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    DOUBLE          reduce using rule 107 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    STR             reduce using rule 107 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    ENTERO          reduce using rule 107 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    $end            reduce using rule 107 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    RETURN          reduce using rule 107 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    LDER            reduce using rule 107 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)


state 212

    (109) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion . PDER END

    PDER            shift and go to state 226


state 213

    (110) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas . PDER END

    PDER            shift and go to state 227


state 214

    (15) funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo . LDER

    LDER            shift and go to state 228


state 215

    (55) slice -> VARIABLE POINT SLICE PIZQ valor COMA . valor PDER
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE

    ENTERO          shift and go to state 30
    VARIABLE        shift and go to state 64

    valor                          shift and go to state 229

state 216

    (14) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN . expresion END LDER
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE

    ENTERO          shift and go to state 30
    VARIABLE        shift and go to state 64

    expresion                      shift and go to state 230
    valor                          shift and go to state 18

state 217

    (89) sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .

    COMENTARIO      reduce using rule 89 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    PRINT           reduce using rule 89 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VARIABLE        reduce using rule 89 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    IF              reduce using rule 89 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    FOR             reduce using rule 89 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    WHILE           reduce using rule 89 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    DO              reduce using rule 89 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VOID            reduce using rule 89 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VAR             reduce using rule 89 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    INT             reduce using rule 89 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    BOOL            reduce using rule 89 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    DOUBLE          reduce using rule 89 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    STR             reduce using rule 89 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    ENTERO          reduce using rule 89 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    $end            reduce using rule 89 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    RETURN          reduce using rule 89 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    LDER            reduce using rule 89 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)


state 218

    (91) varianteIf -> ELSEIF . PIZQ comparacion PDER LIZQ algoritmo LDER
    (92) varianteIf -> ELSEIF . PIZQ opLogicas PDER LIZQ algoritmo LDER
    (94) varianteIf -> ELSEIF . PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (95) varianteIf -> ELSEIF . PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf

    PIZQ            shift and go to state 231


state 219

    (93) varianteIf -> ELSE . LIZQ algoritmo LDER

    LIZQ            shift and go to state 232


state 220

    (96) varianteIf -> empty .

    COMENTARIO      reduce using rule 96 (varianteIf -> empty .)
    PRINT           reduce using rule 96 (varianteIf -> empty .)
    VARIABLE        reduce using rule 96 (varianteIf -> empty .)
    IF              reduce using rule 96 (varianteIf -> empty .)
    FOR             reduce using rule 96 (varianteIf -> empty .)
    WHILE           reduce using rule 96 (varianteIf -> empty .)
    DO              reduce using rule 96 (varianteIf -> empty .)
    VOID            reduce using rule 96 (varianteIf -> empty .)
    VAR             reduce using rule 96 (varianteIf -> empty .)
    INT             reduce using rule 96 (varianteIf -> empty .)
    BOOL            reduce using rule 96 (varianteIf -> empty .)
    DOUBLE          reduce using rule 96 (varianteIf -> empty .)
    STR             reduce using rule 96 (varianteIf -> empty .)
    ENTERO          reduce using rule 96 (varianteIf -> empty .)
    $end            reduce using rule 96 (varianteIf -> empty .)
    RETURN          reduce using rule 96 (varianteIf -> empty .)
    LDER            reduce using rule 96 (varianteIf -> empty .)


state 221

    (90) sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .

    COMENTARIO      reduce using rule 90 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    PRINT           reduce using rule 90 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    VARIABLE        reduce using rule 90 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    IF              reduce using rule 90 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    FOR             reduce using rule 90 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    WHILE           reduce using rule 90 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    DO              reduce using rule 90 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    VOID            reduce using rule 90 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    VAR             reduce using rule 90 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    INT             reduce using rule 90 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    BOOL            reduce using rule 90 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    DOUBLE          reduce using rule 90 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    STR             reduce using rule 90 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    ENTERO          reduce using rule 90 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    $end            reduce using rule 90 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    RETURN          reduce using rule 90 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    LDER            reduce using rule 90 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)


state 222

    (98) parametrosF -> inicializacionFor END comparacion END VARIABLE increDecre .

    PDER            reduce using rule 98 (parametrosF -> inicializacionFor END comparacion END VARIABLE increDecre .)


state 223

    (104) increDecre -> INCREMENTO .

    PDER            reduce using rule 104 (increDecre -> INCREMENTO .)


state 224

    (105) increDecre -> DECREMENTO .

    PDER            reduce using rule 105 (increDecre -> DECREMENTO .)


state 225

    (99) parametrosF -> inicializacionFor END opLogicas END VARIABLE increDecre .

    PDER            reduce using rule 99 (parametrosF -> inicializacionFor END opLogicas END VARIABLE increDecre .)


state 226

    (109) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER . END

    END             shift and go to state 233


state 227

    (110) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER . END

    END             shift and go to state 234


state 228

    (15) funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .

    COMENTARIO      reduce using rule 15 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    PRINT           reduce using rule 15 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    VARIABLE        reduce using rule 15 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    IF              reduce using rule 15 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    FOR             reduce using rule 15 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    WHILE           reduce using rule 15 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    DO              reduce using rule 15 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    VOID            reduce using rule 15 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    VAR             reduce using rule 15 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    INT             reduce using rule 15 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    BOOL            reduce using rule 15 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    DOUBLE          reduce using rule 15 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    STR             reduce using rule 15 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    ENTERO          reduce using rule 15 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    $end            reduce using rule 15 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    RETURN          reduce using rule 15 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    LDER            reduce using rule 15 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)


state 229

    (55) slice -> VARIABLE POINT SLICE PIZQ valor COMA valor . PDER

    PDER            shift and go to state 235


state 230

    (14) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion . END LDER

    END             shift and go to state 236


state 231

    (91) varianteIf -> ELSEIF PIZQ . comparacion PDER LIZQ algoritmo LDER
    (92) varianteIf -> ELSEIF PIZQ . opLogicas PDER LIZQ algoritmo LDER
    (94) varianteIf -> ELSEIF PIZQ . comparacion PDER LIZQ algoritmo LDER varianteIf
    (95) varianteIf -> ELSEIF PIZQ . opLogicas PDER LIZQ algoritmo LDER varianteIf
    (67) comparacion -> . expresion operadorComp expresion
    (60) opLogicas -> . terminoLogico
    (61) opLogicas -> . terminoLogico operadorLog terminoLogico
    (62) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (63) terminoLogico -> . VARIABLE
    (64) terminoLogico -> . BOOLEAN
    (65) terminoLogico -> . PIZQ comparacion PDER
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE

    VARIABLE        shift and go to state 100
    BOOLEAN         shift and go to state 101
    PIZQ            shift and go to state 84
    ENTERO          shift and go to state 30

    comparacion                    shift and go to state 237
    opLogicas                      shift and go to state 238
    expresion                      shift and go to state 99
    terminoLogico                  shift and go to state 85
    valor                          shift and go to state 18

state 232

    (93) varianteIf -> ELSE LIZQ . algoritmo LDER
    (4) algoritmo -> . imprimir
    (5) algoritmo -> . asignacion
    (6) algoritmo -> . expresion END
    (7) algoritmo -> . comparacion END
    (8) algoritmo -> . sentenciaIf
    (9) algoritmo -> . sentenciaFOR
    (10) algoritmo -> . sentenciaWhile
    (11) algoritmo -> . input
    (12) algoritmo -> . funciones
    (13) algoritmo -> . expresionSinRetorno
    (47) imprimir -> . PRINT PIZQ opstring PDER END
    (16) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (17) asignacion -> . VARIABLE IGUAL expresiones END
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (67) comparacion -> . expresion operadorComp expresion
    (89) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (90) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (97) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (109) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (110) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (48) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (14) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (15) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (18) expresionSinRetorno -> . funcionStructura END
    (19) expresionSinRetorno -> . funcionStructura
    (81) tipo -> . VAR
    (82) tipo -> . INT
    (83) tipo -> . BOOL
    (84) tipo -> . DOUBLE
    (85) tipo -> . VOID
    (86) tipo -> . STR
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE
    (20) funcionStructura -> . first
    (21) funcionStructura -> . last
    (22) funcionStructura -> . length
    (23) funcionStructura -> . remove
    (24) funcionStructura -> . add
    (51) first -> . VARIABLE POINT FIRST PIZQ PDER
    (52) last -> . VARIABLE POINT LAST PIZQ PDER
    (53) length -> . VARIABLE POINT LEN PIZQ PDER
    (56) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (54) add -> . VARIABLE POINT ADD PIZQ valor PDER

    PRINT           shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VOID            shift and go to state 23
    VAR             shift and go to state 25
    INT             shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    STR             shift and go to state 29
    ENTERO          shift and go to state 30

    algoritmo                      shift and go to state 239
    imprimir                       shift and go to state 4
    asignacion                     shift and go to state 5
    expresion                      shift and go to state 6
    comparacion                    shift and go to state 7
    sentenciaIf                    shift and go to state 8
    sentenciaFOR                   shift and go to state 9
    sentenciaWhile                 shift and go to state 10
    input                          shift and go to state 11
    funciones                      shift and go to state 12
    expresionSinRetorno            shift and go to state 13
    tipo                           shift and go to state 17
    valor                          shift and go to state 18
    funcionStructura               shift and go to state 24
    first                          shift and go to state 31
    last                           shift and go to state 32
    length                         shift and go to state 33
    remove                         shift and go to state 34
    add                            shift and go to state 35

state 233

    (109) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .

    COMENTARIO      reduce using rule 109 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    PRINT           reduce using rule 109 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    VARIABLE        reduce using rule 109 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    IF              reduce using rule 109 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    FOR             reduce using rule 109 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    WHILE           reduce using rule 109 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    DO              reduce using rule 109 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    VOID            reduce using rule 109 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    VAR             reduce using rule 109 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    INT             reduce using rule 109 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    BOOL            reduce using rule 109 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    DOUBLE          reduce using rule 109 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    STR             reduce using rule 109 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    ENTERO          reduce using rule 109 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    $end            reduce using rule 109 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    RETURN          reduce using rule 109 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    LDER            reduce using rule 109 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)


state 234

    (110) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .

    COMENTARIO      reduce using rule 110 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    PRINT           reduce using rule 110 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    VARIABLE        reduce using rule 110 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    IF              reduce using rule 110 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    FOR             reduce using rule 110 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    WHILE           reduce using rule 110 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    DO              reduce using rule 110 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    VOID            reduce using rule 110 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    VAR             reduce using rule 110 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    INT             reduce using rule 110 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    BOOL            reduce using rule 110 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    DOUBLE          reduce using rule 110 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    STR             reduce using rule 110 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    ENTERO          reduce using rule 110 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    $end            reduce using rule 110 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    RETURN          reduce using rule 110 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    LDER            reduce using rule 110 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)


state 235

    (55) slice -> VARIABLE POINT SLICE PIZQ valor COMA valor PDER .

    END             reduce using rule 55 (slice -> VARIABLE POINT SLICE PIZQ valor COMA valor PDER .)


state 236

    (14) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END . LDER

    LDER            shift and go to state 240


state 237

    (91) varianteIf -> ELSEIF PIZQ comparacion . PDER LIZQ algoritmo LDER
    (94) varianteIf -> ELSEIF PIZQ comparacion . PDER LIZQ algoritmo LDER varianteIf

    PDER            shift and go to state 241


state 238

    (92) varianteIf -> ELSEIF PIZQ opLogicas . PDER LIZQ algoritmo LDER
    (95) varianteIf -> ELSEIF PIZQ opLogicas . PDER LIZQ algoritmo LDER varianteIf

    PDER            shift and go to state 242


state 239

    (93) varianteIf -> ELSE LIZQ algoritmo . LDER

    LDER            shift and go to state 243


state 240

    (14) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .

    COMENTARIO      reduce using rule 14 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    PRINT           reduce using rule 14 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    VARIABLE        reduce using rule 14 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    IF              reduce using rule 14 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    FOR             reduce using rule 14 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    WHILE           reduce using rule 14 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    DO              reduce using rule 14 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    VOID            reduce using rule 14 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    VAR             reduce using rule 14 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    INT             reduce using rule 14 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    BOOL            reduce using rule 14 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    DOUBLE          reduce using rule 14 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    STR             reduce using rule 14 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    ENTERO          reduce using rule 14 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    $end            reduce using rule 14 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    RETURN          reduce using rule 14 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    LDER            reduce using rule 14 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)


state 241

    (91) varianteIf -> ELSEIF PIZQ comparacion PDER . LIZQ algoritmo LDER
    (94) varianteIf -> ELSEIF PIZQ comparacion PDER . LIZQ algoritmo LDER varianteIf

    LIZQ            shift and go to state 244


state 242

    (92) varianteIf -> ELSEIF PIZQ opLogicas PDER . LIZQ algoritmo LDER
    (95) varianteIf -> ELSEIF PIZQ opLogicas PDER . LIZQ algoritmo LDER varianteIf

    LIZQ            shift and go to state 245


state 243

    (93) varianteIf -> ELSE LIZQ algoritmo LDER .

    COMENTARIO      reduce using rule 93 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    PRINT           reduce using rule 93 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    VARIABLE        reduce using rule 93 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    IF              reduce using rule 93 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    FOR             reduce using rule 93 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    WHILE           reduce using rule 93 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    DO              reduce using rule 93 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    VOID            reduce using rule 93 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    VAR             reduce using rule 93 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    INT             reduce using rule 93 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    BOOL            reduce using rule 93 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    DOUBLE          reduce using rule 93 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    STR             reduce using rule 93 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    ENTERO          reduce using rule 93 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    $end            reduce using rule 93 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    RETURN          reduce using rule 93 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    LDER            reduce using rule 93 (varianteIf -> ELSE LIZQ algoritmo LDER .)


state 244

    (91) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ . algoritmo LDER
    (94) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ . algoritmo LDER varianteIf
    (4) algoritmo -> . imprimir
    (5) algoritmo -> . asignacion
    (6) algoritmo -> . expresion END
    (7) algoritmo -> . comparacion END
    (8) algoritmo -> . sentenciaIf
    (9) algoritmo -> . sentenciaFOR
    (10) algoritmo -> . sentenciaWhile
    (11) algoritmo -> . input
    (12) algoritmo -> . funciones
    (13) algoritmo -> . expresionSinRetorno
    (47) imprimir -> . PRINT PIZQ opstring PDER END
    (16) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (17) asignacion -> . VARIABLE IGUAL expresiones END
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (67) comparacion -> . expresion operadorComp expresion
    (89) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (90) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (97) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (109) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (110) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (48) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (14) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (15) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (18) expresionSinRetorno -> . funcionStructura END
    (19) expresionSinRetorno -> . funcionStructura
    (81) tipo -> . VAR
    (82) tipo -> . INT
    (83) tipo -> . BOOL
    (84) tipo -> . DOUBLE
    (85) tipo -> . VOID
    (86) tipo -> . STR
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE
    (20) funcionStructura -> . first
    (21) funcionStructura -> . last
    (22) funcionStructura -> . length
    (23) funcionStructura -> . remove
    (24) funcionStructura -> . add
    (51) first -> . VARIABLE POINT FIRST PIZQ PDER
    (52) last -> . VARIABLE POINT LAST PIZQ PDER
    (53) length -> . VARIABLE POINT LEN PIZQ PDER
    (56) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (54) add -> . VARIABLE POINT ADD PIZQ valor PDER

    PRINT           shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VOID            shift and go to state 23
    VAR             shift and go to state 25
    INT             shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    STR             shift and go to state 29
    ENTERO          shift and go to state 30

    comparacion                    shift and go to state 7
    algoritmo                      shift and go to state 246
    imprimir                       shift and go to state 4
    asignacion                     shift and go to state 5
    expresion                      shift and go to state 6
    sentenciaIf                    shift and go to state 8
    sentenciaFOR                   shift and go to state 9
    sentenciaWhile                 shift and go to state 10
    input                          shift and go to state 11
    funciones                      shift and go to state 12
    expresionSinRetorno            shift and go to state 13
    tipo                           shift and go to state 17
    valor                          shift and go to state 18
    funcionStructura               shift and go to state 24
    first                          shift and go to state 31
    last                           shift and go to state 32
    length                         shift and go to state 33
    remove                         shift and go to state 34
    add                            shift and go to state 35

state 245

    (92) varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ . algoritmo LDER
    (95) varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ . algoritmo LDER varianteIf
    (4) algoritmo -> . imprimir
    (5) algoritmo -> . asignacion
    (6) algoritmo -> . expresion END
    (7) algoritmo -> . comparacion END
    (8) algoritmo -> . sentenciaIf
    (9) algoritmo -> . sentenciaFOR
    (10) algoritmo -> . sentenciaWhile
    (11) algoritmo -> . input
    (12) algoritmo -> . funciones
    (13) algoritmo -> . expresionSinRetorno
    (47) imprimir -> . PRINT PIZQ opstring PDER END
    (16) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (17) asignacion -> . VARIABLE IGUAL expresiones END
    (49) expresion -> . valor
    (66) expresion -> . valor operadorMat expresion
    (67) comparacion -> . expresion operadorComp expresion
    (89) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (90) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (97) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (109) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (110) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (48) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (14) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (15) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (18) expresionSinRetorno -> . funcionStructura END
    (19) expresionSinRetorno -> . funcionStructura
    (81) tipo -> . VAR
    (82) tipo -> . INT
    (83) tipo -> . BOOL
    (84) tipo -> . DOUBLE
    (85) tipo -> . VOID
    (86) tipo -> . STR
    (87) valor -> . ENTERO
    (88) valor -> . VARIABLE
    (20) funcionStructura -> . first
    (21) funcionStructura -> . last
    (22) funcionStructura -> . length
    (23) funcionStructura -> . remove
    (24) funcionStructura -> . add
    (51) first -> . VARIABLE POINT FIRST PIZQ PDER
    (52) last -> . VARIABLE POINT LAST PIZQ PDER
    (53) length -> . VARIABLE POINT LEN PIZQ PDER
    (56) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (54) add -> . VARIABLE POINT ADD PIZQ valor PDER

    PRINT           shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VOID            shift and go to state 23
    VAR             shift and go to state 25
    INT             shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    STR             shift and go to state 29
    ENTERO          shift and go to state 30

    algoritmo                      shift and go to state 247
    imprimir                       shift and go to state 4
    asignacion                     shift and go to state 5
    expresion                      shift and go to state 6
    comparacion                    shift and go to state 7
    sentenciaIf                    shift and go to state 8
    sentenciaFOR                   shift and go to state 9
    sentenciaWhile                 shift and go to state 10
    input                          shift and go to state 11
    funciones                      shift and go to state 12
    expresionSinRetorno            shift and go to state 13
    tipo                           shift and go to state 17
    valor                          shift and go to state 18
    funcionStructura               shift and go to state 24
    first                          shift and go to state 31
    last                           shift and go to state 32
    length                         shift and go to state 33
    remove                         shift and go to state 34
    add                            shift and go to state 35

state 246

    (91) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo . LDER
    (94) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo . LDER varianteIf

    LDER            shift and go to state 248


state 247

    (92) varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo . LDER
    (95) varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo . LDER varianteIf

    LDER            shift and go to state 249


state 248

    (91) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .
    (94) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER . varianteIf
    (91) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
    (92) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER
    (93) varianteIf -> . ELSE LIZQ algoritmo LDER
    (94) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (95) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (96) varianteIf -> . empty
    (112) empty -> .

  ! reduce/reduce conflict for COMENTARIO resolved using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for PRINT resolved using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for IF resolved using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for FOR resolved using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for WHILE resolved using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for DO resolved using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for VOID resolved using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for VAR resolved using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for INT resolved using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for BOOL resolved using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for STR resolved using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for ENTERO resolved using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for $end resolved using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for RETURN resolved using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for LDER resolved using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    COMENTARIO      reduce using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    PRINT           reduce using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VARIABLE        reduce using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    IF              reduce using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    FOR             reduce using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    WHILE           reduce using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    DO              reduce using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VOID            reduce using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VAR             reduce using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    INT             reduce using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    BOOL            reduce using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    DOUBLE          reduce using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    STR             reduce using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    ENTERO          reduce using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    $end            reduce using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    RETURN          reduce using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    LDER            reduce using rule 91 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    ELSEIF          shift and go to state 218
    ELSE            shift and go to state 219

  ! COMENTARIO      [ reduce using rule 112 (empty -> .) ]
  ! PRINT           [ reduce using rule 112 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 112 (empty -> .) ]
  ! IF              [ reduce using rule 112 (empty -> .) ]
  ! FOR             [ reduce using rule 112 (empty -> .) ]
  ! WHILE           [ reduce using rule 112 (empty -> .) ]
  ! DO              [ reduce using rule 112 (empty -> .) ]
  ! VOID            [ reduce using rule 112 (empty -> .) ]
  ! VAR             [ reduce using rule 112 (empty -> .) ]
  ! INT             [ reduce using rule 112 (empty -> .) ]
  ! BOOL            [ reduce using rule 112 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 112 (empty -> .) ]
  ! STR             [ reduce using rule 112 (empty -> .) ]
  ! ENTERO          [ reduce using rule 112 (empty -> .) ]
  ! $end            [ reduce using rule 112 (empty -> .) ]
  ! RETURN          [ reduce using rule 112 (empty -> .) ]
  ! LDER            [ reduce using rule 112 (empty -> .) ]

    varianteIf                     shift and go to state 250
    empty                          shift and go to state 220

state 249

    (92) varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .
    (95) varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER . varianteIf
    (91) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
    (92) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER
    (93) varianteIf -> . ELSE LIZQ algoritmo LDER
    (94) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (95) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (96) varianteIf -> . empty
    (112) empty -> .

  ! reduce/reduce conflict for COMENTARIO resolved using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for PRINT resolved using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for IF resolved using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for FOR resolved using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for WHILE resolved using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for DO resolved using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for VOID resolved using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for VAR resolved using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for INT resolved using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for BOOL resolved using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for STR resolved using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for ENTERO resolved using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for $end resolved using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for RETURN resolved using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for LDER resolved using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    COMENTARIO      reduce using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    PRINT           reduce using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    VARIABLE        reduce using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    IF              reduce using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    FOR             reduce using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    WHILE           reduce using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    DO              reduce using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    VOID            reduce using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    VAR             reduce using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    INT             reduce using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    BOOL            reduce using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    DOUBLE          reduce using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    STR             reduce using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    ENTERO          reduce using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    $end            reduce using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    RETURN          reduce using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    LDER            reduce using rule 92 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    ELSEIF          shift and go to state 218
    ELSE            shift and go to state 219

  ! COMENTARIO      [ reduce using rule 112 (empty -> .) ]
  ! PRINT           [ reduce using rule 112 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 112 (empty -> .) ]
  ! IF              [ reduce using rule 112 (empty -> .) ]
  ! FOR             [ reduce using rule 112 (empty -> .) ]
  ! WHILE           [ reduce using rule 112 (empty -> .) ]
  ! DO              [ reduce using rule 112 (empty -> .) ]
  ! VOID            [ reduce using rule 112 (empty -> .) ]
  ! VAR             [ reduce using rule 112 (empty -> .) ]
  ! INT             [ reduce using rule 112 (empty -> .) ]
  ! BOOL            [ reduce using rule 112 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 112 (empty -> .) ]
  ! STR             [ reduce using rule 112 (empty -> .) ]
  ! ENTERO          [ reduce using rule 112 (empty -> .) ]
  ! $end            [ reduce using rule 112 (empty -> .) ]
  ! RETURN          [ reduce using rule 112 (empty -> .) ]
  ! LDER            [ reduce using rule 112 (empty -> .) ]

    varianteIf                     shift and go to state 251
    empty                          shift and go to state 220

state 250

    (94) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .

    COMENTARIO      reduce using rule 94 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    PRINT           reduce using rule 94 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VARIABLE        reduce using rule 94 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    IF              reduce using rule 94 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    FOR             reduce using rule 94 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    WHILE           reduce using rule 94 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    DO              reduce using rule 94 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VOID            reduce using rule 94 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VAR             reduce using rule 94 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    INT             reduce using rule 94 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    BOOL            reduce using rule 94 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    DOUBLE          reduce using rule 94 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    STR             reduce using rule 94 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    ENTERO          reduce using rule 94 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    $end            reduce using rule 94 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    RETURN          reduce using rule 94 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    LDER            reduce using rule 94 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)


state 251

    (95) varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .

    COMENTARIO      reduce using rule 95 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    PRINT           reduce using rule 95 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    VARIABLE        reduce using rule 95 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    IF              reduce using rule 95 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    FOR             reduce using rule 95 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    WHILE           reduce using rule 95 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    DO              reduce using rule 95 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    VOID            reduce using rule 95 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    VAR             reduce using rule 95 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    INT             reduce using rule 95 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    BOOL            reduce using rule 95 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    DOUBLE          reduce using rule 95 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    STR             reduce using rule 95 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    ENTERO          reduce using rule 95 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    $end            reduce using rule 95 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    RETURN          reduce using rule 95 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    LDER            reduce using rule 95 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARIABLE in state 23 resolved as shift
WARNING: shift/reduce conflict for MAS in state 65 resolved as shift
WARNING: reduce/reduce conflict in state 65 resolved using rule (opstring -> VARIABLE)
WARNING: rejected rule (valor -> VARIABLE) in state 65
WARNING: reduce/reduce conflict in state 65 resolved using rule (opstring -> VARIABLE)
WARNING: rejected rule (terminoLogico -> VARIABLE) in state 65
WARNING: reduce/reduce conflict in state 69 resolved using rule (expresiones -> BOOLEAN)
WARNING: rejected rule (terminoLogico -> BOOLEAN) in state 69
WARNING: reduce/reduce conflict in state 248 resolved using rule (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER)
WARNING: rejected rule (empty -> <empty>) in state 248
WARNING: reduce/reduce conflict in state 249 resolved using rule (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER)
WARNING: rejected rule (empty -> <empty>) in state 249
