
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL BOOLEAN BREAK CDER CIZQ COMA CONTINUE DECREMENTO DIF DIGUAL DIV DOUBLE ELSE ELSEIF END ENTERO FOR IF IGUAL IN INCREMENTO INT LDER LIZQ MAS MAYOR MAYORIG MENOR MENORIG MOD NEGACION OR PDER PIZQ POINT PRINT PROD RESTA RETURN STRING VAR VARIABLE VOID WHILEalgoritmo : imprimir\n                    | asignacion\n                    | expresion\n                    | comparacion\n                    | sentenciaIf\n    sentenciaIf : IF PIZQ comparacion PDER LIZQ algoritmo LDER asignacion : VARIABLE IGUAL expresionimprimir : PRINT PIZQ expresion PDERexpresion : valor\n    expresion : valor operadorMat expresioncomparacion : expresion operadorComp expresionoperadorMat : MAS \n                    | RESTA\n                    | PROD\n                    | DIV\n    operadorComp : MAYOR \n                    | MENOR\n                    | MAYORIG\n                    | MENORIG\n                    | DIGUAL\n                    | DIF\n    valor : ENTERO\n             | VARIABLE\n    '
    
_lr_action_items = {'PRINT':([0,36,],[7,7,]),'VARIABLE':([0,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,36,],[8,28,-16,-17,-18,-19,-20,-21,28,28,28,-12,-13,-14,-15,28,8,]),'IF':([0,36,],[10,10,]),'ENTERO':([0,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,36,],[11,11,-16,-17,-18,-19,-20,-21,11,11,11,-12,-13,-14,-15,11,11,]),'$end':([1,2,3,4,5,6,8,9,11,27,28,30,31,34,38,],[0,-1,-2,-3,-4,-5,-23,-9,-22,-11,-23,-7,-10,-8,-6,]),'LDER':([2,3,4,5,6,8,9,11,27,28,30,31,34,37,38,],[-1,-2,-3,-4,-5,-23,-9,-22,-11,-23,-7,-10,-8,38,-6,]),'MAYOR':([4,8,9,11,28,31,33,],[13,-23,-9,-22,-23,-10,13,]),'MENOR':([4,8,9,11,28,31,33,],[14,-23,-9,-22,-23,-10,14,]),'MAYORIG':([4,8,9,11,28,31,33,],[15,-23,-9,-22,-23,-10,15,]),'MENORIG':([4,8,9,11,28,31,33,],[16,-23,-9,-22,-23,-10,16,]),'DIGUAL':([4,8,9,11,28,31,33,],[17,-23,-9,-22,-23,-10,17,]),'DIF':([4,8,9,11,28,31,33,],[18,-23,-9,-22,-23,-10,18,]),'PIZQ':([7,10,],[19,26,]),'IGUAL':([8,],[20,]),'MAS':([8,9,11,28,],[-23,22,-22,-23,]),'RESTA':([8,9,11,28,],[-23,23,-22,-23,]),'PROD':([8,9,11,28,],[-23,24,-22,-23,]),'DIV':([8,9,11,28,],[-23,25,-22,-23,]),'PDER':([9,11,27,28,29,31,32,],[-9,-22,-11,-23,34,-10,35,]),'LIZQ':([35,],[36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'algoritmo':([0,36,],[1,37,]),'imprimir':([0,36,],[2,2,]),'asignacion':([0,36,],[3,3,]),'expresion':([0,12,19,20,21,26,36,],[4,27,29,30,31,33,4,]),'comparacion':([0,26,36,],[5,32,5,]),'sentenciaIf':([0,36,],[6,6,]),'valor':([0,12,19,20,21,26,36,],[9,9,9,9,9,9,9,]),'operadorComp':([4,33,],[12,12,]),'operadorMat':([9,],[21,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> algoritmo","S'",1,None,None,None),
  ('algoritmo -> imprimir','algoritmo',1,'p_algoritmo','sintaxis_Dart.py',11),
  ('algoritmo -> asignacion','algoritmo',1,'p_algoritmo','sintaxis_Dart.py',12),
  ('algoritmo -> expresion','algoritmo',1,'p_algoritmo','sintaxis_Dart.py',13),
  ('algoritmo -> comparacion','algoritmo',1,'p_algoritmo','sintaxis_Dart.py',14),
  ('algoritmo -> sentenciaIf','algoritmo',1,'p_algoritmo','sintaxis_Dart.py',15),
  ('sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER','sentenciaIf',7,'p_sentenciaIf','sintaxis_Dart.py',19),
  ('asignacion -> VARIABLE IGUAL expresion','asignacion',3,'p_asignacion','sintaxis_Dart.py',22),
  ('imprimir -> PRINT PIZQ expresion PDER','imprimir',4,'p_imprimir','sintaxis_Dart.py',25),
  ('expresion -> valor','expresion',1,'p_expresion','sintaxis_Dart.py',28),
  ('expresion -> valor operadorMat expresion','expresion',3,'p_expresion_aritmetica','sintaxis_Dart.py',31),
  ('comparacion -> expresion operadorComp expresion','comparacion',3,'p_comparacion','sintaxis_Dart.py',33),
  ('operadorMat -> MAS','operadorMat',1,'p_operadorMat','sintaxis_Dart.py',41),
  ('operadorMat -> RESTA','operadorMat',1,'p_operadorMat','sintaxis_Dart.py',42),
  ('operadorMat -> PROD','operadorMat',1,'p_operadorMat','sintaxis_Dart.py',43),
  ('operadorMat -> DIV','operadorMat',1,'p_operadorMat','sintaxis_Dart.py',44),
  ('operadorComp -> MAYOR','operadorComp',1,'p_operadorComp','sintaxis_Dart.py',48),
  ('operadorComp -> MENOR','operadorComp',1,'p_operadorComp','sintaxis_Dart.py',49),
  ('operadorComp -> MAYORIG','operadorComp',1,'p_operadorComp','sintaxis_Dart.py',50),
  ('operadorComp -> MENORIG','operadorComp',1,'p_operadorComp','sintaxis_Dart.py',51),
  ('operadorComp -> DIGUAL','operadorComp',1,'p_operadorComp','sintaxis_Dart.py',52),
  ('operadorComp -> DIF','operadorComp',1,'p_operadorComp','sintaxis_Dart.py',53),
  ('valor -> ENTERO','valor',1,'p_valor','sintaxis_Dart.py',57),
  ('valor -> VARIABLE','valor',1,'p_valor','sintaxis_Dart.py',58),
]
