Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    OR
    NEGACION
    CONTINUE
    BREAK
    SLICE

Grammar

Rule 0     S' -> algoritmo
Rule 1     algoritmo -> imprimir
Rule 2     algoritmo -> asignacion
Rule 3     algoritmo -> expresion END
Rule 4     algoritmo -> comparacion END
Rule 5     algoritmo -> sentenciaIf
Rule 6     algoritmo -> sentenciaFOR
Rule 7     algoritmo -> sentenciaWhile
Rule 8     algoritmo -> input
Rule 9     algoritmo -> funciones
Rule 10    funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER
Rule 11    funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER
Rule 12    asignacion -> tipo VARIABLE IGUAL expresiones END
Rule 13    asignacion -> VARIABLE IGUAL expresiones END
Rule 14    parametros -> tipo VARIABLE
Rule 15    parametros -> tipo VARIABLE COMA parametros
Rule 16    expresiones -> expresion
Rule 17    expresiones -> comparacion
Rule 18    expresiones -> BOOLEAN
Rule 19    expresiones -> opstring
Rule 20    expresiones -> indexacion
Rule 21    expresiones -> lista
Rule 22    expresiones -> conjuntos
Rule 23    expresiones -> first
Rule 24    expresiones -> last
Rule 25    expresiones -> length
Rule 26    expresiones -> remove
Rule 27    expresiones -> add
Rule 28    string -> STRING
Rule 29    opstring -> string
Rule 30    opstring -> VARIABLE
Rule 31    opstring -> string MAS opstring
Rule 32    imprimir -> PRINT PIZQ opstring PDER END
Rule 33    input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END
Rule 34    expresion -> valor
Rule 35    lista -> CIZQ elementos CDER
Rule 36    first -> VARIABLE POINT FIRST PIZQ PDER
Rule 37    last -> VARIABLE POINT LAST PIZQ PDER
Rule 38    length -> VARIABLE POINT LEN PIZQ PDER
Rule 39    add -> VARIABLE POINT ADD PIZQ valor PDER
Rule 40    remove -> VARIABLE POINT REMOVE PIZQ valor PDER
Rule 41    conjuntos -> LIZQ elementos LDER
Rule 42    elementos -> valor
Rule 43    elementos -> valor COMA elementos
Rule 44    expresion -> valor operadorMat expresion
Rule 45    comparacion -> expresion operadorComp expresion
Rule 46    operadorMat -> MAS
Rule 47    operadorMat -> RESTA
Rule 48    operadorMat -> PROD
Rule 49    operadorMat -> DIV
Rule 50    operadorMat -> MOD
Rule 51    operadorComp -> MAYOR
Rule 52    operadorComp -> MENOR
Rule 53    operadorComp -> MAYORIG
Rule 54    operadorComp -> MENORIG
Rule 55    operadorComp -> DIGUAL
Rule 56    operadorComp -> DIF
Rule 57    tipo -> VAR
Rule 58    tipo -> INT
Rule 59    tipo -> BOOL
Rule 60    tipo -> DOUBLE
Rule 61    tipo -> VOID
Rule 62    tipo -> STR
Rule 63    valor -> ENTERO
Rule 64    valor -> VARIABLE
Rule 65    sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END
Rule 66    varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
Rule 67    varianteIf -> ELSE LIZQ algoritmo LDER
Rule 68    varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
Rule 69    varianteIf -> empty
Rule 70    sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER END
Rule 71    parametrosF -> inicializacionFor END comparacion END VARIABLE increDecre
Rule 72    parametrosF -> VARIABLE IN VARIABLE
Rule 73    inicializacionFor -> VARIABLE IGUAL ENTERO
Rule 74    inicializacionFor -> INT VARIABLE IGUAL ENTERO
Rule 75    inicializacionFor -> VAR VARIABLE IGUAL ENTERO
Rule 76    increDecre -> INCREMENTO
Rule 77    increDecre -> DECREMENTO
Rule 78    sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END
Rule 79    sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
Rule 80    indexacion -> VARIABLE CIZQ valor CDER
Rule 81    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 39
AND                  : 
BOOL                 : 59
BOOLEAN              : 18
BREAK                : 
CDER                 : 35 80
CIZQ                 : 35 80
COMA                 : 15 43
CONTINUE             : 
DECREMENTO           : 77
DIF                  : 56
DIGUAL               : 55
DIV                  : 49
DO                   : 79
DOUBLE               : 60
ELSE                 : 67
ELSEIF               : 66 68
END                  : 3 4 10 12 13 32 33 65 70 71 71 78 79
ENTERO               : 63 73 74 75
FIRST                : 36
FOR                  : 70
IF                   : 65
IGUAL                : 12 13 33 73 74 75
IN                   : 72
INCREMENTO           : 76
INPUT                : 33
INT                  : 58 74
LAST                 : 37
LDER                 : 10 11 41 65 66 67 68 70 78 79
LEN                  : 38
LIZQ                 : 10 11 41 65 66 67 68 70 78 79
MAS                  : 31 46
MAYOR                : 51
MAYORIG              : 53
MENOR                : 52
MENORIG              : 54
MOD                  : 50
NEGACION             : 
OR                   : 
PDER                 : 10 11 32 33 36 37 38 39 40 65 66 68 70 78 79
PIZQ                 : 10 11 32 33 36 37 38 39 40 65 66 68 70 78 79
POINT                : 36 37 38 39 40
PRINT                : 32
PROD                 : 48
REMOVE               : 40
RESTA                : 47
RETURN               : 10
SLICE                : 
STR                  : 62
STRING               : 28
VAR                  : 57 75
VARIABLE             : 10 11 12 13 14 15 30 33 36 37 38 39 40 64 71 72 72 73 74 75 80
VOID                 : 11 61
WHILE                : 78 79
error                : 

Nonterminals, with rules where they appear

add                  : 27
algoritmo            : 10 11 65 66 67 68 70 78 79 0
asignacion           : 2
comparacion          : 4 17 65 66 68 71 78 79
conjuntos            : 22
elementos            : 35 41 43
empty                : 69
expresion            : 3 16 44 45 45
expresiones          : 12 13
first                : 23
funciones            : 9
imprimir             : 1
increDecre           : 71
indexacion           : 20
inicializacionFor    : 71
input                : 8
last                 : 24
length               : 25
lista                : 21
operadorComp         : 45
operadorMat          : 44
opstring             : 19 31 32
parametros           : 10 11 15
parametrosF          : 70
remove               : 26
sentenciaFOR         : 6
sentenciaIf          : 5
sentenciaWhile       : 7
string               : 29 31
tipo                 : 10 12 14 15 33
valor                : 10 34 39 40 42 43 44 80
varianteIf           : 65 68

Parsing method: LALR

state 0

    (0) S' -> . algoritmo
    (1) algoritmo -> . imprimir
    (2) algoritmo -> . asignacion
    (3) algoritmo -> . expresion END
    (4) algoritmo -> . comparacion END
    (5) algoritmo -> . sentenciaIf
    (6) algoritmo -> . sentenciaFOR
    (7) algoritmo -> . sentenciaWhile
    (8) algoritmo -> . input
    (9) algoritmo -> . funciones
    (32) imprimir -> . PRINT PIZQ opstring PDER END
    (12) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (13) asignacion -> . VARIABLE IGUAL expresiones END
    (34) expresion -> . valor
    (44) expresion -> . valor operadorMat expresion
    (45) comparacion -> . expresion operadorComp expresion
    (65) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END
    (70) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER END
    (78) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END
    (79) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (33) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (10) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER
    (11) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER
    (57) tipo -> . VAR
    (58) tipo -> . INT
    (59) tipo -> . BOOL
    (60) tipo -> . DOUBLE
    (61) tipo -> . VOID
    (62) tipo -> . STR
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE

    PRINT           shift and go to state 11
    VARIABLE        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    DO              shift and go to state 18
    VOID            shift and go to state 19
    VAR             shift and go to state 20
    INT             shift and go to state 21
    BOOL            shift and go to state 22
    DOUBLE          shift and go to state 23
    STR             shift and go to state 24
    ENTERO          shift and go to state 25

    algoritmo                      shift and go to state 1
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    expresion                      shift and go to state 4
    comparacion                    shift and go to state 5
    sentenciaIf                    shift and go to state 6
    sentenciaFOR                   shift and go to state 7
    sentenciaWhile                 shift and go to state 8
    input                          shift and go to state 9
    funciones                      shift and go to state 10
    tipo                           shift and go to state 12
    valor                          shift and go to state 14

state 1

    (0) S' -> algoritmo .



state 2

    (1) algoritmo -> imprimir .

    $end            reduce using rule 1 (algoritmo -> imprimir .)
    LDER            reduce using rule 1 (algoritmo -> imprimir .)
    RETURN          reduce using rule 1 (algoritmo -> imprimir .)


state 3

    (2) algoritmo -> asignacion .

    $end            reduce using rule 2 (algoritmo -> asignacion .)
    LDER            reduce using rule 2 (algoritmo -> asignacion .)
    RETURN          reduce using rule 2 (algoritmo -> asignacion .)


state 4

    (3) algoritmo -> expresion . END
    (45) comparacion -> expresion . operadorComp expresion
    (51) operadorComp -> . MAYOR
    (52) operadorComp -> . MENOR
    (53) operadorComp -> . MAYORIG
    (54) operadorComp -> . MENORIG
    (55) operadorComp -> . DIGUAL
    (56) operadorComp -> . DIF

    END             shift and go to state 26
    MAYOR           shift and go to state 28
    MENOR           shift and go to state 29
    MAYORIG         shift and go to state 30
    MENORIG         shift and go to state 31
    DIGUAL          shift and go to state 32
    DIF             shift and go to state 33

    operadorComp                   shift and go to state 27

state 5

    (4) algoritmo -> comparacion . END

    END             shift and go to state 34


state 6

    (5) algoritmo -> sentenciaIf .

    $end            reduce using rule 5 (algoritmo -> sentenciaIf .)
    LDER            reduce using rule 5 (algoritmo -> sentenciaIf .)
    RETURN          reduce using rule 5 (algoritmo -> sentenciaIf .)


state 7

    (6) algoritmo -> sentenciaFOR .

    $end            reduce using rule 6 (algoritmo -> sentenciaFOR .)
    LDER            reduce using rule 6 (algoritmo -> sentenciaFOR .)
    RETURN          reduce using rule 6 (algoritmo -> sentenciaFOR .)


state 8

    (7) algoritmo -> sentenciaWhile .

    $end            reduce using rule 7 (algoritmo -> sentenciaWhile .)
    LDER            reduce using rule 7 (algoritmo -> sentenciaWhile .)
    RETURN          reduce using rule 7 (algoritmo -> sentenciaWhile .)


state 9

    (8) algoritmo -> input .

    $end            reduce using rule 8 (algoritmo -> input .)
    LDER            reduce using rule 8 (algoritmo -> input .)
    RETURN          reduce using rule 8 (algoritmo -> input .)


state 10

    (9) algoritmo -> funciones .

    $end            reduce using rule 9 (algoritmo -> funciones .)
    LDER            reduce using rule 9 (algoritmo -> funciones .)
    RETURN          reduce using rule 9 (algoritmo -> funciones .)


state 11

    (32) imprimir -> PRINT . PIZQ opstring PDER END

    PIZQ            shift and go to state 35


state 12

    (12) asignacion -> tipo . VARIABLE IGUAL expresiones END
    (33) input -> tipo . VARIABLE IGUAL INPUT PIZQ PDER END
    (10) funciones -> tipo . VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER

    VARIABLE        shift and go to state 36


state 13

    (13) asignacion -> VARIABLE . IGUAL expresiones END
    (64) valor -> VARIABLE .

    IGUAL           shift and go to state 37
    MAS             reduce using rule 64 (valor -> VARIABLE .)
    RESTA           reduce using rule 64 (valor -> VARIABLE .)
    PROD            reduce using rule 64 (valor -> VARIABLE .)
    DIV             reduce using rule 64 (valor -> VARIABLE .)
    MOD             reduce using rule 64 (valor -> VARIABLE .)
    END             reduce using rule 64 (valor -> VARIABLE .)
    MAYOR           reduce using rule 64 (valor -> VARIABLE .)
    MENOR           reduce using rule 64 (valor -> VARIABLE .)
    MAYORIG         reduce using rule 64 (valor -> VARIABLE .)
    MENORIG         reduce using rule 64 (valor -> VARIABLE .)
    DIGUAL          reduce using rule 64 (valor -> VARIABLE .)
    DIF             reduce using rule 64 (valor -> VARIABLE .)


state 14

    (34) expresion -> valor .
    (44) expresion -> valor . operadorMat expresion
    (46) operadorMat -> . MAS
    (47) operadorMat -> . RESTA
    (48) operadorMat -> . PROD
    (49) operadorMat -> . DIV
    (50) operadorMat -> . MOD

    END             reduce using rule 34 (expresion -> valor .)
    MAYOR           reduce using rule 34 (expresion -> valor .)
    MENOR           reduce using rule 34 (expresion -> valor .)
    MAYORIG         reduce using rule 34 (expresion -> valor .)
    MENORIG         reduce using rule 34 (expresion -> valor .)
    DIGUAL          reduce using rule 34 (expresion -> valor .)
    DIF             reduce using rule 34 (expresion -> valor .)
    PDER            reduce using rule 34 (expresion -> valor .)
    MAS             shift and go to state 39
    RESTA           shift and go to state 40
    PROD            shift and go to state 41
    DIV             shift and go to state 42
    MOD             shift and go to state 43

    operadorMat                    shift and go to state 38

state 15

    (65) sentenciaIf -> IF . PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END

    PIZQ            shift and go to state 44


state 16

    (70) sentenciaFOR -> FOR . PIZQ parametrosF PDER LIZQ algoritmo LDER END

    PIZQ            shift and go to state 45


state 17

    (78) sentenciaWhile -> WHILE . PIZQ comparacion PDER LIZQ algoritmo LDER END

    PIZQ            shift and go to state 46


state 18

    (79) sentenciaWhile -> DO . LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END

    LIZQ            shift and go to state 47


state 19

    (11) funciones -> VOID . VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER
    (61) tipo -> VOID .

  ! shift/reduce conflict for VARIABLE resolved as shift
    VARIABLE        shift and go to state 48

  ! VARIABLE        [ reduce using rule 61 (tipo -> VOID .) ]


state 20

    (57) tipo -> VAR .

    VARIABLE        reduce using rule 57 (tipo -> VAR .)


state 21

    (58) tipo -> INT .

    VARIABLE        reduce using rule 58 (tipo -> INT .)


state 22

    (59) tipo -> BOOL .

    VARIABLE        reduce using rule 59 (tipo -> BOOL .)


state 23

    (60) tipo -> DOUBLE .

    VARIABLE        reduce using rule 60 (tipo -> DOUBLE .)


state 24

    (62) tipo -> STR .

    VARIABLE        reduce using rule 62 (tipo -> STR .)


state 25

    (63) valor -> ENTERO .

    MAS             reduce using rule 63 (valor -> ENTERO .)
    RESTA           reduce using rule 63 (valor -> ENTERO .)
    PROD            reduce using rule 63 (valor -> ENTERO .)
    DIV             reduce using rule 63 (valor -> ENTERO .)
    MOD             reduce using rule 63 (valor -> ENTERO .)
    END             reduce using rule 63 (valor -> ENTERO .)
    MAYOR           reduce using rule 63 (valor -> ENTERO .)
    MENOR           reduce using rule 63 (valor -> ENTERO .)
    MAYORIG         reduce using rule 63 (valor -> ENTERO .)
    MENORIG         reduce using rule 63 (valor -> ENTERO .)
    DIGUAL          reduce using rule 63 (valor -> ENTERO .)
    DIF             reduce using rule 63 (valor -> ENTERO .)
    PDER            reduce using rule 63 (valor -> ENTERO .)
    COMA            reduce using rule 63 (valor -> ENTERO .)
    CDER            reduce using rule 63 (valor -> ENTERO .)
    LDER            reduce using rule 63 (valor -> ENTERO .)


state 26

    (3) algoritmo -> expresion END .

    $end            reduce using rule 3 (algoritmo -> expresion END .)
    LDER            reduce using rule 3 (algoritmo -> expresion END .)
    RETURN          reduce using rule 3 (algoritmo -> expresion END .)


state 27

    (45) comparacion -> expresion operadorComp . expresion
    (34) expresion -> . valor
    (44) expresion -> . valor operadorMat expresion
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE

    ENTERO          shift and go to state 25
    VARIABLE        shift and go to state 50

    expresion                      shift and go to state 49
    valor                          shift and go to state 14

state 28

    (51) operadorComp -> MAYOR .

    ENTERO          reduce using rule 51 (operadorComp -> MAYOR .)
    VARIABLE        reduce using rule 51 (operadorComp -> MAYOR .)


state 29

    (52) operadorComp -> MENOR .

    ENTERO          reduce using rule 52 (operadorComp -> MENOR .)
    VARIABLE        reduce using rule 52 (operadorComp -> MENOR .)


state 30

    (53) operadorComp -> MAYORIG .

    ENTERO          reduce using rule 53 (operadorComp -> MAYORIG .)
    VARIABLE        reduce using rule 53 (operadorComp -> MAYORIG .)


state 31

    (54) operadorComp -> MENORIG .

    ENTERO          reduce using rule 54 (operadorComp -> MENORIG .)
    VARIABLE        reduce using rule 54 (operadorComp -> MENORIG .)


state 32

    (55) operadorComp -> DIGUAL .

    ENTERO          reduce using rule 55 (operadorComp -> DIGUAL .)
    VARIABLE        reduce using rule 55 (operadorComp -> DIGUAL .)


state 33

    (56) operadorComp -> DIF .

    ENTERO          reduce using rule 56 (operadorComp -> DIF .)
    VARIABLE        reduce using rule 56 (operadorComp -> DIF .)


state 34

    (4) algoritmo -> comparacion END .

    $end            reduce using rule 4 (algoritmo -> comparacion END .)
    LDER            reduce using rule 4 (algoritmo -> comparacion END .)
    RETURN          reduce using rule 4 (algoritmo -> comparacion END .)


state 35

    (32) imprimir -> PRINT PIZQ . opstring PDER END
    (29) opstring -> . string
    (30) opstring -> . VARIABLE
    (31) opstring -> . string MAS opstring
    (28) string -> . STRING

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54

    opstring                       shift and go to state 51
    string                         shift and go to state 52

state 36

    (12) asignacion -> tipo VARIABLE . IGUAL expresiones END
    (33) input -> tipo VARIABLE . IGUAL INPUT PIZQ PDER END
    (10) funciones -> tipo VARIABLE . PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER

    IGUAL           shift and go to state 55
    PIZQ            shift and go to state 56


state 37

    (13) asignacion -> VARIABLE IGUAL . expresiones END
    (16) expresiones -> . expresion
    (17) expresiones -> . comparacion
    (18) expresiones -> . BOOLEAN
    (19) expresiones -> . opstring
    (20) expresiones -> . indexacion
    (21) expresiones -> . lista
    (22) expresiones -> . conjuntos
    (23) expresiones -> . first
    (24) expresiones -> . last
    (25) expresiones -> . length
    (26) expresiones -> . remove
    (27) expresiones -> . add
    (34) expresion -> . valor
    (44) expresion -> . valor operadorMat expresion
    (45) comparacion -> . expresion operadorComp expresion
    (29) opstring -> . string
    (30) opstring -> . VARIABLE
    (31) opstring -> . string MAS opstring
    (80) indexacion -> . VARIABLE CIZQ valor CDER
    (35) lista -> . CIZQ elementos CDER
    (41) conjuntos -> . LIZQ elementos LDER
    (36) first -> . VARIABLE POINT FIRST PIZQ PDER
    (37) last -> . VARIABLE POINT LAST PIZQ PDER
    (38) length -> . VARIABLE POINT LEN PIZQ PDER
    (40) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (39) add -> . VARIABLE POINT ADD PIZQ valor PDER
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE
    (28) string -> . STRING

    BOOLEAN         shift and go to state 61
    VARIABLE        shift and go to state 57
    CIZQ            shift and go to state 71
    LIZQ            shift and go to state 72
    ENTERO          shift and go to state 25
    STRING          shift and go to state 54

    expresiones                    shift and go to state 58
    expresion                      shift and go to state 59
    comparacion                    shift and go to state 60
    opstring                       shift and go to state 62
    indexacion                     shift and go to state 63
    lista                          shift and go to state 64
    conjuntos                      shift and go to state 65
    first                          shift and go to state 66
    last                           shift and go to state 67
    length                         shift and go to state 68
    remove                         shift and go to state 69
    add                            shift and go to state 70
    valor                          shift and go to state 14
    string                         shift and go to state 52

state 38

    (44) expresion -> valor operadorMat . expresion
    (34) expresion -> . valor
    (44) expresion -> . valor operadorMat expresion
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE

    ENTERO          shift and go to state 25
    VARIABLE        shift and go to state 50

    valor                          shift and go to state 14
    expresion                      shift and go to state 73

state 39

    (46) operadorMat -> MAS .

    ENTERO          reduce using rule 46 (operadorMat -> MAS .)
    VARIABLE        reduce using rule 46 (operadorMat -> MAS .)


state 40

    (47) operadorMat -> RESTA .

    ENTERO          reduce using rule 47 (operadorMat -> RESTA .)
    VARIABLE        reduce using rule 47 (operadorMat -> RESTA .)


state 41

    (48) operadorMat -> PROD .

    ENTERO          reduce using rule 48 (operadorMat -> PROD .)
    VARIABLE        reduce using rule 48 (operadorMat -> PROD .)


state 42

    (49) operadorMat -> DIV .

    ENTERO          reduce using rule 49 (operadorMat -> DIV .)
    VARIABLE        reduce using rule 49 (operadorMat -> DIV .)


state 43

    (50) operadorMat -> MOD .

    ENTERO          reduce using rule 50 (operadorMat -> MOD .)
    VARIABLE        reduce using rule 50 (operadorMat -> MOD .)


state 44

    (65) sentenciaIf -> IF PIZQ . comparacion PDER LIZQ algoritmo LDER varianteIf END
    (45) comparacion -> . expresion operadorComp expresion
    (34) expresion -> . valor
    (44) expresion -> . valor operadorMat expresion
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE

    ENTERO          shift and go to state 25
    VARIABLE        shift and go to state 50

    comparacion                    shift and go to state 74
    expresion                      shift and go to state 75
    valor                          shift and go to state 14

state 45

    (70) sentenciaFOR -> FOR PIZQ . parametrosF PDER LIZQ algoritmo LDER END
    (71) parametrosF -> . inicializacionFor END comparacion END VARIABLE increDecre
    (72) parametrosF -> . VARIABLE IN VARIABLE
    (73) inicializacionFor -> . VARIABLE IGUAL ENTERO
    (74) inicializacionFor -> . INT VARIABLE IGUAL ENTERO
    (75) inicializacionFor -> . VAR VARIABLE IGUAL ENTERO

    VARIABLE        shift and go to state 78
    INT             shift and go to state 79
    VAR             shift and go to state 80

    parametrosF                    shift and go to state 76
    inicializacionFor              shift and go to state 77

state 46

    (78) sentenciaWhile -> WHILE PIZQ . comparacion PDER LIZQ algoritmo LDER END
    (45) comparacion -> . expresion operadorComp expresion
    (34) expresion -> . valor
    (44) expresion -> . valor operadorMat expresion
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE

    ENTERO          shift and go to state 25
    VARIABLE        shift and go to state 50

    comparacion                    shift and go to state 81
    expresion                      shift and go to state 75
    valor                          shift and go to state 14

state 47

    (79) sentenciaWhile -> DO LIZQ . algoritmo LDER WHILE PIZQ comparacion PDER END
    (1) algoritmo -> . imprimir
    (2) algoritmo -> . asignacion
    (3) algoritmo -> . expresion END
    (4) algoritmo -> . comparacion END
    (5) algoritmo -> . sentenciaIf
    (6) algoritmo -> . sentenciaFOR
    (7) algoritmo -> . sentenciaWhile
    (8) algoritmo -> . input
    (9) algoritmo -> . funciones
    (32) imprimir -> . PRINT PIZQ opstring PDER END
    (12) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (13) asignacion -> . VARIABLE IGUAL expresiones END
    (34) expresion -> . valor
    (44) expresion -> . valor operadorMat expresion
    (45) comparacion -> . expresion operadorComp expresion
    (65) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END
    (70) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER END
    (78) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END
    (79) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (33) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (10) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER
    (11) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER
    (57) tipo -> . VAR
    (58) tipo -> . INT
    (59) tipo -> . BOOL
    (60) tipo -> . DOUBLE
    (61) tipo -> . VOID
    (62) tipo -> . STR
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE

    PRINT           shift and go to state 11
    VARIABLE        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    DO              shift and go to state 18
    VOID            shift and go to state 19
    VAR             shift and go to state 20
    INT             shift and go to state 21
    BOOL            shift and go to state 22
    DOUBLE          shift and go to state 23
    STR             shift and go to state 24
    ENTERO          shift and go to state 25

    algoritmo                      shift and go to state 82
    comparacion                    shift and go to state 5
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    expresion                      shift and go to state 4
    sentenciaIf                    shift and go to state 6
    sentenciaFOR                   shift and go to state 7
    sentenciaWhile                 shift and go to state 8
    input                          shift and go to state 9
    funciones                      shift and go to state 10
    tipo                           shift and go to state 12
    valor                          shift and go to state 14

state 48

    (11) funciones -> VOID VARIABLE . PIZQ parametros PDER LIZQ algoritmo LDER

    PIZQ            shift and go to state 83


state 49

    (45) comparacion -> expresion operadorComp expresion .

    END             reduce using rule 45 (comparacion -> expresion operadorComp expresion .)
    PDER            reduce using rule 45 (comparacion -> expresion operadorComp expresion .)


state 50

    (64) valor -> VARIABLE .

    MAS             reduce using rule 64 (valor -> VARIABLE .)
    RESTA           reduce using rule 64 (valor -> VARIABLE .)
    PROD            reduce using rule 64 (valor -> VARIABLE .)
    DIV             reduce using rule 64 (valor -> VARIABLE .)
    MOD             reduce using rule 64 (valor -> VARIABLE .)
    END             reduce using rule 64 (valor -> VARIABLE .)
    PDER            reduce using rule 64 (valor -> VARIABLE .)
    MAYOR           reduce using rule 64 (valor -> VARIABLE .)
    MENOR           reduce using rule 64 (valor -> VARIABLE .)
    MAYORIG         reduce using rule 64 (valor -> VARIABLE .)
    MENORIG         reduce using rule 64 (valor -> VARIABLE .)
    DIGUAL          reduce using rule 64 (valor -> VARIABLE .)
    DIF             reduce using rule 64 (valor -> VARIABLE .)
    COMA            reduce using rule 64 (valor -> VARIABLE .)
    CDER            reduce using rule 64 (valor -> VARIABLE .)
    LDER            reduce using rule 64 (valor -> VARIABLE .)


state 51

    (32) imprimir -> PRINT PIZQ opstring . PDER END

    PDER            shift and go to state 84


state 52

    (29) opstring -> string .
    (31) opstring -> string . MAS opstring

    PDER            reduce using rule 29 (opstring -> string .)
    END             reduce using rule 29 (opstring -> string .)
    MAS             shift and go to state 85


state 53

    (30) opstring -> VARIABLE .

    PDER            reduce using rule 30 (opstring -> VARIABLE .)
    END             reduce using rule 30 (opstring -> VARIABLE .)


state 54

    (28) string -> STRING .

    MAS             reduce using rule 28 (string -> STRING .)
    PDER            reduce using rule 28 (string -> STRING .)
    END             reduce using rule 28 (string -> STRING .)


state 55

    (12) asignacion -> tipo VARIABLE IGUAL . expresiones END
    (33) input -> tipo VARIABLE IGUAL . INPUT PIZQ PDER END
    (16) expresiones -> . expresion
    (17) expresiones -> . comparacion
    (18) expresiones -> . BOOLEAN
    (19) expresiones -> . opstring
    (20) expresiones -> . indexacion
    (21) expresiones -> . lista
    (22) expresiones -> . conjuntos
    (23) expresiones -> . first
    (24) expresiones -> . last
    (25) expresiones -> . length
    (26) expresiones -> . remove
    (27) expresiones -> . add
    (34) expresion -> . valor
    (44) expresion -> . valor operadorMat expresion
    (45) comparacion -> . expresion operadorComp expresion
    (29) opstring -> . string
    (30) opstring -> . VARIABLE
    (31) opstring -> . string MAS opstring
    (80) indexacion -> . VARIABLE CIZQ valor CDER
    (35) lista -> . CIZQ elementos CDER
    (41) conjuntos -> . LIZQ elementos LDER
    (36) first -> . VARIABLE POINT FIRST PIZQ PDER
    (37) last -> . VARIABLE POINT LAST PIZQ PDER
    (38) length -> . VARIABLE POINT LEN PIZQ PDER
    (40) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (39) add -> . VARIABLE POINT ADD PIZQ valor PDER
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE
    (28) string -> . STRING

    INPUT           shift and go to state 87
    BOOLEAN         shift and go to state 61
    VARIABLE        shift and go to state 57
    CIZQ            shift and go to state 71
    LIZQ            shift and go to state 72
    ENTERO          shift and go to state 25
    STRING          shift and go to state 54

    expresiones                    shift and go to state 86
    expresion                      shift and go to state 59
    comparacion                    shift and go to state 60
    opstring                       shift and go to state 62
    indexacion                     shift and go to state 63
    lista                          shift and go to state 64
    conjuntos                      shift and go to state 65
    first                          shift and go to state 66
    last                           shift and go to state 67
    length                         shift and go to state 68
    remove                         shift and go to state 69
    add                            shift and go to state 70
    valor                          shift and go to state 14
    string                         shift and go to state 52

state 56

    (10) funciones -> tipo VARIABLE PIZQ . parametros PDER LIZQ algoritmo RETURN valor END LDER
    (14) parametros -> . tipo VARIABLE
    (15) parametros -> . tipo VARIABLE COMA parametros
    (57) tipo -> . VAR
    (58) tipo -> . INT
    (59) tipo -> . BOOL
    (60) tipo -> . DOUBLE
    (61) tipo -> . VOID
    (62) tipo -> . STR

    VAR             shift and go to state 20
    INT             shift and go to state 21
    BOOL            shift and go to state 22
    DOUBLE          shift and go to state 23
    VOID            shift and go to state 90
    STR             shift and go to state 24

    tipo                           shift and go to state 88
    parametros                     shift and go to state 89

state 57

    (30) opstring -> VARIABLE .
    (80) indexacion -> VARIABLE . CIZQ valor CDER
    (36) first -> VARIABLE . POINT FIRST PIZQ PDER
    (37) last -> VARIABLE . POINT LAST PIZQ PDER
    (38) length -> VARIABLE . POINT LEN PIZQ PDER
    (40) remove -> VARIABLE . POINT REMOVE PIZQ valor PDER
    (39) add -> VARIABLE . POINT ADD PIZQ valor PDER
    (64) valor -> VARIABLE .

  ! reduce/reduce conflict for END resolved using rule 30 (opstring -> VARIABLE .)
    END             reduce using rule 30 (opstring -> VARIABLE .)
    CIZQ            shift and go to state 91
    POINT           shift and go to state 92
    MAS             reduce using rule 64 (valor -> VARIABLE .)
    RESTA           reduce using rule 64 (valor -> VARIABLE .)
    PROD            reduce using rule 64 (valor -> VARIABLE .)
    DIV             reduce using rule 64 (valor -> VARIABLE .)
    MOD             reduce using rule 64 (valor -> VARIABLE .)
    MAYOR           reduce using rule 64 (valor -> VARIABLE .)
    MENOR           reduce using rule 64 (valor -> VARIABLE .)
    MAYORIG         reduce using rule 64 (valor -> VARIABLE .)
    MENORIG         reduce using rule 64 (valor -> VARIABLE .)
    DIGUAL          reduce using rule 64 (valor -> VARIABLE .)
    DIF             reduce using rule 64 (valor -> VARIABLE .)

  ! END             [ reduce using rule 64 (valor -> VARIABLE .) ]


state 58

    (13) asignacion -> VARIABLE IGUAL expresiones . END

    END             shift and go to state 93


state 59

    (16) expresiones -> expresion .
    (45) comparacion -> expresion . operadorComp expresion
    (51) operadorComp -> . MAYOR
    (52) operadorComp -> . MENOR
    (53) operadorComp -> . MAYORIG
    (54) operadorComp -> . MENORIG
    (55) operadorComp -> . DIGUAL
    (56) operadorComp -> . DIF

    END             reduce using rule 16 (expresiones -> expresion .)
    MAYOR           shift and go to state 28
    MENOR           shift and go to state 29
    MAYORIG         shift and go to state 30
    MENORIG         shift and go to state 31
    DIGUAL          shift and go to state 32
    DIF             shift and go to state 33

    operadorComp                   shift and go to state 27

state 60

    (17) expresiones -> comparacion .

    END             reduce using rule 17 (expresiones -> comparacion .)


state 61

    (18) expresiones -> BOOLEAN .

    END             reduce using rule 18 (expresiones -> BOOLEAN .)


state 62

    (19) expresiones -> opstring .

    END             reduce using rule 19 (expresiones -> opstring .)


state 63

    (20) expresiones -> indexacion .

    END             reduce using rule 20 (expresiones -> indexacion .)


state 64

    (21) expresiones -> lista .

    END             reduce using rule 21 (expresiones -> lista .)


state 65

    (22) expresiones -> conjuntos .

    END             reduce using rule 22 (expresiones -> conjuntos .)


state 66

    (23) expresiones -> first .

    END             reduce using rule 23 (expresiones -> first .)


state 67

    (24) expresiones -> last .

    END             reduce using rule 24 (expresiones -> last .)


state 68

    (25) expresiones -> length .

    END             reduce using rule 25 (expresiones -> length .)


state 69

    (26) expresiones -> remove .

    END             reduce using rule 26 (expresiones -> remove .)


state 70

    (27) expresiones -> add .

    END             reduce using rule 27 (expresiones -> add .)


state 71

    (35) lista -> CIZQ . elementos CDER
    (42) elementos -> . valor
    (43) elementos -> . valor COMA elementos
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE

    ENTERO          shift and go to state 25
    VARIABLE        shift and go to state 50

    elementos                      shift and go to state 94
    valor                          shift and go to state 95

state 72

    (41) conjuntos -> LIZQ . elementos LDER
    (42) elementos -> . valor
    (43) elementos -> . valor COMA elementos
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE

    ENTERO          shift and go to state 25
    VARIABLE        shift and go to state 50

    elementos                      shift and go to state 96
    valor                          shift and go to state 95

state 73

    (44) expresion -> valor operadorMat expresion .

    END             reduce using rule 44 (expresion -> valor operadorMat expresion .)
    MAYOR           reduce using rule 44 (expresion -> valor operadorMat expresion .)
    MENOR           reduce using rule 44 (expresion -> valor operadorMat expresion .)
    MAYORIG         reduce using rule 44 (expresion -> valor operadorMat expresion .)
    MENORIG         reduce using rule 44 (expresion -> valor operadorMat expresion .)
    DIGUAL          reduce using rule 44 (expresion -> valor operadorMat expresion .)
    DIF             reduce using rule 44 (expresion -> valor operadorMat expresion .)
    PDER            reduce using rule 44 (expresion -> valor operadorMat expresion .)


state 74

    (65) sentenciaIf -> IF PIZQ comparacion . PDER LIZQ algoritmo LDER varianteIf END

    PDER            shift and go to state 97


state 75

    (45) comparacion -> expresion . operadorComp expresion
    (51) operadorComp -> . MAYOR
    (52) operadorComp -> . MENOR
    (53) operadorComp -> . MAYORIG
    (54) operadorComp -> . MENORIG
    (55) operadorComp -> . DIGUAL
    (56) operadorComp -> . DIF

    MAYOR           shift and go to state 28
    MENOR           shift and go to state 29
    MAYORIG         shift and go to state 30
    MENORIG         shift and go to state 31
    DIGUAL          shift and go to state 32
    DIF             shift and go to state 33

    operadorComp                   shift and go to state 27

state 76

    (70) sentenciaFOR -> FOR PIZQ parametrosF . PDER LIZQ algoritmo LDER END

    PDER            shift and go to state 98


state 77

    (71) parametrosF -> inicializacionFor . END comparacion END VARIABLE increDecre

    END             shift and go to state 99


state 78

    (72) parametrosF -> VARIABLE . IN VARIABLE
    (73) inicializacionFor -> VARIABLE . IGUAL ENTERO

    IN              shift and go to state 100
    IGUAL           shift and go to state 101


state 79

    (74) inicializacionFor -> INT . VARIABLE IGUAL ENTERO

    VARIABLE        shift and go to state 102


state 80

    (75) inicializacionFor -> VAR . VARIABLE IGUAL ENTERO

    VARIABLE        shift and go to state 103


state 81

    (78) sentenciaWhile -> WHILE PIZQ comparacion . PDER LIZQ algoritmo LDER END

    PDER            shift and go to state 104


state 82

    (79) sentenciaWhile -> DO LIZQ algoritmo . LDER WHILE PIZQ comparacion PDER END

    LDER            shift and go to state 105


state 83

    (11) funciones -> VOID VARIABLE PIZQ . parametros PDER LIZQ algoritmo LDER
    (14) parametros -> . tipo VARIABLE
    (15) parametros -> . tipo VARIABLE COMA parametros
    (57) tipo -> . VAR
    (58) tipo -> . INT
    (59) tipo -> . BOOL
    (60) tipo -> . DOUBLE
    (61) tipo -> . VOID
    (62) tipo -> . STR

    VAR             shift and go to state 20
    INT             shift and go to state 21
    BOOL            shift and go to state 22
    DOUBLE          shift and go to state 23
    VOID            shift and go to state 90
    STR             shift and go to state 24

    parametros                     shift and go to state 106
    tipo                           shift and go to state 88

state 84

    (32) imprimir -> PRINT PIZQ opstring PDER . END

    END             shift and go to state 107


state 85

    (31) opstring -> string MAS . opstring
    (29) opstring -> . string
    (30) opstring -> . VARIABLE
    (31) opstring -> . string MAS opstring
    (28) string -> . STRING

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54

    string                         shift and go to state 52
    opstring                       shift and go to state 108

state 86

    (12) asignacion -> tipo VARIABLE IGUAL expresiones . END

    END             shift and go to state 109


state 87

    (33) input -> tipo VARIABLE IGUAL INPUT . PIZQ PDER END

    PIZQ            shift and go to state 110


state 88

    (14) parametros -> tipo . VARIABLE
    (15) parametros -> tipo . VARIABLE COMA parametros

    VARIABLE        shift and go to state 111


state 89

    (10) funciones -> tipo VARIABLE PIZQ parametros . PDER LIZQ algoritmo RETURN valor END LDER

    PDER            shift and go to state 112


state 90

    (61) tipo -> VOID .

    VARIABLE        reduce using rule 61 (tipo -> VOID .)


state 91

    (80) indexacion -> VARIABLE CIZQ . valor CDER
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE

    ENTERO          shift and go to state 25
    VARIABLE        shift and go to state 50

    valor                          shift and go to state 113

state 92

    (36) first -> VARIABLE POINT . FIRST PIZQ PDER
    (37) last -> VARIABLE POINT . LAST PIZQ PDER
    (38) length -> VARIABLE POINT . LEN PIZQ PDER
    (40) remove -> VARIABLE POINT . REMOVE PIZQ valor PDER
    (39) add -> VARIABLE POINT . ADD PIZQ valor PDER

    FIRST           shift and go to state 114
    LAST            shift and go to state 115
    LEN             shift and go to state 116
    REMOVE          shift and go to state 117
    ADD             shift and go to state 118


state 93

    (13) asignacion -> VARIABLE IGUAL expresiones END .

    $end            reduce using rule 13 (asignacion -> VARIABLE IGUAL expresiones END .)
    LDER            reduce using rule 13 (asignacion -> VARIABLE IGUAL expresiones END .)
    RETURN          reduce using rule 13 (asignacion -> VARIABLE IGUAL expresiones END .)


state 94

    (35) lista -> CIZQ elementos . CDER

    CDER            shift and go to state 119


state 95

    (42) elementos -> valor .
    (43) elementos -> valor . COMA elementos

    CDER            reduce using rule 42 (elementos -> valor .)
    LDER            reduce using rule 42 (elementos -> valor .)
    COMA            shift and go to state 120


state 96

    (41) conjuntos -> LIZQ elementos . LDER

    LDER            shift and go to state 121


state 97

    (65) sentenciaIf -> IF PIZQ comparacion PDER . LIZQ algoritmo LDER varianteIf END

    LIZQ            shift and go to state 122


state 98

    (70) sentenciaFOR -> FOR PIZQ parametrosF PDER . LIZQ algoritmo LDER END

    LIZQ            shift and go to state 123


state 99

    (71) parametrosF -> inicializacionFor END . comparacion END VARIABLE increDecre
    (45) comparacion -> . expresion operadorComp expresion
    (34) expresion -> . valor
    (44) expresion -> . valor operadorMat expresion
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE

    ENTERO          shift and go to state 25
    VARIABLE        shift and go to state 50

    comparacion                    shift and go to state 124
    expresion                      shift and go to state 75
    valor                          shift and go to state 14

state 100

    (72) parametrosF -> VARIABLE IN . VARIABLE

    VARIABLE        shift and go to state 125


state 101

    (73) inicializacionFor -> VARIABLE IGUAL . ENTERO

    ENTERO          shift and go to state 126


state 102

    (74) inicializacionFor -> INT VARIABLE . IGUAL ENTERO

    IGUAL           shift and go to state 127


state 103

    (75) inicializacionFor -> VAR VARIABLE . IGUAL ENTERO

    IGUAL           shift and go to state 128


state 104

    (78) sentenciaWhile -> WHILE PIZQ comparacion PDER . LIZQ algoritmo LDER END

    LIZQ            shift and go to state 129


state 105

    (79) sentenciaWhile -> DO LIZQ algoritmo LDER . WHILE PIZQ comparacion PDER END

    WHILE           shift and go to state 130


state 106

    (11) funciones -> VOID VARIABLE PIZQ parametros . PDER LIZQ algoritmo LDER

    PDER            shift and go to state 131


state 107

    (32) imprimir -> PRINT PIZQ opstring PDER END .

    $end            reduce using rule 32 (imprimir -> PRINT PIZQ opstring PDER END .)
    LDER            reduce using rule 32 (imprimir -> PRINT PIZQ opstring PDER END .)
    RETURN          reduce using rule 32 (imprimir -> PRINT PIZQ opstring PDER END .)


state 108

    (31) opstring -> string MAS opstring .

    PDER            reduce using rule 31 (opstring -> string MAS opstring .)
    END             reduce using rule 31 (opstring -> string MAS opstring .)


state 109

    (12) asignacion -> tipo VARIABLE IGUAL expresiones END .

    $end            reduce using rule 12 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    LDER            reduce using rule 12 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    RETURN          reduce using rule 12 (asignacion -> tipo VARIABLE IGUAL expresiones END .)


state 110

    (33) input -> tipo VARIABLE IGUAL INPUT PIZQ . PDER END

    PDER            shift and go to state 132


state 111

    (14) parametros -> tipo VARIABLE .
    (15) parametros -> tipo VARIABLE . COMA parametros

    PDER            reduce using rule 14 (parametros -> tipo VARIABLE .)
    COMA            shift and go to state 133


state 112

    (10) funciones -> tipo VARIABLE PIZQ parametros PDER . LIZQ algoritmo RETURN valor END LDER

    LIZQ            shift and go to state 134


state 113

    (80) indexacion -> VARIABLE CIZQ valor . CDER

    CDER            shift and go to state 135


state 114

    (36) first -> VARIABLE POINT FIRST . PIZQ PDER

    PIZQ            shift and go to state 136


state 115

    (37) last -> VARIABLE POINT LAST . PIZQ PDER

    PIZQ            shift and go to state 137


state 116

    (38) length -> VARIABLE POINT LEN . PIZQ PDER

    PIZQ            shift and go to state 138


state 117

    (40) remove -> VARIABLE POINT REMOVE . PIZQ valor PDER

    PIZQ            shift and go to state 139


state 118

    (39) add -> VARIABLE POINT ADD . PIZQ valor PDER

    PIZQ            shift and go to state 140


state 119

    (35) lista -> CIZQ elementos CDER .

    END             reduce using rule 35 (lista -> CIZQ elementos CDER .)


state 120

    (43) elementos -> valor COMA . elementos
    (42) elementos -> . valor
    (43) elementos -> . valor COMA elementos
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE

    ENTERO          shift and go to state 25
    VARIABLE        shift and go to state 50

    valor                          shift and go to state 95
    elementos                      shift and go to state 141

state 121

    (41) conjuntos -> LIZQ elementos LDER .

    END             reduce using rule 41 (conjuntos -> LIZQ elementos LDER .)


state 122

    (65) sentenciaIf -> IF PIZQ comparacion PDER LIZQ . algoritmo LDER varianteIf END
    (1) algoritmo -> . imprimir
    (2) algoritmo -> . asignacion
    (3) algoritmo -> . expresion END
    (4) algoritmo -> . comparacion END
    (5) algoritmo -> . sentenciaIf
    (6) algoritmo -> . sentenciaFOR
    (7) algoritmo -> . sentenciaWhile
    (8) algoritmo -> . input
    (9) algoritmo -> . funciones
    (32) imprimir -> . PRINT PIZQ opstring PDER END
    (12) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (13) asignacion -> . VARIABLE IGUAL expresiones END
    (34) expresion -> . valor
    (44) expresion -> . valor operadorMat expresion
    (45) comparacion -> . expresion operadorComp expresion
    (65) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END
    (70) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER END
    (78) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END
    (79) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (33) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (10) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER
    (11) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER
    (57) tipo -> . VAR
    (58) tipo -> . INT
    (59) tipo -> . BOOL
    (60) tipo -> . DOUBLE
    (61) tipo -> . VOID
    (62) tipo -> . STR
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE

    PRINT           shift and go to state 11
    VARIABLE        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    DO              shift and go to state 18
    VOID            shift and go to state 19
    VAR             shift and go to state 20
    INT             shift and go to state 21
    BOOL            shift and go to state 22
    DOUBLE          shift and go to state 23
    STR             shift and go to state 24
    ENTERO          shift and go to state 25

    comparacion                    shift and go to state 5
    algoritmo                      shift and go to state 142
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    expresion                      shift and go to state 4
    sentenciaIf                    shift and go to state 6
    sentenciaFOR                   shift and go to state 7
    sentenciaWhile                 shift and go to state 8
    input                          shift and go to state 9
    funciones                      shift and go to state 10
    tipo                           shift and go to state 12
    valor                          shift and go to state 14

state 123

    (70) sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ . algoritmo LDER END
    (1) algoritmo -> . imprimir
    (2) algoritmo -> . asignacion
    (3) algoritmo -> . expresion END
    (4) algoritmo -> . comparacion END
    (5) algoritmo -> . sentenciaIf
    (6) algoritmo -> . sentenciaFOR
    (7) algoritmo -> . sentenciaWhile
    (8) algoritmo -> . input
    (9) algoritmo -> . funciones
    (32) imprimir -> . PRINT PIZQ opstring PDER END
    (12) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (13) asignacion -> . VARIABLE IGUAL expresiones END
    (34) expresion -> . valor
    (44) expresion -> . valor operadorMat expresion
    (45) comparacion -> . expresion operadorComp expresion
    (65) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END
    (70) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER END
    (78) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END
    (79) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (33) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (10) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER
    (11) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER
    (57) tipo -> . VAR
    (58) tipo -> . INT
    (59) tipo -> . BOOL
    (60) tipo -> . DOUBLE
    (61) tipo -> . VOID
    (62) tipo -> . STR
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE

    PRINT           shift and go to state 11
    VARIABLE        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    DO              shift and go to state 18
    VOID            shift and go to state 19
    VAR             shift and go to state 20
    INT             shift and go to state 21
    BOOL            shift and go to state 22
    DOUBLE          shift and go to state 23
    STR             shift and go to state 24
    ENTERO          shift and go to state 25

    algoritmo                      shift and go to state 143
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    expresion                      shift and go to state 4
    comparacion                    shift and go to state 5
    sentenciaIf                    shift and go to state 6
    sentenciaFOR                   shift and go to state 7
    sentenciaWhile                 shift and go to state 8
    input                          shift and go to state 9
    funciones                      shift and go to state 10
    tipo                           shift and go to state 12
    valor                          shift and go to state 14

state 124

    (71) parametrosF -> inicializacionFor END comparacion . END VARIABLE increDecre

    END             shift and go to state 144


state 125

    (72) parametrosF -> VARIABLE IN VARIABLE .

    PDER            reduce using rule 72 (parametrosF -> VARIABLE IN VARIABLE .)


state 126

    (73) inicializacionFor -> VARIABLE IGUAL ENTERO .

    END             reduce using rule 73 (inicializacionFor -> VARIABLE IGUAL ENTERO .)


state 127

    (74) inicializacionFor -> INT VARIABLE IGUAL . ENTERO

    ENTERO          shift and go to state 145


state 128

    (75) inicializacionFor -> VAR VARIABLE IGUAL . ENTERO

    ENTERO          shift and go to state 146


state 129

    (78) sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ . algoritmo LDER END
    (1) algoritmo -> . imprimir
    (2) algoritmo -> . asignacion
    (3) algoritmo -> . expresion END
    (4) algoritmo -> . comparacion END
    (5) algoritmo -> . sentenciaIf
    (6) algoritmo -> . sentenciaFOR
    (7) algoritmo -> . sentenciaWhile
    (8) algoritmo -> . input
    (9) algoritmo -> . funciones
    (32) imprimir -> . PRINT PIZQ opstring PDER END
    (12) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (13) asignacion -> . VARIABLE IGUAL expresiones END
    (34) expresion -> . valor
    (44) expresion -> . valor operadorMat expresion
    (45) comparacion -> . expresion operadorComp expresion
    (65) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END
    (70) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER END
    (78) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END
    (79) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (33) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (10) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER
    (11) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER
    (57) tipo -> . VAR
    (58) tipo -> . INT
    (59) tipo -> . BOOL
    (60) tipo -> . DOUBLE
    (61) tipo -> . VOID
    (62) tipo -> . STR
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE

    PRINT           shift and go to state 11
    VARIABLE        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    DO              shift and go to state 18
    VOID            shift and go to state 19
    VAR             shift and go to state 20
    INT             shift and go to state 21
    BOOL            shift and go to state 22
    DOUBLE          shift and go to state 23
    STR             shift and go to state 24
    ENTERO          shift and go to state 25

    comparacion                    shift and go to state 5
    algoritmo                      shift and go to state 147
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    expresion                      shift and go to state 4
    sentenciaIf                    shift and go to state 6
    sentenciaFOR                   shift and go to state 7
    sentenciaWhile                 shift and go to state 8
    input                          shift and go to state 9
    funciones                      shift and go to state 10
    tipo                           shift and go to state 12
    valor                          shift and go to state 14

state 130

    (79) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE . PIZQ comparacion PDER END

    PIZQ            shift and go to state 148


state 131

    (11) funciones -> VOID VARIABLE PIZQ parametros PDER . LIZQ algoritmo LDER

    LIZQ            shift and go to state 149


state 132

    (33) input -> tipo VARIABLE IGUAL INPUT PIZQ PDER . END

    END             shift and go to state 150


state 133

    (15) parametros -> tipo VARIABLE COMA . parametros
    (14) parametros -> . tipo VARIABLE
    (15) parametros -> . tipo VARIABLE COMA parametros
    (57) tipo -> . VAR
    (58) tipo -> . INT
    (59) tipo -> . BOOL
    (60) tipo -> . DOUBLE
    (61) tipo -> . VOID
    (62) tipo -> . STR

    VAR             shift and go to state 20
    INT             shift and go to state 21
    BOOL            shift and go to state 22
    DOUBLE          shift and go to state 23
    VOID            shift and go to state 90
    STR             shift and go to state 24

    tipo                           shift and go to state 88
    parametros                     shift and go to state 151

state 134

    (10) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ . algoritmo RETURN valor END LDER
    (1) algoritmo -> . imprimir
    (2) algoritmo -> . asignacion
    (3) algoritmo -> . expresion END
    (4) algoritmo -> . comparacion END
    (5) algoritmo -> . sentenciaIf
    (6) algoritmo -> . sentenciaFOR
    (7) algoritmo -> . sentenciaWhile
    (8) algoritmo -> . input
    (9) algoritmo -> . funciones
    (32) imprimir -> . PRINT PIZQ opstring PDER END
    (12) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (13) asignacion -> . VARIABLE IGUAL expresiones END
    (34) expresion -> . valor
    (44) expresion -> . valor operadorMat expresion
    (45) comparacion -> . expresion operadorComp expresion
    (65) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END
    (70) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER END
    (78) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END
    (79) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (33) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (10) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER
    (11) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER
    (57) tipo -> . VAR
    (58) tipo -> . INT
    (59) tipo -> . BOOL
    (60) tipo -> . DOUBLE
    (61) tipo -> . VOID
    (62) tipo -> . STR
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE

    PRINT           shift and go to state 11
    VARIABLE        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    DO              shift and go to state 18
    VOID            shift and go to state 19
    VAR             shift and go to state 20
    INT             shift and go to state 21
    BOOL            shift and go to state 22
    DOUBLE          shift and go to state 23
    STR             shift and go to state 24
    ENTERO          shift and go to state 25

    tipo                           shift and go to state 12
    algoritmo                      shift and go to state 152
    valor                          shift and go to state 14
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    expresion                      shift and go to state 4
    comparacion                    shift and go to state 5
    sentenciaIf                    shift and go to state 6
    sentenciaFOR                   shift and go to state 7
    sentenciaWhile                 shift and go to state 8
    input                          shift and go to state 9
    funciones                      shift and go to state 10

state 135

    (80) indexacion -> VARIABLE CIZQ valor CDER .

    END             reduce using rule 80 (indexacion -> VARIABLE CIZQ valor CDER .)


state 136

    (36) first -> VARIABLE POINT FIRST PIZQ . PDER

    PDER            shift and go to state 153


state 137

    (37) last -> VARIABLE POINT LAST PIZQ . PDER

    PDER            shift and go to state 154


state 138

    (38) length -> VARIABLE POINT LEN PIZQ . PDER

    PDER            shift and go to state 155


state 139

    (40) remove -> VARIABLE POINT REMOVE PIZQ . valor PDER
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE

    ENTERO          shift and go to state 25
    VARIABLE        shift and go to state 50

    valor                          shift and go to state 156

state 140

    (39) add -> VARIABLE POINT ADD PIZQ . valor PDER
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE

    ENTERO          shift and go to state 25
    VARIABLE        shift and go to state 50

    valor                          shift and go to state 157

state 141

    (43) elementos -> valor COMA elementos .

    CDER            reduce using rule 43 (elementos -> valor COMA elementos .)
    LDER            reduce using rule 43 (elementos -> valor COMA elementos .)


state 142

    (65) sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo . LDER varianteIf END

    LDER            shift and go to state 158


state 143

    (70) sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo . LDER END

    LDER            shift and go to state 159


state 144

    (71) parametrosF -> inicializacionFor END comparacion END . VARIABLE increDecre

    VARIABLE        shift and go to state 160


state 145

    (74) inicializacionFor -> INT VARIABLE IGUAL ENTERO .

    END             reduce using rule 74 (inicializacionFor -> INT VARIABLE IGUAL ENTERO .)


state 146

    (75) inicializacionFor -> VAR VARIABLE IGUAL ENTERO .

    END             reduce using rule 75 (inicializacionFor -> VAR VARIABLE IGUAL ENTERO .)


state 147

    (78) sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo . LDER END

    LDER            shift and go to state 161


state 148

    (79) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ . comparacion PDER END
    (45) comparacion -> . expresion operadorComp expresion
    (34) expresion -> . valor
    (44) expresion -> . valor operadorMat expresion
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE

    ENTERO          shift and go to state 25
    VARIABLE        shift and go to state 50

    comparacion                    shift and go to state 162
    expresion                      shift and go to state 75
    valor                          shift and go to state 14

state 149

    (11) funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ . algoritmo LDER
    (1) algoritmo -> . imprimir
    (2) algoritmo -> . asignacion
    (3) algoritmo -> . expresion END
    (4) algoritmo -> . comparacion END
    (5) algoritmo -> . sentenciaIf
    (6) algoritmo -> . sentenciaFOR
    (7) algoritmo -> . sentenciaWhile
    (8) algoritmo -> . input
    (9) algoritmo -> . funciones
    (32) imprimir -> . PRINT PIZQ opstring PDER END
    (12) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (13) asignacion -> . VARIABLE IGUAL expresiones END
    (34) expresion -> . valor
    (44) expresion -> . valor operadorMat expresion
    (45) comparacion -> . expresion operadorComp expresion
    (65) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END
    (70) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER END
    (78) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END
    (79) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (33) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (10) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER
    (11) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER
    (57) tipo -> . VAR
    (58) tipo -> . INT
    (59) tipo -> . BOOL
    (60) tipo -> . DOUBLE
    (61) tipo -> . VOID
    (62) tipo -> . STR
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE

    PRINT           shift and go to state 11
    VARIABLE        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    DO              shift and go to state 18
    VOID            shift and go to state 19
    VAR             shift and go to state 20
    INT             shift and go to state 21
    BOOL            shift and go to state 22
    DOUBLE          shift and go to state 23
    STR             shift and go to state 24
    ENTERO          shift and go to state 25

    algoritmo                      shift and go to state 163
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    expresion                      shift and go to state 4
    comparacion                    shift and go to state 5
    sentenciaIf                    shift and go to state 6
    sentenciaFOR                   shift and go to state 7
    sentenciaWhile                 shift and go to state 8
    input                          shift and go to state 9
    funciones                      shift and go to state 10
    tipo                           shift and go to state 12
    valor                          shift and go to state 14

state 150

    (33) input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .

    $end            reduce using rule 33 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    LDER            reduce using rule 33 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    RETURN          reduce using rule 33 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)


state 151

    (15) parametros -> tipo VARIABLE COMA parametros .

    PDER            reduce using rule 15 (parametros -> tipo VARIABLE COMA parametros .)


state 152

    (10) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo . RETURN valor END LDER

    RETURN          shift and go to state 164


state 153

    (36) first -> VARIABLE POINT FIRST PIZQ PDER .

    END             reduce using rule 36 (first -> VARIABLE POINT FIRST PIZQ PDER .)


state 154

    (37) last -> VARIABLE POINT LAST PIZQ PDER .

    END             reduce using rule 37 (last -> VARIABLE POINT LAST PIZQ PDER .)


state 155

    (38) length -> VARIABLE POINT LEN PIZQ PDER .

    END             reduce using rule 38 (length -> VARIABLE POINT LEN PIZQ PDER .)


state 156

    (40) remove -> VARIABLE POINT REMOVE PIZQ valor . PDER

    PDER            shift and go to state 165


state 157

    (39) add -> VARIABLE POINT ADD PIZQ valor . PDER

    PDER            shift and go to state 166


state 158

    (65) sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER . varianteIf END
    (66) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
    (67) varianteIf -> . ELSE LIZQ algoritmo LDER
    (68) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (69) varianteIf -> . empty
    (81) empty -> .

    ELSEIF          shift and go to state 168
    ELSE            shift and go to state 169
    END             reduce using rule 81 (empty -> .)

    varianteIf                     shift and go to state 167
    empty                          shift and go to state 170

state 159

    (70) sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER . END

    END             shift and go to state 171


state 160

    (71) parametrosF -> inicializacionFor END comparacion END VARIABLE . increDecre
    (76) increDecre -> . INCREMENTO
    (77) increDecre -> . DECREMENTO

    INCREMENTO      shift and go to state 173
    DECREMENTO      shift and go to state 174

    increDecre                     shift and go to state 172

state 161

    (78) sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER . END

    END             shift and go to state 175


state 162

    (79) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion . PDER END

    PDER            shift and go to state 176


state 163

    (11) funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo . LDER

    LDER            shift and go to state 177


state 164

    (10) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN . valor END LDER
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE

    ENTERO          shift and go to state 25
    VARIABLE        shift and go to state 50

    valor                          shift and go to state 178

state 165

    (40) remove -> VARIABLE POINT REMOVE PIZQ valor PDER .

    END             reduce using rule 40 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)


state 166

    (39) add -> VARIABLE POINT ADD PIZQ valor PDER .

    END             reduce using rule 39 (add -> VARIABLE POINT ADD PIZQ valor PDER .)


state 167

    (65) sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf . END

    END             shift and go to state 179


state 168

    (66) varianteIf -> ELSEIF . PIZQ comparacion PDER LIZQ algoritmo LDER
    (68) varianteIf -> ELSEIF . PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf

    PIZQ            shift and go to state 180


state 169

    (67) varianteIf -> ELSE . LIZQ algoritmo LDER

    LIZQ            shift and go to state 181


state 170

    (69) varianteIf -> empty .

    END             reduce using rule 69 (varianteIf -> empty .)


state 171

    (70) sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER END .

    $end            reduce using rule 70 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER END .)
    LDER            reduce using rule 70 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER END .)
    RETURN          reduce using rule 70 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER END .)


state 172

    (71) parametrosF -> inicializacionFor END comparacion END VARIABLE increDecre .

    PDER            reduce using rule 71 (parametrosF -> inicializacionFor END comparacion END VARIABLE increDecre .)


state 173

    (76) increDecre -> INCREMENTO .

    PDER            reduce using rule 76 (increDecre -> INCREMENTO .)


state 174

    (77) increDecre -> DECREMENTO .

    PDER            reduce using rule 77 (increDecre -> DECREMENTO .)


state 175

    (78) sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END .

    $end            reduce using rule 78 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END .)
    LDER            reduce using rule 78 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END .)
    RETURN          reduce using rule 78 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END .)


state 176

    (79) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER . END

    END             shift and go to state 182


state 177

    (11) funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER .

    $end            reduce using rule 11 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER .)
    LDER            reduce using rule 11 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER .)
    RETURN          reduce using rule 11 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER .)


state 178

    (10) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor . END LDER

    END             shift and go to state 183


state 179

    (65) sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END .

    $end            reduce using rule 65 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END .)
    LDER            reduce using rule 65 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END .)
    RETURN          reduce using rule 65 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END .)


state 180

    (66) varianteIf -> ELSEIF PIZQ . comparacion PDER LIZQ algoritmo LDER
    (68) varianteIf -> ELSEIF PIZQ . comparacion PDER LIZQ algoritmo LDER varianteIf
    (45) comparacion -> . expresion operadorComp expresion
    (34) expresion -> . valor
    (44) expresion -> . valor operadorMat expresion
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE

    ENTERO          shift and go to state 25
    VARIABLE        shift and go to state 50

    comparacion                    shift and go to state 184
    expresion                      shift and go to state 75
    valor                          shift and go to state 14

state 181

    (67) varianteIf -> ELSE LIZQ . algoritmo LDER
    (1) algoritmo -> . imprimir
    (2) algoritmo -> . asignacion
    (3) algoritmo -> . expresion END
    (4) algoritmo -> . comparacion END
    (5) algoritmo -> . sentenciaIf
    (6) algoritmo -> . sentenciaFOR
    (7) algoritmo -> . sentenciaWhile
    (8) algoritmo -> . input
    (9) algoritmo -> . funciones
    (32) imprimir -> . PRINT PIZQ opstring PDER END
    (12) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (13) asignacion -> . VARIABLE IGUAL expresiones END
    (34) expresion -> . valor
    (44) expresion -> . valor operadorMat expresion
    (45) comparacion -> . expresion operadorComp expresion
    (65) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END
    (70) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER END
    (78) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END
    (79) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (33) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (10) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER
    (11) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER
    (57) tipo -> . VAR
    (58) tipo -> . INT
    (59) tipo -> . BOOL
    (60) tipo -> . DOUBLE
    (61) tipo -> . VOID
    (62) tipo -> . STR
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE

    PRINT           shift and go to state 11
    VARIABLE        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    DO              shift and go to state 18
    VOID            shift and go to state 19
    VAR             shift and go to state 20
    INT             shift and go to state 21
    BOOL            shift and go to state 22
    DOUBLE          shift and go to state 23
    STR             shift and go to state 24
    ENTERO          shift and go to state 25

    algoritmo                      shift and go to state 185
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    expresion                      shift and go to state 4
    comparacion                    shift and go to state 5
    sentenciaIf                    shift and go to state 6
    sentenciaFOR                   shift and go to state 7
    sentenciaWhile                 shift and go to state 8
    input                          shift and go to state 9
    funciones                      shift and go to state 10
    tipo                           shift and go to state 12
    valor                          shift and go to state 14

state 182

    (79) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .

    $end            reduce using rule 79 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    LDER            reduce using rule 79 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    RETURN          reduce using rule 79 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)


state 183

    (10) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END . LDER

    LDER            shift and go to state 186


state 184

    (66) varianteIf -> ELSEIF PIZQ comparacion . PDER LIZQ algoritmo LDER
    (68) varianteIf -> ELSEIF PIZQ comparacion . PDER LIZQ algoritmo LDER varianteIf

    PDER            shift and go to state 187


state 185

    (67) varianteIf -> ELSE LIZQ algoritmo . LDER

    LDER            shift and go to state 188


state 186

    (10) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER .

    $end            reduce using rule 10 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER .)
    LDER            reduce using rule 10 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER .)
    RETURN          reduce using rule 10 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER .)


state 187

    (66) varianteIf -> ELSEIF PIZQ comparacion PDER . LIZQ algoritmo LDER
    (68) varianteIf -> ELSEIF PIZQ comparacion PDER . LIZQ algoritmo LDER varianteIf

    LIZQ            shift and go to state 189


state 188

    (67) varianteIf -> ELSE LIZQ algoritmo LDER .

    END             reduce using rule 67 (varianteIf -> ELSE LIZQ algoritmo LDER .)


state 189

    (66) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ . algoritmo LDER
    (68) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ . algoritmo LDER varianteIf
    (1) algoritmo -> . imprimir
    (2) algoritmo -> . asignacion
    (3) algoritmo -> . expresion END
    (4) algoritmo -> . comparacion END
    (5) algoritmo -> . sentenciaIf
    (6) algoritmo -> . sentenciaFOR
    (7) algoritmo -> . sentenciaWhile
    (8) algoritmo -> . input
    (9) algoritmo -> . funciones
    (32) imprimir -> . PRINT PIZQ opstring PDER END
    (12) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (13) asignacion -> . VARIABLE IGUAL expresiones END
    (34) expresion -> . valor
    (44) expresion -> . valor operadorMat expresion
    (45) comparacion -> . expresion operadorComp expresion
    (65) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END
    (70) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER END
    (78) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END
    (79) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (33) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (10) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER
    (11) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER
    (57) tipo -> . VAR
    (58) tipo -> . INT
    (59) tipo -> . BOOL
    (60) tipo -> . DOUBLE
    (61) tipo -> . VOID
    (62) tipo -> . STR
    (63) valor -> . ENTERO
    (64) valor -> . VARIABLE

    PRINT           shift and go to state 11
    VARIABLE        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    DO              shift and go to state 18
    VOID            shift and go to state 19
    VAR             shift and go to state 20
    INT             shift and go to state 21
    BOOL            shift and go to state 22
    DOUBLE          shift and go to state 23
    STR             shift and go to state 24
    ENTERO          shift and go to state 25

    comparacion                    shift and go to state 5
    algoritmo                      shift and go to state 190
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    expresion                      shift and go to state 4
    sentenciaIf                    shift and go to state 6
    sentenciaFOR                   shift and go to state 7
    sentenciaWhile                 shift and go to state 8
    input                          shift and go to state 9
    funciones                      shift and go to state 10
    tipo                           shift and go to state 12
    valor                          shift and go to state 14

state 190

    (66) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo . LDER
    (68) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo . LDER varianteIf

    LDER            shift and go to state 191


state 191

    (66) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .
    (68) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER . varianteIf
    (66) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
    (67) varianteIf -> . ELSE LIZQ algoritmo LDER
    (68) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (69) varianteIf -> . empty
    (81) empty -> .

  ! reduce/reduce conflict for END resolved using rule 66 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    END             reduce using rule 66 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    ELSEIF          shift and go to state 168
    ELSE            shift and go to state 169

  ! END             [ reduce using rule 81 (empty -> .) ]

    varianteIf                     shift and go to state 192
    empty                          shift and go to state 170

state 192

    (68) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .

    END             reduce using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARIABLE in state 19 resolved as shift
WARNING: reduce/reduce conflict in state 57 resolved using rule (opstring -> VARIABLE)
WARNING: rejected rule (valor -> VARIABLE) in state 57
WARNING: reduce/reduce conflict in state 191 resolved using rule (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER)
WARNING: rejected rule (empty -> <empty>) in state 191
