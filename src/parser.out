Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    NEGACION
    SLICE

Grammar

Rule 0     S' -> codigo
Rule 1     codigo -> algoritmo
Rule 2     codigo -> algoritmo codigo
Rule 3     algoritmo -> imprimir
Rule 4     algoritmo -> asignacion
Rule 5     algoritmo -> expresion END
Rule 6     algoritmo -> comparacion END
Rule 7     algoritmo -> sentenciaIf
Rule 8     algoritmo -> sentenciaFOR
Rule 9     algoritmo -> sentenciaWhile
Rule 10    algoritmo -> input
Rule 11    algoritmo -> funciones
Rule 12    funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
Rule 13    funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
Rule 14    asignacion -> tipo VARIABLE IGUAL expresiones END
Rule 15    asignacion -> VARIABLE IGUAL expresiones END
Rule 16    parametros -> empty
Rule 17    parametros -> tipo VARIABLE
Rule 18    parametros -> tipo VARIABLE COMA parametros
Rule 19    expresiones -> expresion
Rule 20    expresiones -> comparacion
Rule 21    expresiones -> BOOLEAN
Rule 22    expresiones -> opstring
Rule 23    expresiones -> indexacion
Rule 24    expresiones -> lista
Rule 25    expresiones -> conjuntos
Rule 26    expresiones -> first
Rule 27    expresiones -> last
Rule 28    expresiones -> length
Rule 29    expresiones -> remove
Rule 30    expresiones -> add
Rule 31    expresiones -> opLogicas
Rule 32    string -> STRING
Rule 33    opstring -> string
Rule 34    opstring -> VARIABLE
Rule 35    opstring -> string MAS opstring
Rule 36    opstring -> VARIABLE MAS opstring
Rule 37    imprimir -> PRINT PIZQ opstring PDER END
Rule 38    input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END
Rule 39    expresion -> valor
Rule 40    lista -> CIZQ elementos CDER
Rule 41    first -> VARIABLE POINT FIRST PIZQ PDER
Rule 42    last -> VARIABLE POINT LAST PIZQ PDER
Rule 43    length -> VARIABLE POINT LEN PIZQ PDER
Rule 44    add -> VARIABLE POINT ADD PIZQ valor PDER
Rule 45    remove -> VARIABLE POINT REMOVE PIZQ valor PDER
Rule 46    conjuntos -> LIZQ elementos LDER
Rule 47    elementos -> valor
Rule 48    elementos -> valor COMA elementos
Rule 49    opLogicas -> terminoLogico
Rule 50    opLogicas -> terminoLogico operadorLog terminoLogico
Rule 51    opLogicas -> terminoLogico operadorLog terminoLogico operadorLog opLogicas
Rule 52    terminoLogico -> VARIABLE
Rule 53    terminoLogico -> BOOLEAN
Rule 54    terminoLogico -> PIZQ comparacion PDER
Rule 55    expresion -> valor operadorMat expresion
Rule 56    comparacion -> expresion operadorComp expresion
Rule 57    operadorLog -> AND
Rule 58    operadorLog -> OR
Rule 59    operadorMat -> MAS
Rule 60    operadorMat -> RESTA
Rule 61    operadorMat -> PROD
Rule 62    operadorMat -> DIV
Rule 63    operadorMat -> MOD
Rule 64    operadorComp -> MAYOR
Rule 65    operadorComp -> MENOR
Rule 66    operadorComp -> MAYORIG
Rule 67    operadorComp -> MENORIG
Rule 68    operadorComp -> DIGUAL
Rule 69    operadorComp -> DIF
Rule 70    tipo -> VAR
Rule 71    tipo -> INT
Rule 72    tipo -> BOOL
Rule 73    tipo -> DOUBLE
Rule 74    tipo -> VOID
Rule 75    tipo -> STR
Rule 76    valor -> ENTERO
Rule 77    valor -> VARIABLE
Rule 78    sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
Rule 79    sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
Rule 80    varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
Rule 81    varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER
Rule 82    varianteIf -> ELSE LIZQ algoritmo LDER
Rule 83    varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
Rule 84    varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
Rule 85    varianteIf -> empty
Rule 86    sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
Rule 87    parametrosF -> inicializacionFor END comparacion END VARIABLE increDecre
Rule 88    parametrosF -> inicializacionFor END opLogicas END VARIABLE increDecre
Rule 89    parametrosF -> VARIABLE IN VARIABLE
Rule 90    inicializacionFor -> VARIABLE IGUAL ENTERO
Rule 91    inicializacionFor -> INT VARIABLE IGUAL ENTERO
Rule 92    inicializacionFor -> VAR VARIABLE IGUAL ENTERO
Rule 93    increDecre -> INCREMENTO
Rule 94    increDecre -> DECREMENTO
Rule 95    sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
Rule 96    sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
Rule 97    sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
Rule 98    sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
Rule 99    indexacion -> VARIABLE CIZQ valor CDER
Rule 100   empty -> <empty>

Terminals, with rules where they appear

ADD                  : 44
AND                  : 57
BOOL                 : 72
BOOLEAN              : 21 53
CDER                 : 40 99
CIZQ                 : 40 99
COMA                 : 18 48
DECREMENTO           : 94
DIF                  : 69
DIGUAL               : 68
DIV                  : 62
DO                   : 97 98
DOUBLE               : 73
ELSE                 : 82
ELSEIF               : 80 81 83 84
END                  : 5 6 12 14 15 37 38 87 87 88 88 97 98
ENTERO               : 76 90 91 92
FIRST                : 41
FOR                  : 86
IF                   : 78 79
IGUAL                : 14 15 38 90 91 92
IN                   : 89
INCREMENTO           : 93
INPUT                : 38
INT                  : 71 91
LAST                 : 42
LDER                 : 12 13 46 78 79 80 81 82 83 84 86 95 96 97 98
LEN                  : 43
LIZQ                 : 12 13 46 78 79 80 81 82 83 84 86 95 96 97 98
MAS                  : 35 36 59
MAYOR                : 64
MAYORIG              : 66
MENOR                : 65
MENORIG              : 67
MOD                  : 63
NEGACION             : 
OR                   : 58
PDER                 : 12 13 37 38 41 42 43 44 45 54 78 79 80 81 83 84 86 95 96 97 98
PIZQ                 : 12 13 37 38 41 42 43 44 45 54 78 79 80 81 83 84 86 95 96 97 98
POINT                : 41 42 43 44 45
PRINT                : 37
PROD                 : 61
REMOVE               : 45
RESTA                : 60
RETURN               : 12
SLICE                : 
STR                  : 75
STRING               : 32
VAR                  : 70 92
VARIABLE             : 12 13 14 15 17 18 34 36 38 41 42 43 44 45 52 77 87 88 89 89 90 91 92 99
VOID                 : 13 74
WHILE                : 95 96 97 98
error                : 

Nonterminals, with rules where they appear

add                  : 30
algoritmo            : 1 2 78 79 80 81 82 83 84 86 95 96 97 98
asignacion           : 4
codigo               : 2 12 13 0
comparacion          : 6 20 54 78 80 83 87 95 97
conjuntos            : 25
elementos            : 40 46 48
empty                : 16 85
expresion            : 5 12 19 55 56 56
expresiones          : 14 15
first                : 26
funciones            : 11
imprimir             : 3
increDecre           : 87 88
indexacion           : 23
inicializacionFor    : 87 88
input                : 10
last                 : 27
length               : 28
lista                : 24
opLogicas            : 31 51 79 81 84 88 96 98
operadorComp         : 56
operadorLog          : 50 51 51
operadorMat          : 55
opstring             : 22 35 36 37
parametros           : 12 13 18
parametrosF          : 86
remove               : 29
sentenciaFOR         : 8
sentenciaIf          : 7
sentenciaWhile       : 9
string               : 33 35
terminoLogico        : 49 50 50 51 51
tipo                 : 12 14 17 18 38
valor                : 39 44 45 47 48 55 99
varianteIf           : 78 79 83 84

Parsing method: LALR

state 0

    (0) S' -> . codigo
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (37) imprimir -> . PRINT PIZQ opstring PDER END
    (14) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (15) asignacion -> . VARIABLE IGUAL expresiones END
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (56) comparacion -> . expresion operadorComp expresion
    (78) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (79) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (86) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (95) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (96) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (97) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (98) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (38) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (13) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (70) tipo -> . VAR
    (71) tipo -> . INT
    (72) tipo -> . BOOL
    (73) tipo -> . DOUBLE
    (74) tipo -> . VOID
    (75) tipo -> . STR
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    PRINT           shift and go to state 12
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    VOID            shift and go to state 20
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    STR             shift and go to state 25
    ENTERO          shift and go to state 26

    codigo                         shift and go to state 1
    algoritmo                      shift and go to state 2
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    tipo                           shift and go to state 13
    valor                          shift and go to state 15

state 1

    (0) S' -> codigo .



state 2

    (1) codigo -> algoritmo .
    (2) codigo -> algoritmo . codigo
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (37) imprimir -> . PRINT PIZQ opstring PDER END
    (14) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (15) asignacion -> . VARIABLE IGUAL expresiones END
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (56) comparacion -> . expresion operadorComp expresion
    (78) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (79) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (86) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (95) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (96) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (97) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (98) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (38) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (13) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (70) tipo -> . VAR
    (71) tipo -> . INT
    (72) tipo -> . BOOL
    (73) tipo -> . DOUBLE
    (74) tipo -> . VOID
    (75) tipo -> . STR
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    $end            reduce using rule 1 (codigo -> algoritmo .)
    RETURN          reduce using rule 1 (codigo -> algoritmo .)
    LDER            reduce using rule 1 (codigo -> algoritmo .)
    PRINT           shift and go to state 12
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    VOID            shift and go to state 20
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    STR             shift and go to state 25
    ENTERO          shift and go to state 26

    algoritmo                      shift and go to state 2
    codigo                         shift and go to state 27
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    tipo                           shift and go to state 13
    valor                          shift and go to state 15

state 3

    (3) algoritmo -> imprimir .

    PRINT           reduce using rule 3 (algoritmo -> imprimir .)
    VARIABLE        reduce using rule 3 (algoritmo -> imprimir .)
    IF              reduce using rule 3 (algoritmo -> imprimir .)
    FOR             reduce using rule 3 (algoritmo -> imprimir .)
    WHILE           reduce using rule 3 (algoritmo -> imprimir .)
    DO              reduce using rule 3 (algoritmo -> imprimir .)
    VOID            reduce using rule 3 (algoritmo -> imprimir .)
    VAR             reduce using rule 3 (algoritmo -> imprimir .)
    INT             reduce using rule 3 (algoritmo -> imprimir .)
    BOOL            reduce using rule 3 (algoritmo -> imprimir .)
    DOUBLE          reduce using rule 3 (algoritmo -> imprimir .)
    STR             reduce using rule 3 (algoritmo -> imprimir .)
    ENTERO          reduce using rule 3 (algoritmo -> imprimir .)
    $end            reduce using rule 3 (algoritmo -> imprimir .)
    RETURN          reduce using rule 3 (algoritmo -> imprimir .)
    LDER            reduce using rule 3 (algoritmo -> imprimir .)


state 4

    (4) algoritmo -> asignacion .

    PRINT           reduce using rule 4 (algoritmo -> asignacion .)
    VARIABLE        reduce using rule 4 (algoritmo -> asignacion .)
    IF              reduce using rule 4 (algoritmo -> asignacion .)
    FOR             reduce using rule 4 (algoritmo -> asignacion .)
    WHILE           reduce using rule 4 (algoritmo -> asignacion .)
    DO              reduce using rule 4 (algoritmo -> asignacion .)
    VOID            reduce using rule 4 (algoritmo -> asignacion .)
    VAR             reduce using rule 4 (algoritmo -> asignacion .)
    INT             reduce using rule 4 (algoritmo -> asignacion .)
    BOOL            reduce using rule 4 (algoritmo -> asignacion .)
    DOUBLE          reduce using rule 4 (algoritmo -> asignacion .)
    STR             reduce using rule 4 (algoritmo -> asignacion .)
    ENTERO          reduce using rule 4 (algoritmo -> asignacion .)
    $end            reduce using rule 4 (algoritmo -> asignacion .)
    RETURN          reduce using rule 4 (algoritmo -> asignacion .)
    LDER            reduce using rule 4 (algoritmo -> asignacion .)


state 5

    (5) algoritmo -> expresion . END
    (56) comparacion -> expresion . operadorComp expresion
    (64) operadorComp -> . MAYOR
    (65) operadorComp -> . MENOR
    (66) operadorComp -> . MAYORIG
    (67) operadorComp -> . MENORIG
    (68) operadorComp -> . DIGUAL
    (69) operadorComp -> . DIF

    END             shift and go to state 28
    MAYOR           shift and go to state 30
    MENOR           shift and go to state 31
    MAYORIG         shift and go to state 32
    MENORIG         shift and go to state 33
    DIGUAL          shift and go to state 34
    DIF             shift and go to state 35

    operadorComp                   shift and go to state 29

state 6

    (6) algoritmo -> comparacion . END

    END             shift and go to state 36


state 7

    (7) algoritmo -> sentenciaIf .

    PRINT           reduce using rule 7 (algoritmo -> sentenciaIf .)
    VARIABLE        reduce using rule 7 (algoritmo -> sentenciaIf .)
    IF              reduce using rule 7 (algoritmo -> sentenciaIf .)
    FOR             reduce using rule 7 (algoritmo -> sentenciaIf .)
    WHILE           reduce using rule 7 (algoritmo -> sentenciaIf .)
    DO              reduce using rule 7 (algoritmo -> sentenciaIf .)
    VOID            reduce using rule 7 (algoritmo -> sentenciaIf .)
    VAR             reduce using rule 7 (algoritmo -> sentenciaIf .)
    INT             reduce using rule 7 (algoritmo -> sentenciaIf .)
    BOOL            reduce using rule 7 (algoritmo -> sentenciaIf .)
    DOUBLE          reduce using rule 7 (algoritmo -> sentenciaIf .)
    STR             reduce using rule 7 (algoritmo -> sentenciaIf .)
    ENTERO          reduce using rule 7 (algoritmo -> sentenciaIf .)
    $end            reduce using rule 7 (algoritmo -> sentenciaIf .)
    RETURN          reduce using rule 7 (algoritmo -> sentenciaIf .)
    LDER            reduce using rule 7 (algoritmo -> sentenciaIf .)


state 8

    (8) algoritmo -> sentenciaFOR .

    PRINT           reduce using rule 8 (algoritmo -> sentenciaFOR .)
    VARIABLE        reduce using rule 8 (algoritmo -> sentenciaFOR .)
    IF              reduce using rule 8 (algoritmo -> sentenciaFOR .)
    FOR             reduce using rule 8 (algoritmo -> sentenciaFOR .)
    WHILE           reduce using rule 8 (algoritmo -> sentenciaFOR .)
    DO              reduce using rule 8 (algoritmo -> sentenciaFOR .)
    VOID            reduce using rule 8 (algoritmo -> sentenciaFOR .)
    VAR             reduce using rule 8 (algoritmo -> sentenciaFOR .)
    INT             reduce using rule 8 (algoritmo -> sentenciaFOR .)
    BOOL            reduce using rule 8 (algoritmo -> sentenciaFOR .)
    DOUBLE          reduce using rule 8 (algoritmo -> sentenciaFOR .)
    STR             reduce using rule 8 (algoritmo -> sentenciaFOR .)
    ENTERO          reduce using rule 8 (algoritmo -> sentenciaFOR .)
    $end            reduce using rule 8 (algoritmo -> sentenciaFOR .)
    RETURN          reduce using rule 8 (algoritmo -> sentenciaFOR .)
    LDER            reduce using rule 8 (algoritmo -> sentenciaFOR .)


state 9

    (9) algoritmo -> sentenciaWhile .

    PRINT           reduce using rule 9 (algoritmo -> sentenciaWhile .)
    VARIABLE        reduce using rule 9 (algoritmo -> sentenciaWhile .)
    IF              reduce using rule 9 (algoritmo -> sentenciaWhile .)
    FOR             reduce using rule 9 (algoritmo -> sentenciaWhile .)
    WHILE           reduce using rule 9 (algoritmo -> sentenciaWhile .)
    DO              reduce using rule 9 (algoritmo -> sentenciaWhile .)
    VOID            reduce using rule 9 (algoritmo -> sentenciaWhile .)
    VAR             reduce using rule 9 (algoritmo -> sentenciaWhile .)
    INT             reduce using rule 9 (algoritmo -> sentenciaWhile .)
    BOOL            reduce using rule 9 (algoritmo -> sentenciaWhile .)
    DOUBLE          reduce using rule 9 (algoritmo -> sentenciaWhile .)
    STR             reduce using rule 9 (algoritmo -> sentenciaWhile .)
    ENTERO          reduce using rule 9 (algoritmo -> sentenciaWhile .)
    $end            reduce using rule 9 (algoritmo -> sentenciaWhile .)
    RETURN          reduce using rule 9 (algoritmo -> sentenciaWhile .)
    LDER            reduce using rule 9 (algoritmo -> sentenciaWhile .)


state 10

    (10) algoritmo -> input .

    PRINT           reduce using rule 10 (algoritmo -> input .)
    VARIABLE        reduce using rule 10 (algoritmo -> input .)
    IF              reduce using rule 10 (algoritmo -> input .)
    FOR             reduce using rule 10 (algoritmo -> input .)
    WHILE           reduce using rule 10 (algoritmo -> input .)
    DO              reduce using rule 10 (algoritmo -> input .)
    VOID            reduce using rule 10 (algoritmo -> input .)
    VAR             reduce using rule 10 (algoritmo -> input .)
    INT             reduce using rule 10 (algoritmo -> input .)
    BOOL            reduce using rule 10 (algoritmo -> input .)
    DOUBLE          reduce using rule 10 (algoritmo -> input .)
    STR             reduce using rule 10 (algoritmo -> input .)
    ENTERO          reduce using rule 10 (algoritmo -> input .)
    $end            reduce using rule 10 (algoritmo -> input .)
    RETURN          reduce using rule 10 (algoritmo -> input .)
    LDER            reduce using rule 10 (algoritmo -> input .)


state 11

    (11) algoritmo -> funciones .

    PRINT           reduce using rule 11 (algoritmo -> funciones .)
    VARIABLE        reduce using rule 11 (algoritmo -> funciones .)
    IF              reduce using rule 11 (algoritmo -> funciones .)
    FOR             reduce using rule 11 (algoritmo -> funciones .)
    WHILE           reduce using rule 11 (algoritmo -> funciones .)
    DO              reduce using rule 11 (algoritmo -> funciones .)
    VOID            reduce using rule 11 (algoritmo -> funciones .)
    VAR             reduce using rule 11 (algoritmo -> funciones .)
    INT             reduce using rule 11 (algoritmo -> funciones .)
    BOOL            reduce using rule 11 (algoritmo -> funciones .)
    DOUBLE          reduce using rule 11 (algoritmo -> funciones .)
    STR             reduce using rule 11 (algoritmo -> funciones .)
    ENTERO          reduce using rule 11 (algoritmo -> funciones .)
    $end            reduce using rule 11 (algoritmo -> funciones .)
    RETURN          reduce using rule 11 (algoritmo -> funciones .)
    LDER            reduce using rule 11 (algoritmo -> funciones .)


state 12

    (37) imprimir -> PRINT . PIZQ opstring PDER END

    PIZQ            shift and go to state 37


state 13

    (14) asignacion -> tipo . VARIABLE IGUAL expresiones END
    (38) input -> tipo . VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> tipo . VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER

    VARIABLE        shift and go to state 38


state 14

    (15) asignacion -> VARIABLE . IGUAL expresiones END
    (77) valor -> VARIABLE .

    IGUAL           shift and go to state 39
    MAS             reduce using rule 77 (valor -> VARIABLE .)
    RESTA           reduce using rule 77 (valor -> VARIABLE .)
    PROD            reduce using rule 77 (valor -> VARIABLE .)
    DIV             reduce using rule 77 (valor -> VARIABLE .)
    MOD             reduce using rule 77 (valor -> VARIABLE .)
    END             reduce using rule 77 (valor -> VARIABLE .)
    MAYOR           reduce using rule 77 (valor -> VARIABLE .)
    MENOR           reduce using rule 77 (valor -> VARIABLE .)
    MAYORIG         reduce using rule 77 (valor -> VARIABLE .)
    MENORIG         reduce using rule 77 (valor -> VARIABLE .)
    DIGUAL          reduce using rule 77 (valor -> VARIABLE .)
    DIF             reduce using rule 77 (valor -> VARIABLE .)


state 15

    (39) expresion -> valor .
    (55) expresion -> valor . operadorMat expresion
    (59) operadorMat -> . MAS
    (60) operadorMat -> . RESTA
    (61) operadorMat -> . PROD
    (62) operadorMat -> . DIV
    (63) operadorMat -> . MOD

    END             reduce using rule 39 (expresion -> valor .)
    MAYOR           reduce using rule 39 (expresion -> valor .)
    MENOR           reduce using rule 39 (expresion -> valor .)
    MAYORIG         reduce using rule 39 (expresion -> valor .)
    MENORIG         reduce using rule 39 (expresion -> valor .)
    DIGUAL          reduce using rule 39 (expresion -> valor .)
    DIF             reduce using rule 39 (expresion -> valor .)
    PDER            reduce using rule 39 (expresion -> valor .)
    MAS             shift and go to state 41
    RESTA           shift and go to state 42
    PROD            shift and go to state 43
    DIV             shift and go to state 44
    MOD             shift and go to state 45

    operadorMat                    shift and go to state 40

state 16

    (78) sentenciaIf -> IF . PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (79) sentenciaIf -> IF . PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf

    PIZQ            shift and go to state 46


state 17

    (86) sentenciaFOR -> FOR . PIZQ parametrosF PDER LIZQ algoritmo LDER

    PIZQ            shift and go to state 47


state 18

    (95) sentenciaWhile -> WHILE . PIZQ comparacion PDER LIZQ algoritmo LDER
    (96) sentenciaWhile -> WHILE . PIZQ opLogicas PDER LIZQ algoritmo LDER

    PIZQ            shift and go to state 48


state 19

    (97) sentenciaWhile -> DO . LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (98) sentenciaWhile -> DO . LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END

    LIZQ            shift and go to state 49


state 20

    (13) funciones -> VOID . VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (74) tipo -> VOID .

  ! shift/reduce conflict for VARIABLE resolved as shift
    VARIABLE        shift and go to state 50

  ! VARIABLE        [ reduce using rule 74 (tipo -> VOID .) ]


state 21

    (70) tipo -> VAR .

    VARIABLE        reduce using rule 70 (tipo -> VAR .)


state 22

    (71) tipo -> INT .

    VARIABLE        reduce using rule 71 (tipo -> INT .)


state 23

    (72) tipo -> BOOL .

    VARIABLE        reduce using rule 72 (tipo -> BOOL .)


state 24

    (73) tipo -> DOUBLE .

    VARIABLE        reduce using rule 73 (tipo -> DOUBLE .)


state 25

    (75) tipo -> STR .

    VARIABLE        reduce using rule 75 (tipo -> STR .)


state 26

    (76) valor -> ENTERO .

    MAS             reduce using rule 76 (valor -> ENTERO .)
    RESTA           reduce using rule 76 (valor -> ENTERO .)
    PROD            reduce using rule 76 (valor -> ENTERO .)
    DIV             reduce using rule 76 (valor -> ENTERO .)
    MOD             reduce using rule 76 (valor -> ENTERO .)
    END             reduce using rule 76 (valor -> ENTERO .)
    MAYOR           reduce using rule 76 (valor -> ENTERO .)
    MENOR           reduce using rule 76 (valor -> ENTERO .)
    MAYORIG         reduce using rule 76 (valor -> ENTERO .)
    MENORIG         reduce using rule 76 (valor -> ENTERO .)
    DIGUAL          reduce using rule 76 (valor -> ENTERO .)
    DIF             reduce using rule 76 (valor -> ENTERO .)
    PDER            reduce using rule 76 (valor -> ENTERO .)
    COMA            reduce using rule 76 (valor -> ENTERO .)
    CDER            reduce using rule 76 (valor -> ENTERO .)
    LDER            reduce using rule 76 (valor -> ENTERO .)


state 27

    (2) codigo -> algoritmo codigo .

    $end            reduce using rule 2 (codigo -> algoritmo codigo .)
    RETURN          reduce using rule 2 (codigo -> algoritmo codigo .)
    LDER            reduce using rule 2 (codigo -> algoritmo codigo .)


state 28

    (5) algoritmo -> expresion END .

    PRINT           reduce using rule 5 (algoritmo -> expresion END .)
    VARIABLE        reduce using rule 5 (algoritmo -> expresion END .)
    IF              reduce using rule 5 (algoritmo -> expresion END .)
    FOR             reduce using rule 5 (algoritmo -> expresion END .)
    WHILE           reduce using rule 5 (algoritmo -> expresion END .)
    DO              reduce using rule 5 (algoritmo -> expresion END .)
    VOID            reduce using rule 5 (algoritmo -> expresion END .)
    VAR             reduce using rule 5 (algoritmo -> expresion END .)
    INT             reduce using rule 5 (algoritmo -> expresion END .)
    BOOL            reduce using rule 5 (algoritmo -> expresion END .)
    DOUBLE          reduce using rule 5 (algoritmo -> expresion END .)
    STR             reduce using rule 5 (algoritmo -> expresion END .)
    ENTERO          reduce using rule 5 (algoritmo -> expresion END .)
    $end            reduce using rule 5 (algoritmo -> expresion END .)
    RETURN          reduce using rule 5 (algoritmo -> expresion END .)
    LDER            reduce using rule 5 (algoritmo -> expresion END .)


state 29

    (56) comparacion -> expresion operadorComp . expresion
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    expresion                      shift and go to state 51
    valor                          shift and go to state 15

state 30

    (64) operadorComp -> MAYOR .

    ENTERO          reduce using rule 64 (operadorComp -> MAYOR .)
    VARIABLE        reduce using rule 64 (operadorComp -> MAYOR .)


state 31

    (65) operadorComp -> MENOR .

    ENTERO          reduce using rule 65 (operadorComp -> MENOR .)
    VARIABLE        reduce using rule 65 (operadorComp -> MENOR .)


state 32

    (66) operadorComp -> MAYORIG .

    ENTERO          reduce using rule 66 (operadorComp -> MAYORIG .)
    VARIABLE        reduce using rule 66 (operadorComp -> MAYORIG .)


state 33

    (67) operadorComp -> MENORIG .

    ENTERO          reduce using rule 67 (operadorComp -> MENORIG .)
    VARIABLE        reduce using rule 67 (operadorComp -> MENORIG .)


state 34

    (68) operadorComp -> DIGUAL .

    ENTERO          reduce using rule 68 (operadorComp -> DIGUAL .)
    VARIABLE        reduce using rule 68 (operadorComp -> DIGUAL .)


state 35

    (69) operadorComp -> DIF .

    ENTERO          reduce using rule 69 (operadorComp -> DIF .)
    VARIABLE        reduce using rule 69 (operadorComp -> DIF .)


state 36

    (6) algoritmo -> comparacion END .

    PRINT           reduce using rule 6 (algoritmo -> comparacion END .)
    VARIABLE        reduce using rule 6 (algoritmo -> comparacion END .)
    IF              reduce using rule 6 (algoritmo -> comparacion END .)
    FOR             reduce using rule 6 (algoritmo -> comparacion END .)
    WHILE           reduce using rule 6 (algoritmo -> comparacion END .)
    DO              reduce using rule 6 (algoritmo -> comparacion END .)
    VOID            reduce using rule 6 (algoritmo -> comparacion END .)
    VAR             reduce using rule 6 (algoritmo -> comparacion END .)
    INT             reduce using rule 6 (algoritmo -> comparacion END .)
    BOOL            reduce using rule 6 (algoritmo -> comparacion END .)
    DOUBLE          reduce using rule 6 (algoritmo -> comparacion END .)
    STR             reduce using rule 6 (algoritmo -> comparacion END .)
    ENTERO          reduce using rule 6 (algoritmo -> comparacion END .)
    $end            reduce using rule 6 (algoritmo -> comparacion END .)
    RETURN          reduce using rule 6 (algoritmo -> comparacion END .)
    LDER            reduce using rule 6 (algoritmo -> comparacion END .)


state 37

    (37) imprimir -> PRINT PIZQ . opstring PDER END
    (33) opstring -> . string
    (34) opstring -> . VARIABLE
    (35) opstring -> . string MAS opstring
    (36) opstring -> . VARIABLE MAS opstring
    (32) string -> . STRING

    VARIABLE        shift and go to state 55
    STRING          shift and go to state 56

    opstring                       shift and go to state 53
    string                         shift and go to state 54

state 38

    (14) asignacion -> tipo VARIABLE . IGUAL expresiones END
    (38) input -> tipo VARIABLE . IGUAL INPUT PIZQ PDER END
    (12) funciones -> tipo VARIABLE . PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER

    IGUAL           shift and go to state 57
    PIZQ            shift and go to state 58


state 39

    (15) asignacion -> VARIABLE IGUAL . expresiones END
    (19) expresiones -> . expresion
    (20) expresiones -> . comparacion
    (21) expresiones -> . BOOLEAN
    (22) expresiones -> . opstring
    (23) expresiones -> . indexacion
    (24) expresiones -> . lista
    (25) expresiones -> . conjuntos
    (26) expresiones -> . first
    (27) expresiones -> . last
    (28) expresiones -> . length
    (29) expresiones -> . remove
    (30) expresiones -> . add
    (31) expresiones -> . opLogicas
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (56) comparacion -> . expresion operadorComp expresion
    (33) opstring -> . string
    (34) opstring -> . VARIABLE
    (35) opstring -> . string MAS opstring
    (36) opstring -> . VARIABLE MAS opstring
    (99) indexacion -> . VARIABLE CIZQ valor CDER
    (40) lista -> . CIZQ elementos CDER
    (46) conjuntos -> . LIZQ elementos LDER
    (41) first -> . VARIABLE POINT FIRST PIZQ PDER
    (42) last -> . VARIABLE POINT LAST PIZQ PDER
    (43) length -> . VARIABLE POINT LEN PIZQ PDER
    (45) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (44) add -> . VARIABLE POINT ADD PIZQ valor PDER
    (49) opLogicas -> . terminoLogico
    (50) opLogicas -> . terminoLogico operadorLog terminoLogico
    (51) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE
    (32) string -> . STRING
    (52) terminoLogico -> . VARIABLE
    (53) terminoLogico -> . BOOLEAN
    (54) terminoLogico -> . PIZQ comparacion PDER

    BOOLEAN         shift and go to state 63
    VARIABLE        shift and go to state 59
    CIZQ            shift and go to state 74
    LIZQ            shift and go to state 75
    ENTERO          shift and go to state 26
    STRING          shift and go to state 56
    PIZQ            shift and go to state 76

    expresiones                    shift and go to state 60
    expresion                      shift and go to state 61
    comparacion                    shift and go to state 62
    opstring                       shift and go to state 64
    indexacion                     shift and go to state 65
    lista                          shift and go to state 66
    conjuntos                      shift and go to state 67
    first                          shift and go to state 68
    last                           shift and go to state 69
    length                         shift and go to state 70
    remove                         shift and go to state 71
    add                            shift and go to state 72
    opLogicas                      shift and go to state 73
    valor                          shift and go to state 15
    string                         shift and go to state 54
    terminoLogico                  shift and go to state 77

state 40

    (55) expresion -> valor operadorMat . expresion
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    valor                          shift and go to state 15
    expresion                      shift and go to state 78

state 41

    (59) operadorMat -> MAS .

    ENTERO          reduce using rule 59 (operadorMat -> MAS .)
    VARIABLE        reduce using rule 59 (operadorMat -> MAS .)


state 42

    (60) operadorMat -> RESTA .

    ENTERO          reduce using rule 60 (operadorMat -> RESTA .)
    VARIABLE        reduce using rule 60 (operadorMat -> RESTA .)


state 43

    (61) operadorMat -> PROD .

    ENTERO          reduce using rule 61 (operadorMat -> PROD .)
    VARIABLE        reduce using rule 61 (operadorMat -> PROD .)


state 44

    (62) operadorMat -> DIV .

    ENTERO          reduce using rule 62 (operadorMat -> DIV .)
    VARIABLE        reduce using rule 62 (operadorMat -> DIV .)


state 45

    (63) operadorMat -> MOD .

    ENTERO          reduce using rule 63 (operadorMat -> MOD .)
    VARIABLE        reduce using rule 63 (operadorMat -> MOD .)


state 46

    (78) sentenciaIf -> IF PIZQ . comparacion PDER LIZQ algoritmo LDER varianteIf
    (79) sentenciaIf -> IF PIZQ . opLogicas PDER LIZQ algoritmo LDER varianteIf
    (56) comparacion -> . expresion operadorComp expresion
    (49) opLogicas -> . terminoLogico
    (50) opLogicas -> . terminoLogico operadorLog terminoLogico
    (51) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (52) terminoLogico -> . VARIABLE
    (53) terminoLogico -> . BOOLEAN
    (54) terminoLogico -> . PIZQ comparacion PDER
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    VARIABLE        shift and go to state 82
    BOOLEAN         shift and go to state 83
    PIZQ            shift and go to state 76
    ENTERO          shift and go to state 26

    comparacion                    shift and go to state 79
    opLogicas                      shift and go to state 80
    expresion                      shift and go to state 81
    terminoLogico                  shift and go to state 77
    valor                          shift and go to state 15

state 47

    (86) sentenciaFOR -> FOR PIZQ . parametrosF PDER LIZQ algoritmo LDER
    (87) parametrosF -> . inicializacionFor END comparacion END VARIABLE increDecre
    (88) parametrosF -> . inicializacionFor END opLogicas END VARIABLE increDecre
    (89) parametrosF -> . VARIABLE IN VARIABLE
    (90) inicializacionFor -> . VARIABLE IGUAL ENTERO
    (91) inicializacionFor -> . INT VARIABLE IGUAL ENTERO
    (92) inicializacionFor -> . VAR VARIABLE IGUAL ENTERO

    VARIABLE        shift and go to state 86
    INT             shift and go to state 87
    VAR             shift and go to state 88

    parametrosF                    shift and go to state 84
    inicializacionFor              shift and go to state 85

state 48

    (95) sentenciaWhile -> WHILE PIZQ . comparacion PDER LIZQ algoritmo LDER
    (96) sentenciaWhile -> WHILE PIZQ . opLogicas PDER LIZQ algoritmo LDER
    (56) comparacion -> . expresion operadorComp expresion
    (49) opLogicas -> . terminoLogico
    (50) opLogicas -> . terminoLogico operadorLog terminoLogico
    (51) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (52) terminoLogico -> . VARIABLE
    (53) terminoLogico -> . BOOLEAN
    (54) terminoLogico -> . PIZQ comparacion PDER
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    VARIABLE        shift and go to state 82
    BOOLEAN         shift and go to state 83
    PIZQ            shift and go to state 76
    ENTERO          shift and go to state 26

    comparacion                    shift and go to state 89
    opLogicas                      shift and go to state 90
    expresion                      shift and go to state 81
    terminoLogico                  shift and go to state 77
    valor                          shift and go to state 15

state 49

    (97) sentenciaWhile -> DO LIZQ . algoritmo LDER WHILE PIZQ comparacion PDER END
    (98) sentenciaWhile -> DO LIZQ . algoritmo LDER WHILE PIZQ opLogicas PDER END
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (37) imprimir -> . PRINT PIZQ opstring PDER END
    (14) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (15) asignacion -> . VARIABLE IGUAL expresiones END
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (56) comparacion -> . expresion operadorComp expresion
    (78) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (79) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (86) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (95) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (96) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (97) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (98) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (38) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (13) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (70) tipo -> . VAR
    (71) tipo -> . INT
    (72) tipo -> . BOOL
    (73) tipo -> . DOUBLE
    (74) tipo -> . VOID
    (75) tipo -> . STR
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    PRINT           shift and go to state 12
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    VOID            shift and go to state 20
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    STR             shift and go to state 25
    ENTERO          shift and go to state 26

    algoritmo                      shift and go to state 91
    comparacion                    shift and go to state 6
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    tipo                           shift and go to state 13
    valor                          shift and go to state 15

state 50

    (13) funciones -> VOID VARIABLE . PIZQ parametros PDER LIZQ codigo LDER

    PIZQ            shift and go to state 92


state 51

    (56) comparacion -> expresion operadorComp expresion .

    END             reduce using rule 56 (comparacion -> expresion operadorComp expresion .)
    PDER            reduce using rule 56 (comparacion -> expresion operadorComp expresion .)


state 52

    (77) valor -> VARIABLE .

    MAS             reduce using rule 77 (valor -> VARIABLE .)
    RESTA           reduce using rule 77 (valor -> VARIABLE .)
    PROD            reduce using rule 77 (valor -> VARIABLE .)
    DIV             reduce using rule 77 (valor -> VARIABLE .)
    MOD             reduce using rule 77 (valor -> VARIABLE .)
    END             reduce using rule 77 (valor -> VARIABLE .)
    PDER            reduce using rule 77 (valor -> VARIABLE .)
    MAYOR           reduce using rule 77 (valor -> VARIABLE .)
    MENOR           reduce using rule 77 (valor -> VARIABLE .)
    MAYORIG         reduce using rule 77 (valor -> VARIABLE .)
    MENORIG         reduce using rule 77 (valor -> VARIABLE .)
    DIGUAL          reduce using rule 77 (valor -> VARIABLE .)
    DIF             reduce using rule 77 (valor -> VARIABLE .)
    COMA            reduce using rule 77 (valor -> VARIABLE .)
    CDER            reduce using rule 77 (valor -> VARIABLE .)
    LDER            reduce using rule 77 (valor -> VARIABLE .)


state 53

    (37) imprimir -> PRINT PIZQ opstring . PDER END

    PDER            shift and go to state 93


state 54

    (33) opstring -> string .
    (35) opstring -> string . MAS opstring

    PDER            reduce using rule 33 (opstring -> string .)
    END             reduce using rule 33 (opstring -> string .)
    MAS             shift and go to state 94


state 55

    (34) opstring -> VARIABLE .
    (36) opstring -> VARIABLE . MAS opstring

    PDER            reduce using rule 34 (opstring -> VARIABLE .)
    END             reduce using rule 34 (opstring -> VARIABLE .)
    MAS             shift and go to state 95


state 56

    (32) string -> STRING .

    MAS             reduce using rule 32 (string -> STRING .)
    PDER            reduce using rule 32 (string -> STRING .)
    END             reduce using rule 32 (string -> STRING .)


state 57

    (14) asignacion -> tipo VARIABLE IGUAL . expresiones END
    (38) input -> tipo VARIABLE IGUAL . INPUT PIZQ PDER END
    (19) expresiones -> . expresion
    (20) expresiones -> . comparacion
    (21) expresiones -> . BOOLEAN
    (22) expresiones -> . opstring
    (23) expresiones -> . indexacion
    (24) expresiones -> . lista
    (25) expresiones -> . conjuntos
    (26) expresiones -> . first
    (27) expresiones -> . last
    (28) expresiones -> . length
    (29) expresiones -> . remove
    (30) expresiones -> . add
    (31) expresiones -> . opLogicas
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (56) comparacion -> . expresion operadorComp expresion
    (33) opstring -> . string
    (34) opstring -> . VARIABLE
    (35) opstring -> . string MAS opstring
    (36) opstring -> . VARIABLE MAS opstring
    (99) indexacion -> . VARIABLE CIZQ valor CDER
    (40) lista -> . CIZQ elementos CDER
    (46) conjuntos -> . LIZQ elementos LDER
    (41) first -> . VARIABLE POINT FIRST PIZQ PDER
    (42) last -> . VARIABLE POINT LAST PIZQ PDER
    (43) length -> . VARIABLE POINT LEN PIZQ PDER
    (45) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (44) add -> . VARIABLE POINT ADD PIZQ valor PDER
    (49) opLogicas -> . terminoLogico
    (50) opLogicas -> . terminoLogico operadorLog terminoLogico
    (51) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE
    (32) string -> . STRING
    (52) terminoLogico -> . VARIABLE
    (53) terminoLogico -> . BOOLEAN
    (54) terminoLogico -> . PIZQ comparacion PDER

    INPUT           shift and go to state 97
    BOOLEAN         shift and go to state 63
    VARIABLE        shift and go to state 59
    CIZQ            shift and go to state 74
    LIZQ            shift and go to state 75
    ENTERO          shift and go to state 26
    STRING          shift and go to state 56
    PIZQ            shift and go to state 76

    expresiones                    shift and go to state 96
    expresion                      shift and go to state 61
    comparacion                    shift and go to state 62
    opstring                       shift and go to state 64
    indexacion                     shift and go to state 65
    lista                          shift and go to state 66
    conjuntos                      shift and go to state 67
    first                          shift and go to state 68
    last                           shift and go to state 69
    length                         shift and go to state 70
    remove                         shift and go to state 71
    add                            shift and go to state 72
    opLogicas                      shift and go to state 73
    valor                          shift and go to state 15
    string                         shift and go to state 54
    terminoLogico                  shift and go to state 77

state 58

    (12) funciones -> tipo VARIABLE PIZQ . parametros PDER LIZQ codigo RETURN expresion END LDER
    (16) parametros -> . empty
    (17) parametros -> . tipo VARIABLE
    (18) parametros -> . tipo VARIABLE COMA parametros
    (100) empty -> .
    (70) tipo -> . VAR
    (71) tipo -> . INT
    (72) tipo -> . BOOL
    (73) tipo -> . DOUBLE
    (74) tipo -> . VOID
    (75) tipo -> . STR

    PDER            reduce using rule 100 (empty -> .)
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    VOID            shift and go to state 101
    STR             shift and go to state 25

    tipo                           shift and go to state 98
    parametros                     shift and go to state 99
    empty                          shift and go to state 100

state 59

    (34) opstring -> VARIABLE .
    (36) opstring -> VARIABLE . MAS opstring
    (99) indexacion -> VARIABLE . CIZQ valor CDER
    (41) first -> VARIABLE . POINT FIRST PIZQ PDER
    (42) last -> VARIABLE . POINT LAST PIZQ PDER
    (43) length -> VARIABLE . POINT LEN PIZQ PDER
    (45) remove -> VARIABLE . POINT REMOVE PIZQ valor PDER
    (44) add -> VARIABLE . POINT ADD PIZQ valor PDER
    (77) valor -> VARIABLE .
    (52) terminoLogico -> VARIABLE .

  ! shift/reduce conflict for MAS resolved as shift
  ! reduce/reduce conflict for END resolved using rule 34 (opstring -> VARIABLE .)
  ! reduce/reduce conflict for END resolved using rule 34 (opstring -> VARIABLE .)
    END             reduce using rule 34 (opstring -> VARIABLE .)
    MAS             shift and go to state 95
    CIZQ            shift and go to state 102
    POINT           shift and go to state 103
    RESTA           reduce using rule 77 (valor -> VARIABLE .)
    PROD            reduce using rule 77 (valor -> VARIABLE .)
    DIV             reduce using rule 77 (valor -> VARIABLE .)
    MOD             reduce using rule 77 (valor -> VARIABLE .)
    MAYOR           reduce using rule 77 (valor -> VARIABLE .)
    MENOR           reduce using rule 77 (valor -> VARIABLE .)
    MAYORIG         reduce using rule 77 (valor -> VARIABLE .)
    MENORIG         reduce using rule 77 (valor -> VARIABLE .)
    DIGUAL          reduce using rule 77 (valor -> VARIABLE .)
    DIF             reduce using rule 77 (valor -> VARIABLE .)
    AND             reduce using rule 52 (terminoLogico -> VARIABLE .)
    OR              reduce using rule 52 (terminoLogico -> VARIABLE .)

  ! MAS             [ reduce using rule 77 (valor -> VARIABLE .) ]
  ! END             [ reduce using rule 77 (valor -> VARIABLE .) ]
  ! END             [ reduce using rule 52 (terminoLogico -> VARIABLE .) ]


state 60

    (15) asignacion -> VARIABLE IGUAL expresiones . END

    END             shift and go to state 104


state 61

    (19) expresiones -> expresion .
    (56) comparacion -> expresion . operadorComp expresion
    (64) operadorComp -> . MAYOR
    (65) operadorComp -> . MENOR
    (66) operadorComp -> . MAYORIG
    (67) operadorComp -> . MENORIG
    (68) operadorComp -> . DIGUAL
    (69) operadorComp -> . DIF

    END             reduce using rule 19 (expresiones -> expresion .)
    MAYOR           shift and go to state 30
    MENOR           shift and go to state 31
    MAYORIG         shift and go to state 32
    MENORIG         shift and go to state 33
    DIGUAL          shift and go to state 34
    DIF             shift and go to state 35

    operadorComp                   shift and go to state 29

state 62

    (20) expresiones -> comparacion .

    END             reduce using rule 20 (expresiones -> comparacion .)


state 63

    (21) expresiones -> BOOLEAN .
    (53) terminoLogico -> BOOLEAN .

  ! reduce/reduce conflict for END resolved using rule 21 (expresiones -> BOOLEAN .)
    END             reduce using rule 21 (expresiones -> BOOLEAN .)
    AND             reduce using rule 53 (terminoLogico -> BOOLEAN .)
    OR              reduce using rule 53 (terminoLogico -> BOOLEAN .)

  ! END             [ reduce using rule 53 (terminoLogico -> BOOLEAN .) ]


state 64

    (22) expresiones -> opstring .

    END             reduce using rule 22 (expresiones -> opstring .)


state 65

    (23) expresiones -> indexacion .

    END             reduce using rule 23 (expresiones -> indexacion .)


state 66

    (24) expresiones -> lista .

    END             reduce using rule 24 (expresiones -> lista .)


state 67

    (25) expresiones -> conjuntos .

    END             reduce using rule 25 (expresiones -> conjuntos .)


state 68

    (26) expresiones -> first .

    END             reduce using rule 26 (expresiones -> first .)


state 69

    (27) expresiones -> last .

    END             reduce using rule 27 (expresiones -> last .)


state 70

    (28) expresiones -> length .

    END             reduce using rule 28 (expresiones -> length .)


state 71

    (29) expresiones -> remove .

    END             reduce using rule 29 (expresiones -> remove .)


state 72

    (30) expresiones -> add .

    END             reduce using rule 30 (expresiones -> add .)


state 73

    (31) expresiones -> opLogicas .

    END             reduce using rule 31 (expresiones -> opLogicas .)


state 74

    (40) lista -> CIZQ . elementos CDER
    (47) elementos -> . valor
    (48) elementos -> . valor COMA elementos
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    elementos                      shift and go to state 105
    valor                          shift and go to state 106

state 75

    (46) conjuntos -> LIZQ . elementos LDER
    (47) elementos -> . valor
    (48) elementos -> . valor COMA elementos
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    elementos                      shift and go to state 107
    valor                          shift and go to state 106

state 76

    (54) terminoLogico -> PIZQ . comparacion PDER
    (56) comparacion -> . expresion operadorComp expresion
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    comparacion                    shift and go to state 108
    expresion                      shift and go to state 81
    valor                          shift and go to state 15

state 77

    (49) opLogicas -> terminoLogico .
    (50) opLogicas -> terminoLogico . operadorLog terminoLogico
    (51) opLogicas -> terminoLogico . operadorLog terminoLogico operadorLog opLogicas
    (57) operadorLog -> . AND
    (58) operadorLog -> . OR

    END             reduce using rule 49 (opLogicas -> terminoLogico .)
    PDER            reduce using rule 49 (opLogicas -> terminoLogico .)
    AND             shift and go to state 110
    OR              shift and go to state 111

    operadorLog                    shift and go to state 109

state 78

    (55) expresion -> valor operadorMat expresion .

    END             reduce using rule 55 (expresion -> valor operadorMat expresion .)
    MAYOR           reduce using rule 55 (expresion -> valor operadorMat expresion .)
    MENOR           reduce using rule 55 (expresion -> valor operadorMat expresion .)
    MAYORIG         reduce using rule 55 (expresion -> valor operadorMat expresion .)
    MENORIG         reduce using rule 55 (expresion -> valor operadorMat expresion .)
    DIGUAL          reduce using rule 55 (expresion -> valor operadorMat expresion .)
    DIF             reduce using rule 55 (expresion -> valor operadorMat expresion .)
    PDER            reduce using rule 55 (expresion -> valor operadorMat expresion .)


state 79

    (78) sentenciaIf -> IF PIZQ comparacion . PDER LIZQ algoritmo LDER varianteIf

    PDER            shift and go to state 112


state 80

    (79) sentenciaIf -> IF PIZQ opLogicas . PDER LIZQ algoritmo LDER varianteIf

    PDER            shift and go to state 113


state 81

    (56) comparacion -> expresion . operadorComp expresion
    (64) operadorComp -> . MAYOR
    (65) operadorComp -> . MENOR
    (66) operadorComp -> . MAYORIG
    (67) operadorComp -> . MENORIG
    (68) operadorComp -> . DIGUAL
    (69) operadorComp -> . DIF

    MAYOR           shift and go to state 30
    MENOR           shift and go to state 31
    MAYORIG         shift and go to state 32
    MENORIG         shift and go to state 33
    DIGUAL          shift and go to state 34
    DIF             shift and go to state 35

    operadorComp                   shift and go to state 29

state 82

    (52) terminoLogico -> VARIABLE .
    (77) valor -> VARIABLE .

    AND             reduce using rule 52 (terminoLogico -> VARIABLE .)
    OR              reduce using rule 52 (terminoLogico -> VARIABLE .)
    PDER            reduce using rule 52 (terminoLogico -> VARIABLE .)
    END             reduce using rule 52 (terminoLogico -> VARIABLE .)
    MAS             reduce using rule 77 (valor -> VARIABLE .)
    RESTA           reduce using rule 77 (valor -> VARIABLE .)
    PROD            reduce using rule 77 (valor -> VARIABLE .)
    DIV             reduce using rule 77 (valor -> VARIABLE .)
    MOD             reduce using rule 77 (valor -> VARIABLE .)
    MAYOR           reduce using rule 77 (valor -> VARIABLE .)
    MENOR           reduce using rule 77 (valor -> VARIABLE .)
    MAYORIG         reduce using rule 77 (valor -> VARIABLE .)
    MENORIG         reduce using rule 77 (valor -> VARIABLE .)
    DIGUAL          reduce using rule 77 (valor -> VARIABLE .)
    DIF             reduce using rule 77 (valor -> VARIABLE .)


state 83

    (53) terminoLogico -> BOOLEAN .

    AND             reduce using rule 53 (terminoLogico -> BOOLEAN .)
    OR              reduce using rule 53 (terminoLogico -> BOOLEAN .)
    PDER            reduce using rule 53 (terminoLogico -> BOOLEAN .)
    END             reduce using rule 53 (terminoLogico -> BOOLEAN .)


state 84

    (86) sentenciaFOR -> FOR PIZQ parametrosF . PDER LIZQ algoritmo LDER

    PDER            shift and go to state 114


state 85

    (87) parametrosF -> inicializacionFor . END comparacion END VARIABLE increDecre
    (88) parametrosF -> inicializacionFor . END opLogicas END VARIABLE increDecre

    END             shift and go to state 115


state 86

    (89) parametrosF -> VARIABLE . IN VARIABLE
    (90) inicializacionFor -> VARIABLE . IGUAL ENTERO

    IN              shift and go to state 116
    IGUAL           shift and go to state 117


state 87

    (91) inicializacionFor -> INT . VARIABLE IGUAL ENTERO

    VARIABLE        shift and go to state 118


state 88

    (92) inicializacionFor -> VAR . VARIABLE IGUAL ENTERO

    VARIABLE        shift and go to state 119


state 89

    (95) sentenciaWhile -> WHILE PIZQ comparacion . PDER LIZQ algoritmo LDER

    PDER            shift and go to state 120


state 90

    (96) sentenciaWhile -> WHILE PIZQ opLogicas . PDER LIZQ algoritmo LDER

    PDER            shift and go to state 121


state 91

    (97) sentenciaWhile -> DO LIZQ algoritmo . LDER WHILE PIZQ comparacion PDER END
    (98) sentenciaWhile -> DO LIZQ algoritmo . LDER WHILE PIZQ opLogicas PDER END

    LDER            shift and go to state 122


state 92

    (13) funciones -> VOID VARIABLE PIZQ . parametros PDER LIZQ codigo LDER
    (16) parametros -> . empty
    (17) parametros -> . tipo VARIABLE
    (18) parametros -> . tipo VARIABLE COMA parametros
    (100) empty -> .
    (70) tipo -> . VAR
    (71) tipo -> . INT
    (72) tipo -> . BOOL
    (73) tipo -> . DOUBLE
    (74) tipo -> . VOID
    (75) tipo -> . STR

    PDER            reduce using rule 100 (empty -> .)
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    VOID            shift and go to state 101
    STR             shift and go to state 25

    parametros                     shift and go to state 123
    empty                          shift and go to state 100
    tipo                           shift and go to state 98

state 93

    (37) imprimir -> PRINT PIZQ opstring PDER . END

    END             shift and go to state 124


state 94

    (35) opstring -> string MAS . opstring
    (33) opstring -> . string
    (34) opstring -> . VARIABLE
    (35) opstring -> . string MAS opstring
    (36) opstring -> . VARIABLE MAS opstring
    (32) string -> . STRING

    VARIABLE        shift and go to state 55
    STRING          shift and go to state 56

    string                         shift and go to state 54
    opstring                       shift and go to state 125

state 95

    (36) opstring -> VARIABLE MAS . opstring
    (33) opstring -> . string
    (34) opstring -> . VARIABLE
    (35) opstring -> . string MAS opstring
    (36) opstring -> . VARIABLE MAS opstring
    (32) string -> . STRING

    VARIABLE        shift and go to state 55
    STRING          shift and go to state 56

    opstring                       shift and go to state 126
    string                         shift and go to state 54

state 96

    (14) asignacion -> tipo VARIABLE IGUAL expresiones . END

    END             shift and go to state 127


state 97

    (38) input -> tipo VARIABLE IGUAL INPUT . PIZQ PDER END

    PIZQ            shift and go to state 128


state 98

    (17) parametros -> tipo . VARIABLE
    (18) parametros -> tipo . VARIABLE COMA parametros

    VARIABLE        shift and go to state 129


state 99

    (12) funciones -> tipo VARIABLE PIZQ parametros . PDER LIZQ codigo RETURN expresion END LDER

    PDER            shift and go to state 130


state 100

    (16) parametros -> empty .

    PDER            reduce using rule 16 (parametros -> empty .)


state 101

    (74) tipo -> VOID .

    VARIABLE        reduce using rule 74 (tipo -> VOID .)


state 102

    (99) indexacion -> VARIABLE CIZQ . valor CDER
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    valor                          shift and go to state 131

state 103

    (41) first -> VARIABLE POINT . FIRST PIZQ PDER
    (42) last -> VARIABLE POINT . LAST PIZQ PDER
    (43) length -> VARIABLE POINT . LEN PIZQ PDER
    (45) remove -> VARIABLE POINT . REMOVE PIZQ valor PDER
    (44) add -> VARIABLE POINT . ADD PIZQ valor PDER

    FIRST           shift and go to state 132
    LAST            shift and go to state 133
    LEN             shift and go to state 134
    REMOVE          shift and go to state 135
    ADD             shift and go to state 136


state 104

    (15) asignacion -> VARIABLE IGUAL expresiones END .

    PRINT           reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    VARIABLE        reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    IF              reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    FOR             reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    WHILE           reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    DO              reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    VOID            reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    VAR             reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    INT             reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    BOOL            reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    DOUBLE          reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    STR             reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    ENTERO          reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    $end            reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    RETURN          reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    LDER            reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)


state 105

    (40) lista -> CIZQ elementos . CDER

    CDER            shift and go to state 137


state 106

    (47) elementos -> valor .
    (48) elementos -> valor . COMA elementos

    CDER            reduce using rule 47 (elementos -> valor .)
    LDER            reduce using rule 47 (elementos -> valor .)
    COMA            shift and go to state 138


state 107

    (46) conjuntos -> LIZQ elementos . LDER

    LDER            shift and go to state 139


state 108

    (54) terminoLogico -> PIZQ comparacion . PDER

    PDER            shift and go to state 140


state 109

    (50) opLogicas -> terminoLogico operadorLog . terminoLogico
    (51) opLogicas -> terminoLogico operadorLog . terminoLogico operadorLog opLogicas
    (52) terminoLogico -> . VARIABLE
    (53) terminoLogico -> . BOOLEAN
    (54) terminoLogico -> . PIZQ comparacion PDER

    VARIABLE        shift and go to state 142
    BOOLEAN         shift and go to state 83
    PIZQ            shift and go to state 76

    terminoLogico                  shift and go to state 141

state 110

    (57) operadorLog -> AND .

    VARIABLE        reduce using rule 57 (operadorLog -> AND .)
    BOOLEAN         reduce using rule 57 (operadorLog -> AND .)
    PIZQ            reduce using rule 57 (operadorLog -> AND .)


state 111

    (58) operadorLog -> OR .

    VARIABLE        reduce using rule 58 (operadorLog -> OR .)
    BOOLEAN         reduce using rule 58 (operadorLog -> OR .)
    PIZQ            reduce using rule 58 (operadorLog -> OR .)


state 112

    (78) sentenciaIf -> IF PIZQ comparacion PDER . LIZQ algoritmo LDER varianteIf

    LIZQ            shift and go to state 143


state 113

    (79) sentenciaIf -> IF PIZQ opLogicas PDER . LIZQ algoritmo LDER varianteIf

    LIZQ            shift and go to state 144


state 114

    (86) sentenciaFOR -> FOR PIZQ parametrosF PDER . LIZQ algoritmo LDER

    LIZQ            shift and go to state 145


state 115

    (87) parametrosF -> inicializacionFor END . comparacion END VARIABLE increDecre
    (88) parametrosF -> inicializacionFor END . opLogicas END VARIABLE increDecre
    (56) comparacion -> . expresion operadorComp expresion
    (49) opLogicas -> . terminoLogico
    (50) opLogicas -> . terminoLogico operadorLog terminoLogico
    (51) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (52) terminoLogico -> . VARIABLE
    (53) terminoLogico -> . BOOLEAN
    (54) terminoLogico -> . PIZQ comparacion PDER
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    VARIABLE        shift and go to state 82
    BOOLEAN         shift and go to state 83
    PIZQ            shift and go to state 76
    ENTERO          shift and go to state 26

    comparacion                    shift and go to state 146
    opLogicas                      shift and go to state 147
    expresion                      shift and go to state 81
    terminoLogico                  shift and go to state 77
    valor                          shift and go to state 15

state 116

    (89) parametrosF -> VARIABLE IN . VARIABLE

    VARIABLE        shift and go to state 148


state 117

    (90) inicializacionFor -> VARIABLE IGUAL . ENTERO

    ENTERO          shift and go to state 149


state 118

    (91) inicializacionFor -> INT VARIABLE . IGUAL ENTERO

    IGUAL           shift and go to state 150


state 119

    (92) inicializacionFor -> VAR VARIABLE . IGUAL ENTERO

    IGUAL           shift and go to state 151


state 120

    (95) sentenciaWhile -> WHILE PIZQ comparacion PDER . LIZQ algoritmo LDER

    LIZQ            shift and go to state 152


state 121

    (96) sentenciaWhile -> WHILE PIZQ opLogicas PDER . LIZQ algoritmo LDER

    LIZQ            shift and go to state 153


state 122

    (97) sentenciaWhile -> DO LIZQ algoritmo LDER . WHILE PIZQ comparacion PDER END
    (98) sentenciaWhile -> DO LIZQ algoritmo LDER . WHILE PIZQ opLogicas PDER END

    WHILE           shift and go to state 154


state 123

    (13) funciones -> VOID VARIABLE PIZQ parametros . PDER LIZQ codigo LDER

    PDER            shift and go to state 155


state 124

    (37) imprimir -> PRINT PIZQ opstring PDER END .

    PRINT           reduce using rule 37 (imprimir -> PRINT PIZQ opstring PDER END .)
    VARIABLE        reduce using rule 37 (imprimir -> PRINT PIZQ opstring PDER END .)
    IF              reduce using rule 37 (imprimir -> PRINT PIZQ opstring PDER END .)
    FOR             reduce using rule 37 (imprimir -> PRINT PIZQ opstring PDER END .)
    WHILE           reduce using rule 37 (imprimir -> PRINT PIZQ opstring PDER END .)
    DO              reduce using rule 37 (imprimir -> PRINT PIZQ opstring PDER END .)
    VOID            reduce using rule 37 (imprimir -> PRINT PIZQ opstring PDER END .)
    VAR             reduce using rule 37 (imprimir -> PRINT PIZQ opstring PDER END .)
    INT             reduce using rule 37 (imprimir -> PRINT PIZQ opstring PDER END .)
    BOOL            reduce using rule 37 (imprimir -> PRINT PIZQ opstring PDER END .)
    DOUBLE          reduce using rule 37 (imprimir -> PRINT PIZQ opstring PDER END .)
    STR             reduce using rule 37 (imprimir -> PRINT PIZQ opstring PDER END .)
    ENTERO          reduce using rule 37 (imprimir -> PRINT PIZQ opstring PDER END .)
    $end            reduce using rule 37 (imprimir -> PRINT PIZQ opstring PDER END .)
    RETURN          reduce using rule 37 (imprimir -> PRINT PIZQ opstring PDER END .)
    LDER            reduce using rule 37 (imprimir -> PRINT PIZQ opstring PDER END .)


state 125

    (35) opstring -> string MAS opstring .

    PDER            reduce using rule 35 (opstring -> string MAS opstring .)
    END             reduce using rule 35 (opstring -> string MAS opstring .)


state 126

    (36) opstring -> VARIABLE MAS opstring .

    PDER            reduce using rule 36 (opstring -> VARIABLE MAS opstring .)
    END             reduce using rule 36 (opstring -> VARIABLE MAS opstring .)


state 127

    (14) asignacion -> tipo VARIABLE IGUAL expresiones END .

    PRINT           reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    VARIABLE        reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    IF              reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    FOR             reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    WHILE           reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    DO              reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    VOID            reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    VAR             reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    INT             reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    BOOL            reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    DOUBLE          reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    STR             reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    ENTERO          reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    $end            reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    RETURN          reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    LDER            reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)


state 128

    (38) input -> tipo VARIABLE IGUAL INPUT PIZQ . PDER END

    PDER            shift and go to state 156


state 129

    (17) parametros -> tipo VARIABLE .
    (18) parametros -> tipo VARIABLE . COMA parametros

    PDER            reduce using rule 17 (parametros -> tipo VARIABLE .)
    COMA            shift and go to state 157


state 130

    (12) funciones -> tipo VARIABLE PIZQ parametros PDER . LIZQ codigo RETURN expresion END LDER

    LIZQ            shift and go to state 158


state 131

    (99) indexacion -> VARIABLE CIZQ valor . CDER

    CDER            shift and go to state 159


state 132

    (41) first -> VARIABLE POINT FIRST . PIZQ PDER

    PIZQ            shift and go to state 160


state 133

    (42) last -> VARIABLE POINT LAST . PIZQ PDER

    PIZQ            shift and go to state 161


state 134

    (43) length -> VARIABLE POINT LEN . PIZQ PDER

    PIZQ            shift and go to state 162


state 135

    (45) remove -> VARIABLE POINT REMOVE . PIZQ valor PDER

    PIZQ            shift and go to state 163


state 136

    (44) add -> VARIABLE POINT ADD . PIZQ valor PDER

    PIZQ            shift and go to state 164


state 137

    (40) lista -> CIZQ elementos CDER .

    END             reduce using rule 40 (lista -> CIZQ elementos CDER .)


state 138

    (48) elementos -> valor COMA . elementos
    (47) elementos -> . valor
    (48) elementos -> . valor COMA elementos
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    valor                          shift and go to state 106
    elementos                      shift and go to state 165

state 139

    (46) conjuntos -> LIZQ elementos LDER .

    END             reduce using rule 46 (conjuntos -> LIZQ elementos LDER .)


state 140

    (54) terminoLogico -> PIZQ comparacion PDER .

    AND             reduce using rule 54 (terminoLogico -> PIZQ comparacion PDER .)
    OR              reduce using rule 54 (terminoLogico -> PIZQ comparacion PDER .)
    END             reduce using rule 54 (terminoLogico -> PIZQ comparacion PDER .)
    PDER            reduce using rule 54 (terminoLogico -> PIZQ comparacion PDER .)


state 141

    (50) opLogicas -> terminoLogico operadorLog terminoLogico .
    (51) opLogicas -> terminoLogico operadorLog terminoLogico . operadorLog opLogicas
    (57) operadorLog -> . AND
    (58) operadorLog -> . OR

    END             reduce using rule 50 (opLogicas -> terminoLogico operadorLog terminoLogico .)
    PDER            reduce using rule 50 (opLogicas -> terminoLogico operadorLog terminoLogico .)
    AND             shift and go to state 110
    OR              shift and go to state 111

    operadorLog                    shift and go to state 166

state 142

    (52) terminoLogico -> VARIABLE .

    AND             reduce using rule 52 (terminoLogico -> VARIABLE .)
    OR              reduce using rule 52 (terminoLogico -> VARIABLE .)
    END             reduce using rule 52 (terminoLogico -> VARIABLE .)
    PDER            reduce using rule 52 (terminoLogico -> VARIABLE .)


state 143

    (78) sentenciaIf -> IF PIZQ comparacion PDER LIZQ . algoritmo LDER varianteIf
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (37) imprimir -> . PRINT PIZQ opstring PDER END
    (14) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (15) asignacion -> . VARIABLE IGUAL expresiones END
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (56) comparacion -> . expresion operadorComp expresion
    (78) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (79) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (86) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (95) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (96) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (97) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (98) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (38) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (13) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (70) tipo -> . VAR
    (71) tipo -> . INT
    (72) tipo -> . BOOL
    (73) tipo -> . DOUBLE
    (74) tipo -> . VOID
    (75) tipo -> . STR
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    PRINT           shift and go to state 12
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    VOID            shift and go to state 20
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    STR             shift and go to state 25
    ENTERO          shift and go to state 26

    comparacion                    shift and go to state 6
    algoritmo                      shift and go to state 167
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    tipo                           shift and go to state 13
    valor                          shift and go to state 15

state 144

    (79) sentenciaIf -> IF PIZQ opLogicas PDER LIZQ . algoritmo LDER varianteIf
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (37) imprimir -> . PRINT PIZQ opstring PDER END
    (14) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (15) asignacion -> . VARIABLE IGUAL expresiones END
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (56) comparacion -> . expresion operadorComp expresion
    (78) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (79) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (86) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (95) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (96) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (97) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (98) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (38) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (13) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (70) tipo -> . VAR
    (71) tipo -> . INT
    (72) tipo -> . BOOL
    (73) tipo -> . DOUBLE
    (74) tipo -> . VOID
    (75) tipo -> . STR
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    PRINT           shift and go to state 12
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    VOID            shift and go to state 20
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    STR             shift and go to state 25
    ENTERO          shift and go to state 26

    algoritmo                      shift and go to state 168
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    tipo                           shift and go to state 13
    valor                          shift and go to state 15

state 145

    (86) sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ . algoritmo LDER
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (37) imprimir -> . PRINT PIZQ opstring PDER END
    (14) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (15) asignacion -> . VARIABLE IGUAL expresiones END
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (56) comparacion -> . expresion operadorComp expresion
    (78) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (79) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (86) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (95) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (96) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (97) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (98) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (38) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (13) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (70) tipo -> . VAR
    (71) tipo -> . INT
    (72) tipo -> . BOOL
    (73) tipo -> . DOUBLE
    (74) tipo -> . VOID
    (75) tipo -> . STR
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    PRINT           shift and go to state 12
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    VOID            shift and go to state 20
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    STR             shift and go to state 25
    ENTERO          shift and go to state 26

    algoritmo                      shift and go to state 169
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    tipo                           shift and go to state 13
    valor                          shift and go to state 15

state 146

    (87) parametrosF -> inicializacionFor END comparacion . END VARIABLE increDecre

    END             shift and go to state 170


state 147

    (88) parametrosF -> inicializacionFor END opLogicas . END VARIABLE increDecre

    END             shift and go to state 171


state 148

    (89) parametrosF -> VARIABLE IN VARIABLE .

    PDER            reduce using rule 89 (parametrosF -> VARIABLE IN VARIABLE .)


state 149

    (90) inicializacionFor -> VARIABLE IGUAL ENTERO .

    END             reduce using rule 90 (inicializacionFor -> VARIABLE IGUAL ENTERO .)


state 150

    (91) inicializacionFor -> INT VARIABLE IGUAL . ENTERO

    ENTERO          shift and go to state 172


state 151

    (92) inicializacionFor -> VAR VARIABLE IGUAL . ENTERO

    ENTERO          shift and go to state 173


state 152

    (95) sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ . algoritmo LDER
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (37) imprimir -> . PRINT PIZQ opstring PDER END
    (14) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (15) asignacion -> . VARIABLE IGUAL expresiones END
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (56) comparacion -> . expresion operadorComp expresion
    (78) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (79) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (86) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (95) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (96) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (97) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (98) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (38) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (13) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (70) tipo -> . VAR
    (71) tipo -> . INT
    (72) tipo -> . BOOL
    (73) tipo -> . DOUBLE
    (74) tipo -> . VOID
    (75) tipo -> . STR
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    PRINT           shift and go to state 12
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    VOID            shift and go to state 20
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    STR             shift and go to state 25
    ENTERO          shift and go to state 26

    comparacion                    shift and go to state 6
    algoritmo                      shift and go to state 174
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    tipo                           shift and go to state 13
    valor                          shift and go to state 15

state 153

    (96) sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ . algoritmo LDER
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (37) imprimir -> . PRINT PIZQ opstring PDER END
    (14) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (15) asignacion -> . VARIABLE IGUAL expresiones END
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (56) comparacion -> . expresion operadorComp expresion
    (78) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (79) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (86) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (95) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (96) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (97) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (98) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (38) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (13) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (70) tipo -> . VAR
    (71) tipo -> . INT
    (72) tipo -> . BOOL
    (73) tipo -> . DOUBLE
    (74) tipo -> . VOID
    (75) tipo -> . STR
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    PRINT           shift and go to state 12
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    VOID            shift and go to state 20
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    STR             shift and go to state 25
    ENTERO          shift and go to state 26

    algoritmo                      shift and go to state 175
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    tipo                           shift and go to state 13
    valor                          shift and go to state 15

state 154

    (97) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE . PIZQ comparacion PDER END
    (98) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE . PIZQ opLogicas PDER END

    PIZQ            shift and go to state 176


state 155

    (13) funciones -> VOID VARIABLE PIZQ parametros PDER . LIZQ codigo LDER

    LIZQ            shift and go to state 177


state 156

    (38) input -> tipo VARIABLE IGUAL INPUT PIZQ PDER . END

    END             shift and go to state 178


state 157

    (18) parametros -> tipo VARIABLE COMA . parametros
    (16) parametros -> . empty
    (17) parametros -> . tipo VARIABLE
    (18) parametros -> . tipo VARIABLE COMA parametros
    (100) empty -> .
    (70) tipo -> . VAR
    (71) tipo -> . INT
    (72) tipo -> . BOOL
    (73) tipo -> . DOUBLE
    (74) tipo -> . VOID
    (75) tipo -> . STR

    PDER            reduce using rule 100 (empty -> .)
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    VOID            shift and go to state 101
    STR             shift and go to state 25

    tipo                           shift and go to state 98
    parametros                     shift and go to state 179
    empty                          shift and go to state 100

state 158

    (12) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ . codigo RETURN expresion END LDER
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (37) imprimir -> . PRINT PIZQ opstring PDER END
    (14) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (15) asignacion -> . VARIABLE IGUAL expresiones END
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (56) comparacion -> . expresion operadorComp expresion
    (78) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (79) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (86) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (95) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (96) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (97) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (98) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (38) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (13) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (70) tipo -> . VAR
    (71) tipo -> . INT
    (72) tipo -> . BOOL
    (73) tipo -> . DOUBLE
    (74) tipo -> . VOID
    (75) tipo -> . STR
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    PRINT           shift and go to state 12
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    VOID            shift and go to state 20
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    STR             shift and go to state 25
    ENTERO          shift and go to state 26

    tipo                           shift and go to state 13
    codigo                         shift and go to state 180
    expresion                      shift and go to state 5
    algoritmo                      shift and go to state 2
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    valor                          shift and go to state 15

state 159

    (99) indexacion -> VARIABLE CIZQ valor CDER .

    END             reduce using rule 99 (indexacion -> VARIABLE CIZQ valor CDER .)


state 160

    (41) first -> VARIABLE POINT FIRST PIZQ . PDER

    PDER            shift and go to state 181


state 161

    (42) last -> VARIABLE POINT LAST PIZQ . PDER

    PDER            shift and go to state 182


state 162

    (43) length -> VARIABLE POINT LEN PIZQ . PDER

    PDER            shift and go to state 183


state 163

    (45) remove -> VARIABLE POINT REMOVE PIZQ . valor PDER
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    valor                          shift and go to state 184

state 164

    (44) add -> VARIABLE POINT ADD PIZQ . valor PDER
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    valor                          shift and go to state 185

state 165

    (48) elementos -> valor COMA elementos .

    CDER            reduce using rule 48 (elementos -> valor COMA elementos .)
    LDER            reduce using rule 48 (elementos -> valor COMA elementos .)


state 166

    (51) opLogicas -> terminoLogico operadorLog terminoLogico operadorLog . opLogicas
    (49) opLogicas -> . terminoLogico
    (50) opLogicas -> . terminoLogico operadorLog terminoLogico
    (51) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (52) terminoLogico -> . VARIABLE
    (53) terminoLogico -> . BOOLEAN
    (54) terminoLogico -> . PIZQ comparacion PDER

    VARIABLE        shift and go to state 142
    BOOLEAN         shift and go to state 83
    PIZQ            shift and go to state 76

    terminoLogico                  shift and go to state 77
    opLogicas                      shift and go to state 186

state 167

    (78) sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo . LDER varianteIf

    LDER            shift and go to state 187


state 168

    (79) sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo . LDER varianteIf

    LDER            shift and go to state 188


state 169

    (86) sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo . LDER

    LDER            shift and go to state 189


state 170

    (87) parametrosF -> inicializacionFor END comparacion END . VARIABLE increDecre

    VARIABLE        shift and go to state 190


state 171

    (88) parametrosF -> inicializacionFor END opLogicas END . VARIABLE increDecre

    VARIABLE        shift and go to state 191


state 172

    (91) inicializacionFor -> INT VARIABLE IGUAL ENTERO .

    END             reduce using rule 91 (inicializacionFor -> INT VARIABLE IGUAL ENTERO .)


state 173

    (92) inicializacionFor -> VAR VARIABLE IGUAL ENTERO .

    END             reduce using rule 92 (inicializacionFor -> VAR VARIABLE IGUAL ENTERO .)


state 174

    (95) sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo . LDER

    LDER            shift and go to state 192


state 175

    (96) sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo . LDER

    LDER            shift and go to state 193


state 176

    (97) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ . comparacion PDER END
    (98) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ . opLogicas PDER END
    (56) comparacion -> . expresion operadorComp expresion
    (49) opLogicas -> . terminoLogico
    (50) opLogicas -> . terminoLogico operadorLog terminoLogico
    (51) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (52) terminoLogico -> . VARIABLE
    (53) terminoLogico -> . BOOLEAN
    (54) terminoLogico -> . PIZQ comparacion PDER
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    VARIABLE        shift and go to state 82
    BOOLEAN         shift and go to state 83
    PIZQ            shift and go to state 76
    ENTERO          shift and go to state 26

    comparacion                    shift and go to state 194
    opLogicas                      shift and go to state 195
    expresion                      shift and go to state 81
    terminoLogico                  shift and go to state 77
    valor                          shift and go to state 15

state 177

    (13) funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ . codigo LDER
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (37) imprimir -> . PRINT PIZQ opstring PDER END
    (14) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (15) asignacion -> . VARIABLE IGUAL expresiones END
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (56) comparacion -> . expresion operadorComp expresion
    (78) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (79) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (86) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (95) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (96) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (97) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (98) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (38) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (13) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (70) tipo -> . VAR
    (71) tipo -> . INT
    (72) tipo -> . BOOL
    (73) tipo -> . DOUBLE
    (74) tipo -> . VOID
    (75) tipo -> . STR
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    PRINT           shift and go to state 12
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    VOID            shift and go to state 20
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    STR             shift and go to state 25
    ENTERO          shift and go to state 26

    codigo                         shift and go to state 196
    algoritmo                      shift and go to state 2
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    tipo                           shift and go to state 13
    valor                          shift and go to state 15

state 178

    (38) input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .

    PRINT           reduce using rule 38 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    VARIABLE        reduce using rule 38 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    IF              reduce using rule 38 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    FOR             reduce using rule 38 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    WHILE           reduce using rule 38 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    DO              reduce using rule 38 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    VOID            reduce using rule 38 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    VAR             reduce using rule 38 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    INT             reduce using rule 38 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    BOOL            reduce using rule 38 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    DOUBLE          reduce using rule 38 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    STR             reduce using rule 38 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    ENTERO          reduce using rule 38 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    $end            reduce using rule 38 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    RETURN          reduce using rule 38 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    LDER            reduce using rule 38 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)


state 179

    (18) parametros -> tipo VARIABLE COMA parametros .

    PDER            reduce using rule 18 (parametros -> tipo VARIABLE COMA parametros .)


state 180

    (12) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo . RETURN expresion END LDER

    RETURN          shift and go to state 197


state 181

    (41) first -> VARIABLE POINT FIRST PIZQ PDER .

    END             reduce using rule 41 (first -> VARIABLE POINT FIRST PIZQ PDER .)


state 182

    (42) last -> VARIABLE POINT LAST PIZQ PDER .

    END             reduce using rule 42 (last -> VARIABLE POINT LAST PIZQ PDER .)


state 183

    (43) length -> VARIABLE POINT LEN PIZQ PDER .

    END             reduce using rule 43 (length -> VARIABLE POINT LEN PIZQ PDER .)


state 184

    (45) remove -> VARIABLE POINT REMOVE PIZQ valor . PDER

    PDER            shift and go to state 198


state 185

    (44) add -> VARIABLE POINT ADD PIZQ valor . PDER

    PDER            shift and go to state 199


state 186

    (51) opLogicas -> terminoLogico operadorLog terminoLogico operadorLog opLogicas .

    END             reduce using rule 51 (opLogicas -> terminoLogico operadorLog terminoLogico operadorLog opLogicas .)
    PDER            reduce using rule 51 (opLogicas -> terminoLogico operadorLog terminoLogico operadorLog opLogicas .)


state 187

    (78) sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER . varianteIf
    (80) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
    (81) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER
    (82) varianteIf -> . ELSE LIZQ algoritmo LDER
    (83) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (84) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (85) varianteIf -> . empty
    (100) empty -> .

    ELSEIF          shift and go to state 201
    ELSE            shift and go to state 202
    PRINT           reduce using rule 100 (empty -> .)
    VARIABLE        reduce using rule 100 (empty -> .)
    IF              reduce using rule 100 (empty -> .)
    FOR             reduce using rule 100 (empty -> .)
    WHILE           reduce using rule 100 (empty -> .)
    DO              reduce using rule 100 (empty -> .)
    VOID            reduce using rule 100 (empty -> .)
    VAR             reduce using rule 100 (empty -> .)
    INT             reduce using rule 100 (empty -> .)
    BOOL            reduce using rule 100 (empty -> .)
    DOUBLE          reduce using rule 100 (empty -> .)
    STR             reduce using rule 100 (empty -> .)
    ENTERO          reduce using rule 100 (empty -> .)
    $end            reduce using rule 100 (empty -> .)
    RETURN          reduce using rule 100 (empty -> .)
    LDER            reduce using rule 100 (empty -> .)

    varianteIf                     shift and go to state 200
    empty                          shift and go to state 203

state 188

    (79) sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER . varianteIf
    (80) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
    (81) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER
    (82) varianteIf -> . ELSE LIZQ algoritmo LDER
    (83) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (84) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (85) varianteIf -> . empty
    (100) empty -> .

    ELSEIF          shift and go to state 201
    ELSE            shift and go to state 202
    PRINT           reduce using rule 100 (empty -> .)
    VARIABLE        reduce using rule 100 (empty -> .)
    IF              reduce using rule 100 (empty -> .)
    FOR             reduce using rule 100 (empty -> .)
    WHILE           reduce using rule 100 (empty -> .)
    DO              reduce using rule 100 (empty -> .)
    VOID            reduce using rule 100 (empty -> .)
    VAR             reduce using rule 100 (empty -> .)
    INT             reduce using rule 100 (empty -> .)
    BOOL            reduce using rule 100 (empty -> .)
    DOUBLE          reduce using rule 100 (empty -> .)
    STR             reduce using rule 100 (empty -> .)
    ENTERO          reduce using rule 100 (empty -> .)
    $end            reduce using rule 100 (empty -> .)
    RETURN          reduce using rule 100 (empty -> .)
    LDER            reduce using rule 100 (empty -> .)

    varianteIf                     shift and go to state 204
    empty                          shift and go to state 203

state 189

    (86) sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .

    PRINT           reduce using rule 86 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    VARIABLE        reduce using rule 86 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    IF              reduce using rule 86 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    FOR             reduce using rule 86 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    WHILE           reduce using rule 86 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    DO              reduce using rule 86 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    VOID            reduce using rule 86 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    VAR             reduce using rule 86 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    INT             reduce using rule 86 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    BOOL            reduce using rule 86 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    DOUBLE          reduce using rule 86 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    STR             reduce using rule 86 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    ENTERO          reduce using rule 86 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    $end            reduce using rule 86 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    RETURN          reduce using rule 86 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    LDER            reduce using rule 86 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)


state 190

    (87) parametrosF -> inicializacionFor END comparacion END VARIABLE . increDecre
    (93) increDecre -> . INCREMENTO
    (94) increDecre -> . DECREMENTO

    INCREMENTO      shift and go to state 206
    DECREMENTO      shift and go to state 207

    increDecre                     shift and go to state 205

state 191

    (88) parametrosF -> inicializacionFor END opLogicas END VARIABLE . increDecre
    (93) increDecre -> . INCREMENTO
    (94) increDecre -> . DECREMENTO

    INCREMENTO      shift and go to state 206
    DECREMENTO      shift and go to state 207

    increDecre                     shift and go to state 208

state 192

    (95) sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .

    PRINT           reduce using rule 95 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VARIABLE        reduce using rule 95 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    IF              reduce using rule 95 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    FOR             reduce using rule 95 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    WHILE           reduce using rule 95 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    DO              reduce using rule 95 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VOID            reduce using rule 95 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VAR             reduce using rule 95 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    INT             reduce using rule 95 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    BOOL            reduce using rule 95 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    DOUBLE          reduce using rule 95 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    STR             reduce using rule 95 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    ENTERO          reduce using rule 95 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    $end            reduce using rule 95 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    RETURN          reduce using rule 95 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    LDER            reduce using rule 95 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)


state 193

    (96) sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .

    PRINT           reduce using rule 96 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    VARIABLE        reduce using rule 96 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    IF              reduce using rule 96 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    FOR             reduce using rule 96 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    WHILE           reduce using rule 96 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    DO              reduce using rule 96 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    VOID            reduce using rule 96 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    VAR             reduce using rule 96 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    INT             reduce using rule 96 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    BOOL            reduce using rule 96 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    DOUBLE          reduce using rule 96 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    STR             reduce using rule 96 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    ENTERO          reduce using rule 96 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    $end            reduce using rule 96 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    RETURN          reduce using rule 96 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    LDER            reduce using rule 96 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)


state 194

    (97) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion . PDER END

    PDER            shift and go to state 209


state 195

    (98) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas . PDER END

    PDER            shift and go to state 210


state 196

    (13) funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo . LDER

    LDER            shift and go to state 211


state 197

    (12) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN . expresion END LDER
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    expresion                      shift and go to state 212
    valor                          shift and go to state 15

state 198

    (45) remove -> VARIABLE POINT REMOVE PIZQ valor PDER .

    END             reduce using rule 45 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)


state 199

    (44) add -> VARIABLE POINT ADD PIZQ valor PDER .

    END             reduce using rule 44 (add -> VARIABLE POINT ADD PIZQ valor PDER .)


state 200

    (78) sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .

    PRINT           reduce using rule 78 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VARIABLE        reduce using rule 78 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    IF              reduce using rule 78 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    FOR             reduce using rule 78 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    WHILE           reduce using rule 78 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    DO              reduce using rule 78 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VOID            reduce using rule 78 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VAR             reduce using rule 78 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    INT             reduce using rule 78 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    BOOL            reduce using rule 78 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    DOUBLE          reduce using rule 78 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    STR             reduce using rule 78 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    ENTERO          reduce using rule 78 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    $end            reduce using rule 78 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    RETURN          reduce using rule 78 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    LDER            reduce using rule 78 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)


state 201

    (80) varianteIf -> ELSEIF . PIZQ comparacion PDER LIZQ algoritmo LDER
    (81) varianteIf -> ELSEIF . PIZQ opLogicas PDER LIZQ algoritmo LDER
    (83) varianteIf -> ELSEIF . PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (84) varianteIf -> ELSEIF . PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf

    PIZQ            shift and go to state 213


state 202

    (82) varianteIf -> ELSE . LIZQ algoritmo LDER

    LIZQ            shift and go to state 214


state 203

    (85) varianteIf -> empty .

    PRINT           reduce using rule 85 (varianteIf -> empty .)
    VARIABLE        reduce using rule 85 (varianteIf -> empty .)
    IF              reduce using rule 85 (varianteIf -> empty .)
    FOR             reduce using rule 85 (varianteIf -> empty .)
    WHILE           reduce using rule 85 (varianteIf -> empty .)
    DO              reduce using rule 85 (varianteIf -> empty .)
    VOID            reduce using rule 85 (varianteIf -> empty .)
    VAR             reduce using rule 85 (varianteIf -> empty .)
    INT             reduce using rule 85 (varianteIf -> empty .)
    BOOL            reduce using rule 85 (varianteIf -> empty .)
    DOUBLE          reduce using rule 85 (varianteIf -> empty .)
    STR             reduce using rule 85 (varianteIf -> empty .)
    ENTERO          reduce using rule 85 (varianteIf -> empty .)
    $end            reduce using rule 85 (varianteIf -> empty .)
    RETURN          reduce using rule 85 (varianteIf -> empty .)
    LDER            reduce using rule 85 (varianteIf -> empty .)


state 204

    (79) sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .

    PRINT           reduce using rule 79 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    VARIABLE        reduce using rule 79 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    IF              reduce using rule 79 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    FOR             reduce using rule 79 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    WHILE           reduce using rule 79 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    DO              reduce using rule 79 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    VOID            reduce using rule 79 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    VAR             reduce using rule 79 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    INT             reduce using rule 79 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    BOOL            reduce using rule 79 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    DOUBLE          reduce using rule 79 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    STR             reduce using rule 79 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    ENTERO          reduce using rule 79 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    $end            reduce using rule 79 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    RETURN          reduce using rule 79 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    LDER            reduce using rule 79 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)


state 205

    (87) parametrosF -> inicializacionFor END comparacion END VARIABLE increDecre .

    PDER            reduce using rule 87 (parametrosF -> inicializacionFor END comparacion END VARIABLE increDecre .)


state 206

    (93) increDecre -> INCREMENTO .

    PDER            reduce using rule 93 (increDecre -> INCREMENTO .)


state 207

    (94) increDecre -> DECREMENTO .

    PDER            reduce using rule 94 (increDecre -> DECREMENTO .)


state 208

    (88) parametrosF -> inicializacionFor END opLogicas END VARIABLE increDecre .

    PDER            reduce using rule 88 (parametrosF -> inicializacionFor END opLogicas END VARIABLE increDecre .)


state 209

    (97) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER . END

    END             shift and go to state 215


state 210

    (98) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER . END

    END             shift and go to state 216


state 211

    (13) funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .

    PRINT           reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    VARIABLE        reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    IF              reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    FOR             reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    WHILE           reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    DO              reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    VOID            reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    VAR             reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    INT             reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    BOOL            reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    DOUBLE          reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    STR             reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    ENTERO          reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    $end            reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    RETURN          reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    LDER            reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)


state 212

    (12) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion . END LDER

    END             shift and go to state 217


state 213

    (80) varianteIf -> ELSEIF PIZQ . comparacion PDER LIZQ algoritmo LDER
    (81) varianteIf -> ELSEIF PIZQ . opLogicas PDER LIZQ algoritmo LDER
    (83) varianteIf -> ELSEIF PIZQ . comparacion PDER LIZQ algoritmo LDER varianteIf
    (84) varianteIf -> ELSEIF PIZQ . opLogicas PDER LIZQ algoritmo LDER varianteIf
    (56) comparacion -> . expresion operadorComp expresion
    (49) opLogicas -> . terminoLogico
    (50) opLogicas -> . terminoLogico operadorLog terminoLogico
    (51) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (52) terminoLogico -> . VARIABLE
    (53) terminoLogico -> . BOOLEAN
    (54) terminoLogico -> . PIZQ comparacion PDER
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    VARIABLE        shift and go to state 82
    BOOLEAN         shift and go to state 83
    PIZQ            shift and go to state 76
    ENTERO          shift and go to state 26

    comparacion                    shift and go to state 218
    opLogicas                      shift and go to state 219
    expresion                      shift and go to state 81
    terminoLogico                  shift and go to state 77
    valor                          shift and go to state 15

state 214

    (82) varianteIf -> ELSE LIZQ . algoritmo LDER
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (37) imprimir -> . PRINT PIZQ opstring PDER END
    (14) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (15) asignacion -> . VARIABLE IGUAL expresiones END
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (56) comparacion -> . expresion operadorComp expresion
    (78) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (79) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (86) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (95) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (96) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (97) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (98) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (38) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (13) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (70) tipo -> . VAR
    (71) tipo -> . INT
    (72) tipo -> . BOOL
    (73) tipo -> . DOUBLE
    (74) tipo -> . VOID
    (75) tipo -> . STR
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    PRINT           shift and go to state 12
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    VOID            shift and go to state 20
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    STR             shift and go to state 25
    ENTERO          shift and go to state 26

    algoritmo                      shift and go to state 220
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    tipo                           shift and go to state 13
    valor                          shift and go to state 15

state 215

    (97) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .

    PRINT           reduce using rule 97 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    VARIABLE        reduce using rule 97 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    IF              reduce using rule 97 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    FOR             reduce using rule 97 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    WHILE           reduce using rule 97 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    DO              reduce using rule 97 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    VOID            reduce using rule 97 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    VAR             reduce using rule 97 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    INT             reduce using rule 97 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    BOOL            reduce using rule 97 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    DOUBLE          reduce using rule 97 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    STR             reduce using rule 97 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    ENTERO          reduce using rule 97 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    $end            reduce using rule 97 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    RETURN          reduce using rule 97 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    LDER            reduce using rule 97 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)


state 216

    (98) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .

    PRINT           reduce using rule 98 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    VARIABLE        reduce using rule 98 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    IF              reduce using rule 98 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    FOR             reduce using rule 98 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    WHILE           reduce using rule 98 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    DO              reduce using rule 98 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    VOID            reduce using rule 98 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    VAR             reduce using rule 98 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    INT             reduce using rule 98 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    BOOL            reduce using rule 98 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    DOUBLE          reduce using rule 98 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    STR             reduce using rule 98 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    ENTERO          reduce using rule 98 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    $end            reduce using rule 98 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    RETURN          reduce using rule 98 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    LDER            reduce using rule 98 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)


state 217

    (12) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END . LDER

    LDER            shift and go to state 221


state 218

    (80) varianteIf -> ELSEIF PIZQ comparacion . PDER LIZQ algoritmo LDER
    (83) varianteIf -> ELSEIF PIZQ comparacion . PDER LIZQ algoritmo LDER varianteIf

    PDER            shift and go to state 222


state 219

    (81) varianteIf -> ELSEIF PIZQ opLogicas . PDER LIZQ algoritmo LDER
    (84) varianteIf -> ELSEIF PIZQ opLogicas . PDER LIZQ algoritmo LDER varianteIf

    PDER            shift and go to state 223


state 220

    (82) varianteIf -> ELSE LIZQ algoritmo . LDER

    LDER            shift and go to state 224


state 221

    (12) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .

    PRINT           reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    VARIABLE        reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    IF              reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    FOR             reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    WHILE           reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    DO              reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    VOID            reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    VAR             reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    INT             reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    BOOL            reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    DOUBLE          reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    STR             reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    ENTERO          reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    $end            reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    RETURN          reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    LDER            reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)


state 222

    (80) varianteIf -> ELSEIF PIZQ comparacion PDER . LIZQ algoritmo LDER
    (83) varianteIf -> ELSEIF PIZQ comparacion PDER . LIZQ algoritmo LDER varianteIf

    LIZQ            shift and go to state 225


state 223

    (81) varianteIf -> ELSEIF PIZQ opLogicas PDER . LIZQ algoritmo LDER
    (84) varianteIf -> ELSEIF PIZQ opLogicas PDER . LIZQ algoritmo LDER varianteIf

    LIZQ            shift and go to state 226


state 224

    (82) varianteIf -> ELSE LIZQ algoritmo LDER .

    PRINT           reduce using rule 82 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    VARIABLE        reduce using rule 82 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    IF              reduce using rule 82 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    FOR             reduce using rule 82 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    WHILE           reduce using rule 82 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    DO              reduce using rule 82 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    VOID            reduce using rule 82 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    VAR             reduce using rule 82 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    INT             reduce using rule 82 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    BOOL            reduce using rule 82 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    DOUBLE          reduce using rule 82 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    STR             reduce using rule 82 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    ENTERO          reduce using rule 82 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    $end            reduce using rule 82 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    RETURN          reduce using rule 82 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    LDER            reduce using rule 82 (varianteIf -> ELSE LIZQ algoritmo LDER .)


state 225

    (80) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ . algoritmo LDER
    (83) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ . algoritmo LDER varianteIf
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (37) imprimir -> . PRINT PIZQ opstring PDER END
    (14) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (15) asignacion -> . VARIABLE IGUAL expresiones END
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (56) comparacion -> . expresion operadorComp expresion
    (78) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (79) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (86) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (95) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (96) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (97) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (98) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (38) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (13) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (70) tipo -> . VAR
    (71) tipo -> . INT
    (72) tipo -> . BOOL
    (73) tipo -> . DOUBLE
    (74) tipo -> . VOID
    (75) tipo -> . STR
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    PRINT           shift and go to state 12
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    VOID            shift and go to state 20
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    STR             shift and go to state 25
    ENTERO          shift and go to state 26

    comparacion                    shift and go to state 6
    algoritmo                      shift and go to state 227
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    tipo                           shift and go to state 13
    valor                          shift and go to state 15

state 226

    (81) varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ . algoritmo LDER
    (84) varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ . algoritmo LDER varianteIf
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (37) imprimir -> . PRINT PIZQ opstring PDER END
    (14) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (15) asignacion -> . VARIABLE IGUAL expresiones END
    (39) expresion -> . valor
    (55) expresion -> . valor operadorMat expresion
    (56) comparacion -> . expresion operadorComp expresion
    (78) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (79) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (86) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (95) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (96) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (97) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (98) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (38) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (13) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (70) tipo -> . VAR
    (71) tipo -> . INT
    (72) tipo -> . BOOL
    (73) tipo -> . DOUBLE
    (74) tipo -> . VOID
    (75) tipo -> . STR
    (76) valor -> . ENTERO
    (77) valor -> . VARIABLE

    PRINT           shift and go to state 12
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    VOID            shift and go to state 20
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    STR             shift and go to state 25
    ENTERO          shift and go to state 26

    algoritmo                      shift and go to state 228
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    tipo                           shift and go to state 13
    valor                          shift and go to state 15

state 227

    (80) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo . LDER
    (83) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo . LDER varianteIf

    LDER            shift and go to state 229


state 228

    (81) varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo . LDER
    (84) varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo . LDER varianteIf

    LDER            shift and go to state 230


state 229

    (80) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .
    (83) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER . varianteIf
    (80) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
    (81) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER
    (82) varianteIf -> . ELSE LIZQ algoritmo LDER
    (83) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (84) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (85) varianteIf -> . empty
    (100) empty -> .

  ! reduce/reduce conflict for PRINT resolved using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for IF resolved using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for FOR resolved using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for WHILE resolved using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for DO resolved using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for VOID resolved using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for VAR resolved using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for INT resolved using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for BOOL resolved using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for STR resolved using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for ENTERO resolved using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for $end resolved using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for RETURN resolved using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for LDER resolved using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    PRINT           reduce using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VARIABLE        reduce using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    IF              reduce using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    FOR             reduce using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    WHILE           reduce using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    DO              reduce using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VOID            reduce using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VAR             reduce using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    INT             reduce using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    BOOL            reduce using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    DOUBLE          reduce using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    STR             reduce using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    ENTERO          reduce using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    $end            reduce using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    RETURN          reduce using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    LDER            reduce using rule 80 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    ELSEIF          shift and go to state 201
    ELSE            shift and go to state 202

  ! PRINT           [ reduce using rule 100 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 100 (empty -> .) ]
  ! IF              [ reduce using rule 100 (empty -> .) ]
  ! FOR             [ reduce using rule 100 (empty -> .) ]
  ! WHILE           [ reduce using rule 100 (empty -> .) ]
  ! DO              [ reduce using rule 100 (empty -> .) ]
  ! VOID            [ reduce using rule 100 (empty -> .) ]
  ! VAR             [ reduce using rule 100 (empty -> .) ]
  ! INT             [ reduce using rule 100 (empty -> .) ]
  ! BOOL            [ reduce using rule 100 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 100 (empty -> .) ]
  ! STR             [ reduce using rule 100 (empty -> .) ]
  ! ENTERO          [ reduce using rule 100 (empty -> .) ]
  ! $end            [ reduce using rule 100 (empty -> .) ]
  ! RETURN          [ reduce using rule 100 (empty -> .) ]
  ! LDER            [ reduce using rule 100 (empty -> .) ]

    varianteIf                     shift and go to state 231
    empty                          shift and go to state 203

state 230

    (81) varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .
    (84) varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER . varianteIf
    (80) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
    (81) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER
    (82) varianteIf -> . ELSE LIZQ algoritmo LDER
    (83) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (84) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (85) varianteIf -> . empty
    (100) empty -> .

  ! reduce/reduce conflict for PRINT resolved using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for IF resolved using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for FOR resolved using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for WHILE resolved using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for DO resolved using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for VOID resolved using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for VAR resolved using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for INT resolved using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for BOOL resolved using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for STR resolved using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for ENTERO resolved using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for $end resolved using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for RETURN resolved using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for LDER resolved using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    PRINT           reduce using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    VARIABLE        reduce using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    IF              reduce using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    FOR             reduce using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    WHILE           reduce using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    DO              reduce using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    VOID            reduce using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    VAR             reduce using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    INT             reduce using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    BOOL            reduce using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    DOUBLE          reduce using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    STR             reduce using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    ENTERO          reduce using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    $end            reduce using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    RETURN          reduce using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    LDER            reduce using rule 81 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    ELSEIF          shift and go to state 201
    ELSE            shift and go to state 202

  ! PRINT           [ reduce using rule 100 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 100 (empty -> .) ]
  ! IF              [ reduce using rule 100 (empty -> .) ]
  ! FOR             [ reduce using rule 100 (empty -> .) ]
  ! WHILE           [ reduce using rule 100 (empty -> .) ]
  ! DO              [ reduce using rule 100 (empty -> .) ]
  ! VOID            [ reduce using rule 100 (empty -> .) ]
  ! VAR             [ reduce using rule 100 (empty -> .) ]
  ! INT             [ reduce using rule 100 (empty -> .) ]
  ! BOOL            [ reduce using rule 100 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 100 (empty -> .) ]
  ! STR             [ reduce using rule 100 (empty -> .) ]
  ! ENTERO          [ reduce using rule 100 (empty -> .) ]
  ! $end            [ reduce using rule 100 (empty -> .) ]
  ! RETURN          [ reduce using rule 100 (empty -> .) ]
  ! LDER            [ reduce using rule 100 (empty -> .) ]

    varianteIf                     shift and go to state 232
    empty                          shift and go to state 203

state 231

    (83) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .

    PRINT           reduce using rule 83 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VARIABLE        reduce using rule 83 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    IF              reduce using rule 83 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    FOR             reduce using rule 83 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    WHILE           reduce using rule 83 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    DO              reduce using rule 83 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VOID            reduce using rule 83 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VAR             reduce using rule 83 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    INT             reduce using rule 83 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    BOOL            reduce using rule 83 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    DOUBLE          reduce using rule 83 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    STR             reduce using rule 83 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    ENTERO          reduce using rule 83 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    $end            reduce using rule 83 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    RETURN          reduce using rule 83 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    LDER            reduce using rule 83 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)


state 232

    (84) varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .

    PRINT           reduce using rule 84 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    VARIABLE        reduce using rule 84 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    IF              reduce using rule 84 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    FOR             reduce using rule 84 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    WHILE           reduce using rule 84 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    DO              reduce using rule 84 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    VOID            reduce using rule 84 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    VAR             reduce using rule 84 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    INT             reduce using rule 84 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    BOOL            reduce using rule 84 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    DOUBLE          reduce using rule 84 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    STR             reduce using rule 84 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    ENTERO          reduce using rule 84 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    $end            reduce using rule 84 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    RETURN          reduce using rule 84 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    LDER            reduce using rule 84 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARIABLE in state 20 resolved as shift
WARNING: shift/reduce conflict for MAS in state 59 resolved as shift
WARNING: reduce/reduce conflict in state 59 resolved using rule (opstring -> VARIABLE)
WARNING: rejected rule (valor -> VARIABLE) in state 59
WARNING: reduce/reduce conflict in state 59 resolved using rule (opstring -> VARIABLE)
WARNING: rejected rule (terminoLogico -> VARIABLE) in state 59
WARNING: reduce/reduce conflict in state 63 resolved using rule (expresiones -> BOOLEAN)
WARNING: rejected rule (terminoLogico -> BOOLEAN) in state 63
WARNING: reduce/reduce conflict in state 229 resolved using rule (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER)
WARNING: rejected rule (empty -> <empty>) in state 229
WARNING: reduce/reduce conflict in state 230 resolved using rule (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER)
WARNING: rejected rule (empty -> <empty>) in state 230
