Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    NEGACION

Grammar

Rule 0     S' -> codigo
Rule 1     codigo -> algoritmo
Rule 2     codigo -> algoritmo codigo
Rule 3     algoritmo -> imprimir
Rule 4     algoritmo -> asignacion
Rule 5     algoritmo -> expresion END
Rule 6     algoritmo -> comparacion END
Rule 7     algoritmo -> sentenciaIf
Rule 8     algoritmo -> sentenciaFOR
Rule 9     algoritmo -> sentenciaWhile
Rule 10    algoritmo -> input
Rule 11    algoritmo -> funciones
Rule 12    algoritmo -> expresionSinRetorno
Rule 13    funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
Rule 14    funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
Rule 15    asignacion -> tipo VARIABLE IGUAL expresiones END
Rule 16    asignacion -> VARIABLE IGUAL expresiones END
Rule 17    expresionSinRetorno -> funcionStructura END
Rule 18    expresionSinRetorno -> funcionStructura
Rule 19    funcionStructura -> first
Rule 20    funcionStructura -> last
Rule 21    funcionStructura -> length
Rule 22    funcionStructura -> remove
Rule 23    funcionStructura -> add
Rule 24    parametros -> empty
Rule 25    parametros -> tipo VARIABLE
Rule 26    parametros -> tipo VARIABLE COMA parametros
Rule 27    string -> STRING
Rule 28    expresiones -> expresion
Rule 29    expresiones -> comparacion
Rule 30    expresiones -> BOOLEAN
Rule 31    expresiones -> opstring
Rule 32    expresiones -> indexacion
Rule 33    expresiones -> lista
Rule 34    expresiones -> conjuntos
Rule 35    expresiones -> first
Rule 36    expresiones -> last
Rule 37    expresiones -> length
Rule 38    expresiones -> remove
Rule 39    expresiones -> add
Rule 40    expresiones -> slice
Rule 41    expresiones -> opLogicas
Rule 42    opstring -> string
Rule 43    opstring -> VARIABLE
Rule 44    opstring -> string MAS opstring
Rule 45    opstring -> VARIABLE MAS opstring
Rule 46    imprimir -> PRINT PIZQ opstring PDER END
Rule 47    input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END
Rule 48    expresion -> valor
Rule 49    lista -> CIZQ elementos CDER
Rule 50    first -> VARIABLE POINT FIRST PIZQ PDER
Rule 51    last -> VARIABLE POINT LAST PIZQ PDER
Rule 52    length -> VARIABLE POINT LEN PIZQ PDER
Rule 53    add -> VARIABLE POINT ADD PIZQ valor PDER
Rule 54    slice -> VARIABLE POINT SLICE PIZQ valor COMA valor PDER
Rule 55    remove -> VARIABLE POINT REMOVE PIZQ valor PDER
Rule 56    conjuntos -> LIZQ elementos LDER
Rule 57    elementos -> valor
Rule 58    elementos -> valor COMA elementos
Rule 59    opLogicas -> terminoLogico
Rule 60    opLogicas -> terminoLogico operadorLog terminoLogico
Rule 61    opLogicas -> terminoLogico operadorLog terminoLogico operadorLog opLogicas
Rule 62    terminoLogico -> VARIABLE
Rule 63    terminoLogico -> BOOLEAN
Rule 64    terminoLogico -> PIZQ comparacion PDER
Rule 65    expresion -> valor operadorMat expresion
Rule 66    comparacion -> expresion operadorComp expresion
Rule 67    operadorLog -> AND
Rule 68    operadorLog -> OR
Rule 69    operadorMat -> MAS
Rule 70    operadorMat -> RESTA
Rule 71    operadorMat -> PROD
Rule 72    operadorMat -> DIV
Rule 73    operadorMat -> MOD
Rule 74    operadorComp -> MAYOR
Rule 75    operadorComp -> MENOR
Rule 76    operadorComp -> MAYORIG
Rule 77    operadorComp -> MENORIG
Rule 78    operadorComp -> DIGUAL
Rule 79    operadorComp -> DIF
Rule 80    tipo -> VAR
Rule 81    tipo -> INT
Rule 82    tipo -> BOOL
Rule 83    tipo -> DOUBLE
Rule 84    tipo -> VOID
Rule 85    tipo -> STR
Rule 86    valor -> ENTERO
Rule 87    valor -> VARIABLE
Rule 88    sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
Rule 89    sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
Rule 90    varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
Rule 91    varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER
Rule 92    varianteIf -> ELSE LIZQ algoritmo LDER
Rule 93    varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
Rule 94    varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
Rule 95    varianteIf -> empty
Rule 96    sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
Rule 97    parametrosF -> inicializacionFor END comparacion END VARIABLE increDecre
Rule 98    parametrosF -> inicializacionFor END opLogicas END VARIABLE increDecre
Rule 99    parametrosF -> VARIABLE IN VARIABLE
Rule 100   inicializacionFor -> VARIABLE IGUAL ENTERO
Rule 101   inicializacionFor -> INT VARIABLE IGUAL ENTERO
Rule 102   inicializacionFor -> VAR VARIABLE IGUAL ENTERO
Rule 103   increDecre -> INCREMENTO
Rule 104   increDecre -> DECREMENTO
Rule 105   sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
Rule 106   sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
Rule 107   sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
Rule 108   sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
Rule 109   indexacion -> VARIABLE CIZQ valor CDER
Rule 110   empty -> <empty>

Terminals, with rules where they appear

ADD                  : 53
AND                  : 67
BOOL                 : 82
BOOLEAN              : 30 63
CDER                 : 49 109
CIZQ                 : 49 109
COMA                 : 26 54 58
DECREMENTO           : 104
DIF                  : 79
DIGUAL               : 78
DIV                  : 72
DO                   : 107 108
DOUBLE               : 83
ELSE                 : 92
ELSEIF               : 90 91 93 94
END                  : 5 6 13 15 16 17 46 47 97 97 98 98 107 108
ENTERO               : 86 100 101 102
FIRST                : 50
FOR                  : 96
IF                   : 88 89
IGUAL                : 15 16 47 100 101 102
IN                   : 99
INCREMENTO           : 103
INPUT                : 47
INT                  : 81 101
LAST                 : 51
LDER                 : 13 14 56 88 89 90 91 92 93 94 96 105 106 107 108
LEN                  : 52
LIZQ                 : 13 14 56 88 89 90 91 92 93 94 96 105 106 107 108
MAS                  : 44 45 69
MAYOR                : 74
MAYORIG              : 76
MENOR                : 75
MENORIG              : 77
MOD                  : 73
NEGACION             : 
OR                   : 68
PDER                 : 13 14 46 47 50 51 52 53 54 55 64 88 89 90 91 93 94 96 105 106 107 108
PIZQ                 : 13 14 46 47 50 51 52 53 54 55 64 88 89 90 91 93 94 96 105 106 107 108
POINT                : 50 51 52 53 54 55
PRINT                : 46
PROD                 : 71
REMOVE               : 55
RESTA                : 70
RETURN               : 13
SLICE                : 54
STR                  : 85
STRING               : 27
VAR                  : 80 102
VARIABLE             : 13 14 15 16 25 26 43 45 47 50 51 52 53 54 55 62 87 97 98 99 99 100 101 102 109
VOID                 : 14 84
WHILE                : 105 106 107 108
error                : 

Nonterminals, with rules where they appear

add                  : 23 39
algoritmo            : 1 2 88 89 90 91 92 93 94 96 105 106 107 108
asignacion           : 4
codigo               : 2 13 14 0
comparacion          : 6 29 64 88 90 93 97 105 107
conjuntos            : 34
elementos            : 49 56 58
empty                : 24 95
expresion            : 5 13 28 65 66 66
expresionSinRetorno  : 12
expresiones          : 15 16
first                : 19 35
funcionStructura     : 17 18
funciones            : 11
imprimir             : 3
increDecre           : 97 98
indexacion           : 32
inicializacionFor    : 97 98
input                : 10
last                 : 20 36
length               : 21 37
lista                : 33
opLogicas            : 41 61 89 91 94 98 106 108
operadorComp         : 66
operadorLog          : 60 61 61
operadorMat          : 65
opstring             : 31 44 45 46
parametros           : 13 14 26
parametrosF          : 96
remove               : 22 38
sentenciaFOR         : 8
sentenciaIf          : 7
sentenciaWhile       : 9
slice                : 40
string               : 42 44
terminoLogico        : 59 60 60 61 61
tipo                 : 13 15 25 26 47
valor                : 48 53 54 54 55 57 58 65 109
varianteIf           : 88 89 93 94

Parsing method: LALR

state 0

    (0) S' -> . codigo
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (12) algoritmo -> . expresionSinRetorno
    (46) imprimir -> . PRINT PIZQ opstring PDER END
    (15) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (16) asignacion -> . VARIABLE IGUAL expresiones END
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (66) comparacion -> . expresion operadorComp expresion
    (88) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (89) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (96) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (105) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (108) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (47) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (13) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (14) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (17) expresionSinRetorno -> . funcionStructura END
    (18) expresionSinRetorno -> . funcionStructura
    (80) tipo -> . VAR
    (81) tipo -> . INT
    (82) tipo -> . BOOL
    (83) tipo -> . DOUBLE
    (84) tipo -> . VOID
    (85) tipo -> . STR
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE
    (19) funcionStructura -> . first
    (20) funcionStructura -> . last
    (21) funcionStructura -> . length
    (22) funcionStructura -> . remove
    (23) funcionStructura -> . add
    (50) first -> . VARIABLE POINT FIRST PIZQ PDER
    (51) last -> . VARIABLE POINT LAST PIZQ PDER
    (52) length -> . VARIABLE POINT LEN PIZQ PDER
    (55) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (53) add -> . VARIABLE POINT ADD PIZQ valor PDER

    PRINT           shift and go to state 13
    VARIABLE        shift and go to state 15
    IF              shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    VOID            shift and go to state 21
    VAR             shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    DOUBLE          shift and go to state 26
    STR             shift and go to state 27
    ENTERO          shift and go to state 28

    codigo                         shift and go to state 1
    algoritmo                      shift and go to state 2
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    expresionSinRetorno            shift and go to state 12
    tipo                           shift and go to state 14
    valor                          shift and go to state 16
    funcionStructura               shift and go to state 22
    first                          shift and go to state 29
    last                           shift and go to state 30
    length                         shift and go to state 31
    remove                         shift and go to state 32
    add                            shift and go to state 33

state 1

    (0) S' -> codigo .



state 2

    (1) codigo -> algoritmo .
    (2) codigo -> algoritmo . codigo
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (12) algoritmo -> . expresionSinRetorno
    (46) imprimir -> . PRINT PIZQ opstring PDER END
    (15) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (16) asignacion -> . VARIABLE IGUAL expresiones END
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (66) comparacion -> . expresion operadorComp expresion
    (88) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (89) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (96) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (105) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (108) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (47) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (13) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (14) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (17) expresionSinRetorno -> . funcionStructura END
    (18) expresionSinRetorno -> . funcionStructura
    (80) tipo -> . VAR
    (81) tipo -> . INT
    (82) tipo -> . BOOL
    (83) tipo -> . DOUBLE
    (84) tipo -> . VOID
    (85) tipo -> . STR
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE
    (19) funcionStructura -> . first
    (20) funcionStructura -> . last
    (21) funcionStructura -> . length
    (22) funcionStructura -> . remove
    (23) funcionStructura -> . add
    (50) first -> . VARIABLE POINT FIRST PIZQ PDER
    (51) last -> . VARIABLE POINT LAST PIZQ PDER
    (52) length -> . VARIABLE POINT LEN PIZQ PDER
    (55) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (53) add -> . VARIABLE POINT ADD PIZQ valor PDER

    $end            reduce using rule 1 (codigo -> algoritmo .)
    RETURN          reduce using rule 1 (codigo -> algoritmo .)
    LDER            reduce using rule 1 (codigo -> algoritmo .)
    PRINT           shift and go to state 13
    VARIABLE        shift and go to state 15
    IF              shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    VOID            shift and go to state 21
    VAR             shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    DOUBLE          shift and go to state 26
    STR             shift and go to state 27
    ENTERO          shift and go to state 28

    algoritmo                      shift and go to state 2
    codigo                         shift and go to state 34
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    expresionSinRetorno            shift and go to state 12
    tipo                           shift and go to state 14
    valor                          shift and go to state 16
    funcionStructura               shift and go to state 22
    first                          shift and go to state 29
    last                           shift and go to state 30
    length                         shift and go to state 31
    remove                         shift and go to state 32
    add                            shift and go to state 33

state 3

    (3) algoritmo -> imprimir .

    PRINT           reduce using rule 3 (algoritmo -> imprimir .)
    VARIABLE        reduce using rule 3 (algoritmo -> imprimir .)
    IF              reduce using rule 3 (algoritmo -> imprimir .)
    FOR             reduce using rule 3 (algoritmo -> imprimir .)
    WHILE           reduce using rule 3 (algoritmo -> imprimir .)
    DO              reduce using rule 3 (algoritmo -> imprimir .)
    VOID            reduce using rule 3 (algoritmo -> imprimir .)
    VAR             reduce using rule 3 (algoritmo -> imprimir .)
    INT             reduce using rule 3 (algoritmo -> imprimir .)
    BOOL            reduce using rule 3 (algoritmo -> imprimir .)
    DOUBLE          reduce using rule 3 (algoritmo -> imprimir .)
    STR             reduce using rule 3 (algoritmo -> imprimir .)
    ENTERO          reduce using rule 3 (algoritmo -> imprimir .)
    $end            reduce using rule 3 (algoritmo -> imprimir .)
    RETURN          reduce using rule 3 (algoritmo -> imprimir .)
    LDER            reduce using rule 3 (algoritmo -> imprimir .)


state 4

    (4) algoritmo -> asignacion .

    PRINT           reduce using rule 4 (algoritmo -> asignacion .)
    VARIABLE        reduce using rule 4 (algoritmo -> asignacion .)
    IF              reduce using rule 4 (algoritmo -> asignacion .)
    FOR             reduce using rule 4 (algoritmo -> asignacion .)
    WHILE           reduce using rule 4 (algoritmo -> asignacion .)
    DO              reduce using rule 4 (algoritmo -> asignacion .)
    VOID            reduce using rule 4 (algoritmo -> asignacion .)
    VAR             reduce using rule 4 (algoritmo -> asignacion .)
    INT             reduce using rule 4 (algoritmo -> asignacion .)
    BOOL            reduce using rule 4 (algoritmo -> asignacion .)
    DOUBLE          reduce using rule 4 (algoritmo -> asignacion .)
    STR             reduce using rule 4 (algoritmo -> asignacion .)
    ENTERO          reduce using rule 4 (algoritmo -> asignacion .)
    $end            reduce using rule 4 (algoritmo -> asignacion .)
    RETURN          reduce using rule 4 (algoritmo -> asignacion .)
    LDER            reduce using rule 4 (algoritmo -> asignacion .)


state 5

    (5) algoritmo -> expresion . END
    (66) comparacion -> expresion . operadorComp expresion
    (74) operadorComp -> . MAYOR
    (75) operadorComp -> . MENOR
    (76) operadorComp -> . MAYORIG
    (77) operadorComp -> . MENORIG
    (78) operadorComp -> . DIGUAL
    (79) operadorComp -> . DIF

    END             shift and go to state 35
    MAYOR           shift and go to state 37
    MENOR           shift and go to state 38
    MAYORIG         shift and go to state 39
    MENORIG         shift and go to state 40
    DIGUAL          shift and go to state 41
    DIF             shift and go to state 42

    operadorComp                   shift and go to state 36

state 6

    (6) algoritmo -> comparacion . END

    END             shift and go to state 43


state 7

    (7) algoritmo -> sentenciaIf .

    PRINT           reduce using rule 7 (algoritmo -> sentenciaIf .)
    VARIABLE        reduce using rule 7 (algoritmo -> sentenciaIf .)
    IF              reduce using rule 7 (algoritmo -> sentenciaIf .)
    FOR             reduce using rule 7 (algoritmo -> sentenciaIf .)
    WHILE           reduce using rule 7 (algoritmo -> sentenciaIf .)
    DO              reduce using rule 7 (algoritmo -> sentenciaIf .)
    VOID            reduce using rule 7 (algoritmo -> sentenciaIf .)
    VAR             reduce using rule 7 (algoritmo -> sentenciaIf .)
    INT             reduce using rule 7 (algoritmo -> sentenciaIf .)
    BOOL            reduce using rule 7 (algoritmo -> sentenciaIf .)
    DOUBLE          reduce using rule 7 (algoritmo -> sentenciaIf .)
    STR             reduce using rule 7 (algoritmo -> sentenciaIf .)
    ENTERO          reduce using rule 7 (algoritmo -> sentenciaIf .)
    $end            reduce using rule 7 (algoritmo -> sentenciaIf .)
    RETURN          reduce using rule 7 (algoritmo -> sentenciaIf .)
    LDER            reduce using rule 7 (algoritmo -> sentenciaIf .)


state 8

    (8) algoritmo -> sentenciaFOR .

    PRINT           reduce using rule 8 (algoritmo -> sentenciaFOR .)
    VARIABLE        reduce using rule 8 (algoritmo -> sentenciaFOR .)
    IF              reduce using rule 8 (algoritmo -> sentenciaFOR .)
    FOR             reduce using rule 8 (algoritmo -> sentenciaFOR .)
    WHILE           reduce using rule 8 (algoritmo -> sentenciaFOR .)
    DO              reduce using rule 8 (algoritmo -> sentenciaFOR .)
    VOID            reduce using rule 8 (algoritmo -> sentenciaFOR .)
    VAR             reduce using rule 8 (algoritmo -> sentenciaFOR .)
    INT             reduce using rule 8 (algoritmo -> sentenciaFOR .)
    BOOL            reduce using rule 8 (algoritmo -> sentenciaFOR .)
    DOUBLE          reduce using rule 8 (algoritmo -> sentenciaFOR .)
    STR             reduce using rule 8 (algoritmo -> sentenciaFOR .)
    ENTERO          reduce using rule 8 (algoritmo -> sentenciaFOR .)
    $end            reduce using rule 8 (algoritmo -> sentenciaFOR .)
    RETURN          reduce using rule 8 (algoritmo -> sentenciaFOR .)
    LDER            reduce using rule 8 (algoritmo -> sentenciaFOR .)


state 9

    (9) algoritmo -> sentenciaWhile .

    PRINT           reduce using rule 9 (algoritmo -> sentenciaWhile .)
    VARIABLE        reduce using rule 9 (algoritmo -> sentenciaWhile .)
    IF              reduce using rule 9 (algoritmo -> sentenciaWhile .)
    FOR             reduce using rule 9 (algoritmo -> sentenciaWhile .)
    WHILE           reduce using rule 9 (algoritmo -> sentenciaWhile .)
    DO              reduce using rule 9 (algoritmo -> sentenciaWhile .)
    VOID            reduce using rule 9 (algoritmo -> sentenciaWhile .)
    VAR             reduce using rule 9 (algoritmo -> sentenciaWhile .)
    INT             reduce using rule 9 (algoritmo -> sentenciaWhile .)
    BOOL            reduce using rule 9 (algoritmo -> sentenciaWhile .)
    DOUBLE          reduce using rule 9 (algoritmo -> sentenciaWhile .)
    STR             reduce using rule 9 (algoritmo -> sentenciaWhile .)
    ENTERO          reduce using rule 9 (algoritmo -> sentenciaWhile .)
    $end            reduce using rule 9 (algoritmo -> sentenciaWhile .)
    RETURN          reduce using rule 9 (algoritmo -> sentenciaWhile .)
    LDER            reduce using rule 9 (algoritmo -> sentenciaWhile .)


state 10

    (10) algoritmo -> input .

    PRINT           reduce using rule 10 (algoritmo -> input .)
    VARIABLE        reduce using rule 10 (algoritmo -> input .)
    IF              reduce using rule 10 (algoritmo -> input .)
    FOR             reduce using rule 10 (algoritmo -> input .)
    WHILE           reduce using rule 10 (algoritmo -> input .)
    DO              reduce using rule 10 (algoritmo -> input .)
    VOID            reduce using rule 10 (algoritmo -> input .)
    VAR             reduce using rule 10 (algoritmo -> input .)
    INT             reduce using rule 10 (algoritmo -> input .)
    BOOL            reduce using rule 10 (algoritmo -> input .)
    DOUBLE          reduce using rule 10 (algoritmo -> input .)
    STR             reduce using rule 10 (algoritmo -> input .)
    ENTERO          reduce using rule 10 (algoritmo -> input .)
    $end            reduce using rule 10 (algoritmo -> input .)
    RETURN          reduce using rule 10 (algoritmo -> input .)
    LDER            reduce using rule 10 (algoritmo -> input .)


state 11

    (11) algoritmo -> funciones .

    PRINT           reduce using rule 11 (algoritmo -> funciones .)
    VARIABLE        reduce using rule 11 (algoritmo -> funciones .)
    IF              reduce using rule 11 (algoritmo -> funciones .)
    FOR             reduce using rule 11 (algoritmo -> funciones .)
    WHILE           reduce using rule 11 (algoritmo -> funciones .)
    DO              reduce using rule 11 (algoritmo -> funciones .)
    VOID            reduce using rule 11 (algoritmo -> funciones .)
    VAR             reduce using rule 11 (algoritmo -> funciones .)
    INT             reduce using rule 11 (algoritmo -> funciones .)
    BOOL            reduce using rule 11 (algoritmo -> funciones .)
    DOUBLE          reduce using rule 11 (algoritmo -> funciones .)
    STR             reduce using rule 11 (algoritmo -> funciones .)
    ENTERO          reduce using rule 11 (algoritmo -> funciones .)
    $end            reduce using rule 11 (algoritmo -> funciones .)
    RETURN          reduce using rule 11 (algoritmo -> funciones .)
    LDER            reduce using rule 11 (algoritmo -> funciones .)


state 12

    (12) algoritmo -> expresionSinRetorno .

    PRINT           reduce using rule 12 (algoritmo -> expresionSinRetorno .)
    VARIABLE        reduce using rule 12 (algoritmo -> expresionSinRetorno .)
    IF              reduce using rule 12 (algoritmo -> expresionSinRetorno .)
    FOR             reduce using rule 12 (algoritmo -> expresionSinRetorno .)
    WHILE           reduce using rule 12 (algoritmo -> expresionSinRetorno .)
    DO              reduce using rule 12 (algoritmo -> expresionSinRetorno .)
    VOID            reduce using rule 12 (algoritmo -> expresionSinRetorno .)
    VAR             reduce using rule 12 (algoritmo -> expresionSinRetorno .)
    INT             reduce using rule 12 (algoritmo -> expresionSinRetorno .)
    BOOL            reduce using rule 12 (algoritmo -> expresionSinRetorno .)
    DOUBLE          reduce using rule 12 (algoritmo -> expresionSinRetorno .)
    STR             reduce using rule 12 (algoritmo -> expresionSinRetorno .)
    ENTERO          reduce using rule 12 (algoritmo -> expresionSinRetorno .)
    $end            reduce using rule 12 (algoritmo -> expresionSinRetorno .)
    RETURN          reduce using rule 12 (algoritmo -> expresionSinRetorno .)
    LDER            reduce using rule 12 (algoritmo -> expresionSinRetorno .)


state 13

    (46) imprimir -> PRINT . PIZQ opstring PDER END

    PIZQ            shift and go to state 44


state 14

    (15) asignacion -> tipo . VARIABLE IGUAL expresiones END
    (47) input -> tipo . VARIABLE IGUAL INPUT PIZQ PDER END
    (13) funciones -> tipo . VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER

    VARIABLE        shift and go to state 45


state 15

    (16) asignacion -> VARIABLE . IGUAL expresiones END
    (87) valor -> VARIABLE .
    (50) first -> VARIABLE . POINT FIRST PIZQ PDER
    (51) last -> VARIABLE . POINT LAST PIZQ PDER
    (52) length -> VARIABLE . POINT LEN PIZQ PDER
    (55) remove -> VARIABLE . POINT REMOVE PIZQ valor PDER
    (53) add -> VARIABLE . POINT ADD PIZQ valor PDER

    IGUAL           shift and go to state 46
    MAS             reduce using rule 87 (valor -> VARIABLE .)
    RESTA           reduce using rule 87 (valor -> VARIABLE .)
    PROD            reduce using rule 87 (valor -> VARIABLE .)
    DIV             reduce using rule 87 (valor -> VARIABLE .)
    MOD             reduce using rule 87 (valor -> VARIABLE .)
    END             reduce using rule 87 (valor -> VARIABLE .)
    MAYOR           reduce using rule 87 (valor -> VARIABLE .)
    MENOR           reduce using rule 87 (valor -> VARIABLE .)
    MAYORIG         reduce using rule 87 (valor -> VARIABLE .)
    MENORIG         reduce using rule 87 (valor -> VARIABLE .)
    DIGUAL          reduce using rule 87 (valor -> VARIABLE .)
    DIF             reduce using rule 87 (valor -> VARIABLE .)
    POINT           shift and go to state 47


state 16

    (48) expresion -> valor .
    (65) expresion -> valor . operadorMat expresion
    (69) operadorMat -> . MAS
    (70) operadorMat -> . RESTA
    (71) operadorMat -> . PROD
    (72) operadorMat -> . DIV
    (73) operadorMat -> . MOD

    END             reduce using rule 48 (expresion -> valor .)
    MAYOR           reduce using rule 48 (expresion -> valor .)
    MENOR           reduce using rule 48 (expresion -> valor .)
    MAYORIG         reduce using rule 48 (expresion -> valor .)
    MENORIG         reduce using rule 48 (expresion -> valor .)
    DIGUAL          reduce using rule 48 (expresion -> valor .)
    DIF             reduce using rule 48 (expresion -> valor .)
    PDER            reduce using rule 48 (expresion -> valor .)
    MAS             shift and go to state 49
    RESTA           shift and go to state 50
    PROD            shift and go to state 51
    DIV             shift and go to state 52
    MOD             shift and go to state 53

    operadorMat                    shift and go to state 48

state 17

    (88) sentenciaIf -> IF . PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (89) sentenciaIf -> IF . PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf

    PIZQ            shift and go to state 54


state 18

    (96) sentenciaFOR -> FOR . PIZQ parametrosF PDER LIZQ algoritmo LDER

    PIZQ            shift and go to state 55


state 19

    (105) sentenciaWhile -> WHILE . PIZQ comparacion PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> WHILE . PIZQ opLogicas PDER LIZQ algoritmo LDER

    PIZQ            shift and go to state 56


state 20

    (107) sentenciaWhile -> DO . LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (108) sentenciaWhile -> DO . LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END

    LIZQ            shift and go to state 57


state 21

    (14) funciones -> VOID . VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (84) tipo -> VOID .

  ! shift/reduce conflict for VARIABLE resolved as shift
    VARIABLE        shift and go to state 58

  ! VARIABLE        [ reduce using rule 84 (tipo -> VOID .) ]


state 22

    (17) expresionSinRetorno -> funcionStructura . END
    (18) expresionSinRetorno -> funcionStructura .

    END             shift and go to state 59
    PRINT           reduce using rule 18 (expresionSinRetorno -> funcionStructura .)
    VARIABLE        reduce using rule 18 (expresionSinRetorno -> funcionStructura .)
    IF              reduce using rule 18 (expresionSinRetorno -> funcionStructura .)
    FOR             reduce using rule 18 (expresionSinRetorno -> funcionStructura .)
    WHILE           reduce using rule 18 (expresionSinRetorno -> funcionStructura .)
    DO              reduce using rule 18 (expresionSinRetorno -> funcionStructura .)
    VOID            reduce using rule 18 (expresionSinRetorno -> funcionStructura .)
    VAR             reduce using rule 18 (expresionSinRetorno -> funcionStructura .)
    INT             reduce using rule 18 (expresionSinRetorno -> funcionStructura .)
    BOOL            reduce using rule 18 (expresionSinRetorno -> funcionStructura .)
    DOUBLE          reduce using rule 18 (expresionSinRetorno -> funcionStructura .)
    STR             reduce using rule 18 (expresionSinRetorno -> funcionStructura .)
    ENTERO          reduce using rule 18 (expresionSinRetorno -> funcionStructura .)
    $end            reduce using rule 18 (expresionSinRetorno -> funcionStructura .)
    RETURN          reduce using rule 18 (expresionSinRetorno -> funcionStructura .)
    LDER            reduce using rule 18 (expresionSinRetorno -> funcionStructura .)


state 23

    (80) tipo -> VAR .

    VARIABLE        reduce using rule 80 (tipo -> VAR .)


state 24

    (81) tipo -> INT .

    VARIABLE        reduce using rule 81 (tipo -> INT .)


state 25

    (82) tipo -> BOOL .

    VARIABLE        reduce using rule 82 (tipo -> BOOL .)


state 26

    (83) tipo -> DOUBLE .

    VARIABLE        reduce using rule 83 (tipo -> DOUBLE .)


state 27

    (85) tipo -> STR .

    VARIABLE        reduce using rule 85 (tipo -> STR .)


state 28

    (86) valor -> ENTERO .

    MAS             reduce using rule 86 (valor -> ENTERO .)
    RESTA           reduce using rule 86 (valor -> ENTERO .)
    PROD            reduce using rule 86 (valor -> ENTERO .)
    DIV             reduce using rule 86 (valor -> ENTERO .)
    MOD             reduce using rule 86 (valor -> ENTERO .)
    END             reduce using rule 86 (valor -> ENTERO .)
    MAYOR           reduce using rule 86 (valor -> ENTERO .)
    MENOR           reduce using rule 86 (valor -> ENTERO .)
    MAYORIG         reduce using rule 86 (valor -> ENTERO .)
    MENORIG         reduce using rule 86 (valor -> ENTERO .)
    DIGUAL          reduce using rule 86 (valor -> ENTERO .)
    DIF             reduce using rule 86 (valor -> ENTERO .)
    PDER            reduce using rule 86 (valor -> ENTERO .)
    COMA            reduce using rule 86 (valor -> ENTERO .)
    CDER            reduce using rule 86 (valor -> ENTERO .)
    LDER            reduce using rule 86 (valor -> ENTERO .)


state 29

    (19) funcionStructura -> first .

    END             reduce using rule 19 (funcionStructura -> first .)
    PRINT           reduce using rule 19 (funcionStructura -> first .)
    VARIABLE        reduce using rule 19 (funcionStructura -> first .)
    IF              reduce using rule 19 (funcionStructura -> first .)
    FOR             reduce using rule 19 (funcionStructura -> first .)
    WHILE           reduce using rule 19 (funcionStructura -> first .)
    DO              reduce using rule 19 (funcionStructura -> first .)
    VOID            reduce using rule 19 (funcionStructura -> first .)
    VAR             reduce using rule 19 (funcionStructura -> first .)
    INT             reduce using rule 19 (funcionStructura -> first .)
    BOOL            reduce using rule 19 (funcionStructura -> first .)
    DOUBLE          reduce using rule 19 (funcionStructura -> first .)
    STR             reduce using rule 19 (funcionStructura -> first .)
    ENTERO          reduce using rule 19 (funcionStructura -> first .)
    $end            reduce using rule 19 (funcionStructura -> first .)
    RETURN          reduce using rule 19 (funcionStructura -> first .)
    LDER            reduce using rule 19 (funcionStructura -> first .)


state 30

    (20) funcionStructura -> last .

    END             reduce using rule 20 (funcionStructura -> last .)
    PRINT           reduce using rule 20 (funcionStructura -> last .)
    VARIABLE        reduce using rule 20 (funcionStructura -> last .)
    IF              reduce using rule 20 (funcionStructura -> last .)
    FOR             reduce using rule 20 (funcionStructura -> last .)
    WHILE           reduce using rule 20 (funcionStructura -> last .)
    DO              reduce using rule 20 (funcionStructura -> last .)
    VOID            reduce using rule 20 (funcionStructura -> last .)
    VAR             reduce using rule 20 (funcionStructura -> last .)
    INT             reduce using rule 20 (funcionStructura -> last .)
    BOOL            reduce using rule 20 (funcionStructura -> last .)
    DOUBLE          reduce using rule 20 (funcionStructura -> last .)
    STR             reduce using rule 20 (funcionStructura -> last .)
    ENTERO          reduce using rule 20 (funcionStructura -> last .)
    $end            reduce using rule 20 (funcionStructura -> last .)
    RETURN          reduce using rule 20 (funcionStructura -> last .)
    LDER            reduce using rule 20 (funcionStructura -> last .)


state 31

    (21) funcionStructura -> length .

    END             reduce using rule 21 (funcionStructura -> length .)
    PRINT           reduce using rule 21 (funcionStructura -> length .)
    VARIABLE        reduce using rule 21 (funcionStructura -> length .)
    IF              reduce using rule 21 (funcionStructura -> length .)
    FOR             reduce using rule 21 (funcionStructura -> length .)
    WHILE           reduce using rule 21 (funcionStructura -> length .)
    DO              reduce using rule 21 (funcionStructura -> length .)
    VOID            reduce using rule 21 (funcionStructura -> length .)
    VAR             reduce using rule 21 (funcionStructura -> length .)
    INT             reduce using rule 21 (funcionStructura -> length .)
    BOOL            reduce using rule 21 (funcionStructura -> length .)
    DOUBLE          reduce using rule 21 (funcionStructura -> length .)
    STR             reduce using rule 21 (funcionStructura -> length .)
    ENTERO          reduce using rule 21 (funcionStructura -> length .)
    $end            reduce using rule 21 (funcionStructura -> length .)
    RETURN          reduce using rule 21 (funcionStructura -> length .)
    LDER            reduce using rule 21 (funcionStructura -> length .)


state 32

    (22) funcionStructura -> remove .

    END             reduce using rule 22 (funcionStructura -> remove .)
    PRINT           reduce using rule 22 (funcionStructura -> remove .)
    VARIABLE        reduce using rule 22 (funcionStructura -> remove .)
    IF              reduce using rule 22 (funcionStructura -> remove .)
    FOR             reduce using rule 22 (funcionStructura -> remove .)
    WHILE           reduce using rule 22 (funcionStructura -> remove .)
    DO              reduce using rule 22 (funcionStructura -> remove .)
    VOID            reduce using rule 22 (funcionStructura -> remove .)
    VAR             reduce using rule 22 (funcionStructura -> remove .)
    INT             reduce using rule 22 (funcionStructura -> remove .)
    BOOL            reduce using rule 22 (funcionStructura -> remove .)
    DOUBLE          reduce using rule 22 (funcionStructura -> remove .)
    STR             reduce using rule 22 (funcionStructura -> remove .)
    ENTERO          reduce using rule 22 (funcionStructura -> remove .)
    $end            reduce using rule 22 (funcionStructura -> remove .)
    RETURN          reduce using rule 22 (funcionStructura -> remove .)
    LDER            reduce using rule 22 (funcionStructura -> remove .)


state 33

    (23) funcionStructura -> add .

    END             reduce using rule 23 (funcionStructura -> add .)
    PRINT           reduce using rule 23 (funcionStructura -> add .)
    VARIABLE        reduce using rule 23 (funcionStructura -> add .)
    IF              reduce using rule 23 (funcionStructura -> add .)
    FOR             reduce using rule 23 (funcionStructura -> add .)
    WHILE           reduce using rule 23 (funcionStructura -> add .)
    DO              reduce using rule 23 (funcionStructura -> add .)
    VOID            reduce using rule 23 (funcionStructura -> add .)
    VAR             reduce using rule 23 (funcionStructura -> add .)
    INT             reduce using rule 23 (funcionStructura -> add .)
    BOOL            reduce using rule 23 (funcionStructura -> add .)
    DOUBLE          reduce using rule 23 (funcionStructura -> add .)
    STR             reduce using rule 23 (funcionStructura -> add .)
    ENTERO          reduce using rule 23 (funcionStructura -> add .)
    $end            reduce using rule 23 (funcionStructura -> add .)
    RETURN          reduce using rule 23 (funcionStructura -> add .)
    LDER            reduce using rule 23 (funcionStructura -> add .)


state 34

    (2) codigo -> algoritmo codigo .

    $end            reduce using rule 2 (codigo -> algoritmo codigo .)
    RETURN          reduce using rule 2 (codigo -> algoritmo codigo .)
    LDER            reduce using rule 2 (codigo -> algoritmo codigo .)


state 35

    (5) algoritmo -> expresion END .

    PRINT           reduce using rule 5 (algoritmo -> expresion END .)
    VARIABLE        reduce using rule 5 (algoritmo -> expresion END .)
    IF              reduce using rule 5 (algoritmo -> expresion END .)
    FOR             reduce using rule 5 (algoritmo -> expresion END .)
    WHILE           reduce using rule 5 (algoritmo -> expresion END .)
    DO              reduce using rule 5 (algoritmo -> expresion END .)
    VOID            reduce using rule 5 (algoritmo -> expresion END .)
    VAR             reduce using rule 5 (algoritmo -> expresion END .)
    INT             reduce using rule 5 (algoritmo -> expresion END .)
    BOOL            reduce using rule 5 (algoritmo -> expresion END .)
    DOUBLE          reduce using rule 5 (algoritmo -> expresion END .)
    STR             reduce using rule 5 (algoritmo -> expresion END .)
    ENTERO          reduce using rule 5 (algoritmo -> expresion END .)
    $end            reduce using rule 5 (algoritmo -> expresion END .)
    RETURN          reduce using rule 5 (algoritmo -> expresion END .)
    LDER            reduce using rule 5 (algoritmo -> expresion END .)


state 36

    (66) comparacion -> expresion operadorComp . expresion
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE

    ENTERO          shift and go to state 28
    VARIABLE        shift and go to state 61

    expresion                      shift and go to state 60
    valor                          shift and go to state 16

state 37

    (74) operadorComp -> MAYOR .

    ENTERO          reduce using rule 74 (operadorComp -> MAYOR .)
    VARIABLE        reduce using rule 74 (operadorComp -> MAYOR .)


state 38

    (75) operadorComp -> MENOR .

    ENTERO          reduce using rule 75 (operadorComp -> MENOR .)
    VARIABLE        reduce using rule 75 (operadorComp -> MENOR .)


state 39

    (76) operadorComp -> MAYORIG .

    ENTERO          reduce using rule 76 (operadorComp -> MAYORIG .)
    VARIABLE        reduce using rule 76 (operadorComp -> MAYORIG .)


state 40

    (77) operadorComp -> MENORIG .

    ENTERO          reduce using rule 77 (operadorComp -> MENORIG .)
    VARIABLE        reduce using rule 77 (operadorComp -> MENORIG .)


state 41

    (78) operadorComp -> DIGUAL .

    ENTERO          reduce using rule 78 (operadorComp -> DIGUAL .)
    VARIABLE        reduce using rule 78 (operadorComp -> DIGUAL .)


state 42

    (79) operadorComp -> DIF .

    ENTERO          reduce using rule 79 (operadorComp -> DIF .)
    VARIABLE        reduce using rule 79 (operadorComp -> DIF .)


state 43

    (6) algoritmo -> comparacion END .

    PRINT           reduce using rule 6 (algoritmo -> comparacion END .)
    VARIABLE        reduce using rule 6 (algoritmo -> comparacion END .)
    IF              reduce using rule 6 (algoritmo -> comparacion END .)
    FOR             reduce using rule 6 (algoritmo -> comparacion END .)
    WHILE           reduce using rule 6 (algoritmo -> comparacion END .)
    DO              reduce using rule 6 (algoritmo -> comparacion END .)
    VOID            reduce using rule 6 (algoritmo -> comparacion END .)
    VAR             reduce using rule 6 (algoritmo -> comparacion END .)
    INT             reduce using rule 6 (algoritmo -> comparacion END .)
    BOOL            reduce using rule 6 (algoritmo -> comparacion END .)
    DOUBLE          reduce using rule 6 (algoritmo -> comparacion END .)
    STR             reduce using rule 6 (algoritmo -> comparacion END .)
    ENTERO          reduce using rule 6 (algoritmo -> comparacion END .)
    $end            reduce using rule 6 (algoritmo -> comparacion END .)
    RETURN          reduce using rule 6 (algoritmo -> comparacion END .)
    LDER            reduce using rule 6 (algoritmo -> comparacion END .)


state 44

    (46) imprimir -> PRINT PIZQ . opstring PDER END
    (42) opstring -> . string
    (43) opstring -> . VARIABLE
    (44) opstring -> . string MAS opstring
    (45) opstring -> . VARIABLE MAS opstring
    (27) string -> . STRING

    VARIABLE        shift and go to state 64
    STRING          shift and go to state 65

    opstring                       shift and go to state 62
    string                         shift and go to state 63

state 45

    (15) asignacion -> tipo VARIABLE . IGUAL expresiones END
    (47) input -> tipo VARIABLE . IGUAL INPUT PIZQ PDER END
    (13) funciones -> tipo VARIABLE . PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER

    IGUAL           shift and go to state 66
    PIZQ            shift and go to state 67


state 46

    (16) asignacion -> VARIABLE IGUAL . expresiones END
    (28) expresiones -> . expresion
    (29) expresiones -> . comparacion
    (30) expresiones -> . BOOLEAN
    (31) expresiones -> . opstring
    (32) expresiones -> . indexacion
    (33) expresiones -> . lista
    (34) expresiones -> . conjuntos
    (35) expresiones -> . first
    (36) expresiones -> . last
    (37) expresiones -> . length
    (38) expresiones -> . remove
    (39) expresiones -> . add
    (40) expresiones -> . slice
    (41) expresiones -> . opLogicas
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (66) comparacion -> . expresion operadorComp expresion
    (42) opstring -> . string
    (43) opstring -> . VARIABLE
    (44) opstring -> . string MAS opstring
    (45) opstring -> . VARIABLE MAS opstring
    (109) indexacion -> . VARIABLE CIZQ valor CDER
    (49) lista -> . CIZQ elementos CDER
    (56) conjuntos -> . LIZQ elementos LDER
    (50) first -> . VARIABLE POINT FIRST PIZQ PDER
    (51) last -> . VARIABLE POINT LAST PIZQ PDER
    (52) length -> . VARIABLE POINT LEN PIZQ PDER
    (55) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (53) add -> . VARIABLE POINT ADD PIZQ valor PDER
    (54) slice -> . VARIABLE POINT SLICE PIZQ valor COMA valor PDER
    (59) opLogicas -> . terminoLogico
    (60) opLogicas -> . terminoLogico operadorLog terminoLogico
    (61) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE
    (27) string -> . STRING
    (62) terminoLogico -> . VARIABLE
    (63) terminoLogico -> . BOOLEAN
    (64) terminoLogico -> . PIZQ comparacion PDER

    BOOLEAN         shift and go to state 72
    VARIABLE        shift and go to state 68
    CIZQ            shift and go to state 84
    LIZQ            shift and go to state 85
    ENTERO          shift and go to state 28
    STRING          shift and go to state 65
    PIZQ            shift and go to state 86

    expresiones                    shift and go to state 69
    expresion                      shift and go to state 70
    comparacion                    shift and go to state 71
    opstring                       shift and go to state 73
    indexacion                     shift and go to state 74
    lista                          shift and go to state 75
    conjuntos                      shift and go to state 76
    first                          shift and go to state 77
    last                           shift and go to state 78
    length                         shift and go to state 79
    remove                         shift and go to state 80
    add                            shift and go to state 81
    slice                          shift and go to state 82
    opLogicas                      shift and go to state 83
    valor                          shift and go to state 16
    string                         shift and go to state 63
    terminoLogico                  shift and go to state 87

state 47

    (50) first -> VARIABLE POINT . FIRST PIZQ PDER
    (51) last -> VARIABLE POINT . LAST PIZQ PDER
    (52) length -> VARIABLE POINT . LEN PIZQ PDER
    (55) remove -> VARIABLE POINT . REMOVE PIZQ valor PDER
    (53) add -> VARIABLE POINT . ADD PIZQ valor PDER

    FIRST           shift and go to state 88
    LAST            shift and go to state 89
    LEN             shift and go to state 90
    REMOVE          shift and go to state 91
    ADD             shift and go to state 92


state 48

    (65) expresion -> valor operadorMat . expresion
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE

    ENTERO          shift and go to state 28
    VARIABLE        shift and go to state 61

    valor                          shift and go to state 16
    expresion                      shift and go to state 93

state 49

    (69) operadorMat -> MAS .

    ENTERO          reduce using rule 69 (operadorMat -> MAS .)
    VARIABLE        reduce using rule 69 (operadorMat -> MAS .)


state 50

    (70) operadorMat -> RESTA .

    ENTERO          reduce using rule 70 (operadorMat -> RESTA .)
    VARIABLE        reduce using rule 70 (operadorMat -> RESTA .)


state 51

    (71) operadorMat -> PROD .

    ENTERO          reduce using rule 71 (operadorMat -> PROD .)
    VARIABLE        reduce using rule 71 (operadorMat -> PROD .)


state 52

    (72) operadorMat -> DIV .

    ENTERO          reduce using rule 72 (operadorMat -> DIV .)
    VARIABLE        reduce using rule 72 (operadorMat -> DIV .)


state 53

    (73) operadorMat -> MOD .

    ENTERO          reduce using rule 73 (operadorMat -> MOD .)
    VARIABLE        reduce using rule 73 (operadorMat -> MOD .)


state 54

    (88) sentenciaIf -> IF PIZQ . comparacion PDER LIZQ algoritmo LDER varianteIf
    (89) sentenciaIf -> IF PIZQ . opLogicas PDER LIZQ algoritmo LDER varianteIf
    (66) comparacion -> . expresion operadorComp expresion
    (59) opLogicas -> . terminoLogico
    (60) opLogicas -> . terminoLogico operadorLog terminoLogico
    (61) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (62) terminoLogico -> . VARIABLE
    (63) terminoLogico -> . BOOLEAN
    (64) terminoLogico -> . PIZQ comparacion PDER
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE

    VARIABLE        shift and go to state 97
    BOOLEAN         shift and go to state 98
    PIZQ            shift and go to state 86
    ENTERO          shift and go to state 28

    comparacion                    shift and go to state 94
    opLogicas                      shift and go to state 95
    expresion                      shift and go to state 96
    terminoLogico                  shift and go to state 87
    valor                          shift and go to state 16

state 55

    (96) sentenciaFOR -> FOR PIZQ . parametrosF PDER LIZQ algoritmo LDER
    (97) parametrosF -> . inicializacionFor END comparacion END VARIABLE increDecre
    (98) parametrosF -> . inicializacionFor END opLogicas END VARIABLE increDecre
    (99) parametrosF -> . VARIABLE IN VARIABLE
    (100) inicializacionFor -> . VARIABLE IGUAL ENTERO
    (101) inicializacionFor -> . INT VARIABLE IGUAL ENTERO
    (102) inicializacionFor -> . VAR VARIABLE IGUAL ENTERO

    VARIABLE        shift and go to state 101
    INT             shift and go to state 102
    VAR             shift and go to state 103

    parametrosF                    shift and go to state 99
    inicializacionFor              shift and go to state 100

state 56

    (105) sentenciaWhile -> WHILE PIZQ . comparacion PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> WHILE PIZQ . opLogicas PDER LIZQ algoritmo LDER
    (66) comparacion -> . expresion operadorComp expresion
    (59) opLogicas -> . terminoLogico
    (60) opLogicas -> . terminoLogico operadorLog terminoLogico
    (61) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (62) terminoLogico -> . VARIABLE
    (63) terminoLogico -> . BOOLEAN
    (64) terminoLogico -> . PIZQ comparacion PDER
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE

    VARIABLE        shift and go to state 97
    BOOLEAN         shift and go to state 98
    PIZQ            shift and go to state 86
    ENTERO          shift and go to state 28

    comparacion                    shift and go to state 104
    opLogicas                      shift and go to state 105
    expresion                      shift and go to state 96
    terminoLogico                  shift and go to state 87
    valor                          shift and go to state 16

state 57

    (107) sentenciaWhile -> DO LIZQ . algoritmo LDER WHILE PIZQ comparacion PDER END
    (108) sentenciaWhile -> DO LIZQ . algoritmo LDER WHILE PIZQ opLogicas PDER END
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (12) algoritmo -> . expresionSinRetorno
    (46) imprimir -> . PRINT PIZQ opstring PDER END
    (15) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (16) asignacion -> . VARIABLE IGUAL expresiones END
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (66) comparacion -> . expresion operadorComp expresion
    (88) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (89) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (96) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (105) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (108) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (47) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (13) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (14) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (17) expresionSinRetorno -> . funcionStructura END
    (18) expresionSinRetorno -> . funcionStructura
    (80) tipo -> . VAR
    (81) tipo -> . INT
    (82) tipo -> . BOOL
    (83) tipo -> . DOUBLE
    (84) tipo -> . VOID
    (85) tipo -> . STR
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE
    (19) funcionStructura -> . first
    (20) funcionStructura -> . last
    (21) funcionStructura -> . length
    (22) funcionStructura -> . remove
    (23) funcionStructura -> . add
    (50) first -> . VARIABLE POINT FIRST PIZQ PDER
    (51) last -> . VARIABLE POINT LAST PIZQ PDER
    (52) length -> . VARIABLE POINT LEN PIZQ PDER
    (55) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (53) add -> . VARIABLE POINT ADD PIZQ valor PDER

    PRINT           shift and go to state 13
    VARIABLE        shift and go to state 15
    IF              shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    VOID            shift and go to state 21
    VAR             shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    DOUBLE          shift and go to state 26
    STR             shift and go to state 27
    ENTERO          shift and go to state 28

    algoritmo                      shift and go to state 106
    comparacion                    shift and go to state 6
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    expresionSinRetorno            shift and go to state 12
    tipo                           shift and go to state 14
    valor                          shift and go to state 16
    funcionStructura               shift and go to state 22
    first                          shift and go to state 29
    last                           shift and go to state 30
    length                         shift and go to state 31
    remove                         shift and go to state 32
    add                            shift and go to state 33

state 58

    (14) funciones -> VOID VARIABLE . PIZQ parametros PDER LIZQ codigo LDER

    PIZQ            shift and go to state 107


state 59

    (17) expresionSinRetorno -> funcionStructura END .

    PRINT           reduce using rule 17 (expresionSinRetorno -> funcionStructura END .)
    VARIABLE        reduce using rule 17 (expresionSinRetorno -> funcionStructura END .)
    IF              reduce using rule 17 (expresionSinRetorno -> funcionStructura END .)
    FOR             reduce using rule 17 (expresionSinRetorno -> funcionStructura END .)
    WHILE           reduce using rule 17 (expresionSinRetorno -> funcionStructura END .)
    DO              reduce using rule 17 (expresionSinRetorno -> funcionStructura END .)
    VOID            reduce using rule 17 (expresionSinRetorno -> funcionStructura END .)
    VAR             reduce using rule 17 (expresionSinRetorno -> funcionStructura END .)
    INT             reduce using rule 17 (expresionSinRetorno -> funcionStructura END .)
    BOOL            reduce using rule 17 (expresionSinRetorno -> funcionStructura END .)
    DOUBLE          reduce using rule 17 (expresionSinRetorno -> funcionStructura END .)
    STR             reduce using rule 17 (expresionSinRetorno -> funcionStructura END .)
    ENTERO          reduce using rule 17 (expresionSinRetorno -> funcionStructura END .)
    $end            reduce using rule 17 (expresionSinRetorno -> funcionStructura END .)
    RETURN          reduce using rule 17 (expresionSinRetorno -> funcionStructura END .)
    LDER            reduce using rule 17 (expresionSinRetorno -> funcionStructura END .)


state 60

    (66) comparacion -> expresion operadorComp expresion .

    END             reduce using rule 66 (comparacion -> expresion operadorComp expresion .)
    PDER            reduce using rule 66 (comparacion -> expresion operadorComp expresion .)


state 61

    (87) valor -> VARIABLE .

    MAS             reduce using rule 87 (valor -> VARIABLE .)
    RESTA           reduce using rule 87 (valor -> VARIABLE .)
    PROD            reduce using rule 87 (valor -> VARIABLE .)
    DIV             reduce using rule 87 (valor -> VARIABLE .)
    MOD             reduce using rule 87 (valor -> VARIABLE .)
    END             reduce using rule 87 (valor -> VARIABLE .)
    PDER            reduce using rule 87 (valor -> VARIABLE .)
    MAYOR           reduce using rule 87 (valor -> VARIABLE .)
    MENOR           reduce using rule 87 (valor -> VARIABLE .)
    MAYORIG         reduce using rule 87 (valor -> VARIABLE .)
    MENORIG         reduce using rule 87 (valor -> VARIABLE .)
    DIGUAL          reduce using rule 87 (valor -> VARIABLE .)
    DIF             reduce using rule 87 (valor -> VARIABLE .)
    COMA            reduce using rule 87 (valor -> VARIABLE .)
    CDER            reduce using rule 87 (valor -> VARIABLE .)
    LDER            reduce using rule 87 (valor -> VARIABLE .)


state 62

    (46) imprimir -> PRINT PIZQ opstring . PDER END

    PDER            shift and go to state 108


state 63

    (42) opstring -> string .
    (44) opstring -> string . MAS opstring

    PDER            reduce using rule 42 (opstring -> string .)
    END             reduce using rule 42 (opstring -> string .)
    MAS             shift and go to state 109


state 64

    (43) opstring -> VARIABLE .
    (45) opstring -> VARIABLE . MAS opstring

    PDER            reduce using rule 43 (opstring -> VARIABLE .)
    END             reduce using rule 43 (opstring -> VARIABLE .)
    MAS             shift and go to state 110


state 65

    (27) string -> STRING .

    MAS             reduce using rule 27 (string -> STRING .)
    PDER            reduce using rule 27 (string -> STRING .)
    END             reduce using rule 27 (string -> STRING .)


state 66

    (15) asignacion -> tipo VARIABLE IGUAL . expresiones END
    (47) input -> tipo VARIABLE IGUAL . INPUT PIZQ PDER END
    (28) expresiones -> . expresion
    (29) expresiones -> . comparacion
    (30) expresiones -> . BOOLEAN
    (31) expresiones -> . opstring
    (32) expresiones -> . indexacion
    (33) expresiones -> . lista
    (34) expresiones -> . conjuntos
    (35) expresiones -> . first
    (36) expresiones -> . last
    (37) expresiones -> . length
    (38) expresiones -> . remove
    (39) expresiones -> . add
    (40) expresiones -> . slice
    (41) expresiones -> . opLogicas
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (66) comparacion -> . expresion operadorComp expresion
    (42) opstring -> . string
    (43) opstring -> . VARIABLE
    (44) opstring -> . string MAS opstring
    (45) opstring -> . VARIABLE MAS opstring
    (109) indexacion -> . VARIABLE CIZQ valor CDER
    (49) lista -> . CIZQ elementos CDER
    (56) conjuntos -> . LIZQ elementos LDER
    (50) first -> . VARIABLE POINT FIRST PIZQ PDER
    (51) last -> . VARIABLE POINT LAST PIZQ PDER
    (52) length -> . VARIABLE POINT LEN PIZQ PDER
    (55) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (53) add -> . VARIABLE POINT ADD PIZQ valor PDER
    (54) slice -> . VARIABLE POINT SLICE PIZQ valor COMA valor PDER
    (59) opLogicas -> . terminoLogico
    (60) opLogicas -> . terminoLogico operadorLog terminoLogico
    (61) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE
    (27) string -> . STRING
    (62) terminoLogico -> . VARIABLE
    (63) terminoLogico -> . BOOLEAN
    (64) terminoLogico -> . PIZQ comparacion PDER

    INPUT           shift and go to state 112
    BOOLEAN         shift and go to state 72
    VARIABLE        shift and go to state 68
    CIZQ            shift and go to state 84
    LIZQ            shift and go to state 85
    ENTERO          shift and go to state 28
    STRING          shift and go to state 65
    PIZQ            shift and go to state 86

    expresiones                    shift and go to state 111
    expresion                      shift and go to state 70
    comparacion                    shift and go to state 71
    opstring                       shift and go to state 73
    indexacion                     shift and go to state 74
    lista                          shift and go to state 75
    conjuntos                      shift and go to state 76
    first                          shift and go to state 77
    last                           shift and go to state 78
    length                         shift and go to state 79
    remove                         shift and go to state 80
    add                            shift and go to state 81
    slice                          shift and go to state 82
    opLogicas                      shift and go to state 83
    valor                          shift and go to state 16
    string                         shift and go to state 63
    terminoLogico                  shift and go to state 87

state 67

    (13) funciones -> tipo VARIABLE PIZQ . parametros PDER LIZQ codigo RETURN expresion END LDER
    (24) parametros -> . empty
    (25) parametros -> . tipo VARIABLE
    (26) parametros -> . tipo VARIABLE COMA parametros
    (110) empty -> .
    (80) tipo -> . VAR
    (81) tipo -> . INT
    (82) tipo -> . BOOL
    (83) tipo -> . DOUBLE
    (84) tipo -> . VOID
    (85) tipo -> . STR

    PDER            reduce using rule 110 (empty -> .)
    VAR             shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    DOUBLE          shift and go to state 26
    VOID            shift and go to state 116
    STR             shift and go to state 27

    tipo                           shift and go to state 113
    parametros                     shift and go to state 114
    empty                          shift and go to state 115

state 68

    (43) opstring -> VARIABLE .
    (45) opstring -> VARIABLE . MAS opstring
    (109) indexacion -> VARIABLE . CIZQ valor CDER
    (50) first -> VARIABLE . POINT FIRST PIZQ PDER
    (51) last -> VARIABLE . POINT LAST PIZQ PDER
    (52) length -> VARIABLE . POINT LEN PIZQ PDER
    (55) remove -> VARIABLE . POINT REMOVE PIZQ valor PDER
    (53) add -> VARIABLE . POINT ADD PIZQ valor PDER
    (54) slice -> VARIABLE . POINT SLICE PIZQ valor COMA valor PDER
    (87) valor -> VARIABLE .
    (62) terminoLogico -> VARIABLE .

  ! shift/reduce conflict for MAS resolved as shift
  ! reduce/reduce conflict for END resolved using rule 43 (opstring -> VARIABLE .)
  ! reduce/reduce conflict for END resolved using rule 43 (opstring -> VARIABLE .)
    END             reduce using rule 43 (opstring -> VARIABLE .)
    MAS             shift and go to state 110
    CIZQ            shift and go to state 117
    POINT           shift and go to state 118
    RESTA           reduce using rule 87 (valor -> VARIABLE .)
    PROD            reduce using rule 87 (valor -> VARIABLE .)
    DIV             reduce using rule 87 (valor -> VARIABLE .)
    MOD             reduce using rule 87 (valor -> VARIABLE .)
    MAYOR           reduce using rule 87 (valor -> VARIABLE .)
    MENOR           reduce using rule 87 (valor -> VARIABLE .)
    MAYORIG         reduce using rule 87 (valor -> VARIABLE .)
    MENORIG         reduce using rule 87 (valor -> VARIABLE .)
    DIGUAL          reduce using rule 87 (valor -> VARIABLE .)
    DIF             reduce using rule 87 (valor -> VARIABLE .)
    AND             reduce using rule 62 (terminoLogico -> VARIABLE .)
    OR              reduce using rule 62 (terminoLogico -> VARIABLE .)

  ! MAS             [ reduce using rule 87 (valor -> VARIABLE .) ]
  ! END             [ reduce using rule 87 (valor -> VARIABLE .) ]
  ! END             [ reduce using rule 62 (terminoLogico -> VARIABLE .) ]


state 69

    (16) asignacion -> VARIABLE IGUAL expresiones . END

    END             shift and go to state 119


state 70

    (28) expresiones -> expresion .
    (66) comparacion -> expresion . operadorComp expresion
    (74) operadorComp -> . MAYOR
    (75) operadorComp -> . MENOR
    (76) operadorComp -> . MAYORIG
    (77) operadorComp -> . MENORIG
    (78) operadorComp -> . DIGUAL
    (79) operadorComp -> . DIF

    END             reduce using rule 28 (expresiones -> expresion .)
    MAYOR           shift and go to state 37
    MENOR           shift and go to state 38
    MAYORIG         shift and go to state 39
    MENORIG         shift and go to state 40
    DIGUAL          shift and go to state 41
    DIF             shift and go to state 42

    operadorComp                   shift and go to state 36

state 71

    (29) expresiones -> comparacion .

    END             reduce using rule 29 (expresiones -> comparacion .)


state 72

    (30) expresiones -> BOOLEAN .
    (63) terminoLogico -> BOOLEAN .

  ! reduce/reduce conflict for END resolved using rule 30 (expresiones -> BOOLEAN .)
    END             reduce using rule 30 (expresiones -> BOOLEAN .)
    AND             reduce using rule 63 (terminoLogico -> BOOLEAN .)
    OR              reduce using rule 63 (terminoLogico -> BOOLEAN .)

  ! END             [ reduce using rule 63 (terminoLogico -> BOOLEAN .) ]


state 73

    (31) expresiones -> opstring .

    END             reduce using rule 31 (expresiones -> opstring .)


state 74

    (32) expresiones -> indexacion .

    END             reduce using rule 32 (expresiones -> indexacion .)


state 75

    (33) expresiones -> lista .

    END             reduce using rule 33 (expresiones -> lista .)


state 76

    (34) expresiones -> conjuntos .

    END             reduce using rule 34 (expresiones -> conjuntos .)


state 77

    (35) expresiones -> first .

    END             reduce using rule 35 (expresiones -> first .)


state 78

    (36) expresiones -> last .

    END             reduce using rule 36 (expresiones -> last .)


state 79

    (37) expresiones -> length .

    END             reduce using rule 37 (expresiones -> length .)


state 80

    (38) expresiones -> remove .

    END             reduce using rule 38 (expresiones -> remove .)


state 81

    (39) expresiones -> add .

    END             reduce using rule 39 (expresiones -> add .)


state 82

    (40) expresiones -> slice .

    END             reduce using rule 40 (expresiones -> slice .)


state 83

    (41) expresiones -> opLogicas .

    END             reduce using rule 41 (expresiones -> opLogicas .)


state 84

    (49) lista -> CIZQ . elementos CDER
    (57) elementos -> . valor
    (58) elementos -> . valor COMA elementos
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE

    ENTERO          shift and go to state 28
    VARIABLE        shift and go to state 61

    elementos                      shift and go to state 120
    valor                          shift and go to state 121

state 85

    (56) conjuntos -> LIZQ . elementos LDER
    (57) elementos -> . valor
    (58) elementos -> . valor COMA elementos
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE

    ENTERO          shift and go to state 28
    VARIABLE        shift and go to state 61

    elementos                      shift and go to state 122
    valor                          shift and go to state 121

state 86

    (64) terminoLogico -> PIZQ . comparacion PDER
    (66) comparacion -> . expresion operadorComp expresion
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE

    ENTERO          shift and go to state 28
    VARIABLE        shift and go to state 61

    comparacion                    shift and go to state 123
    expresion                      shift and go to state 96
    valor                          shift and go to state 16

state 87

    (59) opLogicas -> terminoLogico .
    (60) opLogicas -> terminoLogico . operadorLog terminoLogico
    (61) opLogicas -> terminoLogico . operadorLog terminoLogico operadorLog opLogicas
    (67) operadorLog -> . AND
    (68) operadorLog -> . OR

    END             reduce using rule 59 (opLogicas -> terminoLogico .)
    PDER            reduce using rule 59 (opLogicas -> terminoLogico .)
    AND             shift and go to state 125
    OR              shift and go to state 126

    operadorLog                    shift and go to state 124

state 88

    (50) first -> VARIABLE POINT FIRST . PIZQ PDER

    PIZQ            shift and go to state 127


state 89

    (51) last -> VARIABLE POINT LAST . PIZQ PDER

    PIZQ            shift and go to state 128


state 90

    (52) length -> VARIABLE POINT LEN . PIZQ PDER

    PIZQ            shift and go to state 129


state 91

    (55) remove -> VARIABLE POINT REMOVE . PIZQ valor PDER

    PIZQ            shift and go to state 130


state 92

    (53) add -> VARIABLE POINT ADD . PIZQ valor PDER

    PIZQ            shift and go to state 131


state 93

    (65) expresion -> valor operadorMat expresion .

    END             reduce using rule 65 (expresion -> valor operadorMat expresion .)
    MAYOR           reduce using rule 65 (expresion -> valor operadorMat expresion .)
    MENOR           reduce using rule 65 (expresion -> valor operadorMat expresion .)
    MAYORIG         reduce using rule 65 (expresion -> valor operadorMat expresion .)
    MENORIG         reduce using rule 65 (expresion -> valor operadorMat expresion .)
    DIGUAL          reduce using rule 65 (expresion -> valor operadorMat expresion .)
    DIF             reduce using rule 65 (expresion -> valor operadorMat expresion .)
    PDER            reduce using rule 65 (expresion -> valor operadorMat expresion .)


state 94

    (88) sentenciaIf -> IF PIZQ comparacion . PDER LIZQ algoritmo LDER varianteIf

    PDER            shift and go to state 132


state 95

    (89) sentenciaIf -> IF PIZQ opLogicas . PDER LIZQ algoritmo LDER varianteIf

    PDER            shift and go to state 133


state 96

    (66) comparacion -> expresion . operadorComp expresion
    (74) operadorComp -> . MAYOR
    (75) operadorComp -> . MENOR
    (76) operadorComp -> . MAYORIG
    (77) operadorComp -> . MENORIG
    (78) operadorComp -> . DIGUAL
    (79) operadorComp -> . DIF

    MAYOR           shift and go to state 37
    MENOR           shift and go to state 38
    MAYORIG         shift and go to state 39
    MENORIG         shift and go to state 40
    DIGUAL          shift and go to state 41
    DIF             shift and go to state 42

    operadorComp                   shift and go to state 36

state 97

    (62) terminoLogico -> VARIABLE .
    (87) valor -> VARIABLE .

    AND             reduce using rule 62 (terminoLogico -> VARIABLE .)
    OR              reduce using rule 62 (terminoLogico -> VARIABLE .)
    PDER            reduce using rule 62 (terminoLogico -> VARIABLE .)
    END             reduce using rule 62 (terminoLogico -> VARIABLE .)
    MAS             reduce using rule 87 (valor -> VARIABLE .)
    RESTA           reduce using rule 87 (valor -> VARIABLE .)
    PROD            reduce using rule 87 (valor -> VARIABLE .)
    DIV             reduce using rule 87 (valor -> VARIABLE .)
    MOD             reduce using rule 87 (valor -> VARIABLE .)
    MAYOR           reduce using rule 87 (valor -> VARIABLE .)
    MENOR           reduce using rule 87 (valor -> VARIABLE .)
    MAYORIG         reduce using rule 87 (valor -> VARIABLE .)
    MENORIG         reduce using rule 87 (valor -> VARIABLE .)
    DIGUAL          reduce using rule 87 (valor -> VARIABLE .)
    DIF             reduce using rule 87 (valor -> VARIABLE .)


state 98

    (63) terminoLogico -> BOOLEAN .

    AND             reduce using rule 63 (terminoLogico -> BOOLEAN .)
    OR              reduce using rule 63 (terminoLogico -> BOOLEAN .)
    PDER            reduce using rule 63 (terminoLogico -> BOOLEAN .)
    END             reduce using rule 63 (terminoLogico -> BOOLEAN .)


state 99

    (96) sentenciaFOR -> FOR PIZQ parametrosF . PDER LIZQ algoritmo LDER

    PDER            shift and go to state 134


state 100

    (97) parametrosF -> inicializacionFor . END comparacion END VARIABLE increDecre
    (98) parametrosF -> inicializacionFor . END opLogicas END VARIABLE increDecre

    END             shift and go to state 135


state 101

    (99) parametrosF -> VARIABLE . IN VARIABLE
    (100) inicializacionFor -> VARIABLE . IGUAL ENTERO

    IN              shift and go to state 136
    IGUAL           shift and go to state 137


state 102

    (101) inicializacionFor -> INT . VARIABLE IGUAL ENTERO

    VARIABLE        shift and go to state 138


state 103

    (102) inicializacionFor -> VAR . VARIABLE IGUAL ENTERO

    VARIABLE        shift and go to state 139


state 104

    (105) sentenciaWhile -> WHILE PIZQ comparacion . PDER LIZQ algoritmo LDER

    PDER            shift and go to state 140


state 105

    (106) sentenciaWhile -> WHILE PIZQ opLogicas . PDER LIZQ algoritmo LDER

    PDER            shift and go to state 141


state 106

    (107) sentenciaWhile -> DO LIZQ algoritmo . LDER WHILE PIZQ comparacion PDER END
    (108) sentenciaWhile -> DO LIZQ algoritmo . LDER WHILE PIZQ opLogicas PDER END

    LDER            shift and go to state 142


state 107

    (14) funciones -> VOID VARIABLE PIZQ . parametros PDER LIZQ codigo LDER
    (24) parametros -> . empty
    (25) parametros -> . tipo VARIABLE
    (26) parametros -> . tipo VARIABLE COMA parametros
    (110) empty -> .
    (80) tipo -> . VAR
    (81) tipo -> . INT
    (82) tipo -> . BOOL
    (83) tipo -> . DOUBLE
    (84) tipo -> . VOID
    (85) tipo -> . STR

    PDER            reduce using rule 110 (empty -> .)
    VAR             shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    DOUBLE          shift and go to state 26
    VOID            shift and go to state 116
    STR             shift and go to state 27

    parametros                     shift and go to state 143
    empty                          shift and go to state 115
    tipo                           shift and go to state 113

state 108

    (46) imprimir -> PRINT PIZQ opstring PDER . END

    END             shift and go to state 144


state 109

    (44) opstring -> string MAS . opstring
    (42) opstring -> . string
    (43) opstring -> . VARIABLE
    (44) opstring -> . string MAS opstring
    (45) opstring -> . VARIABLE MAS opstring
    (27) string -> . STRING

    VARIABLE        shift and go to state 64
    STRING          shift and go to state 65

    string                         shift and go to state 63
    opstring                       shift and go to state 145

state 110

    (45) opstring -> VARIABLE MAS . opstring
    (42) opstring -> . string
    (43) opstring -> . VARIABLE
    (44) opstring -> . string MAS opstring
    (45) opstring -> . VARIABLE MAS opstring
    (27) string -> . STRING

    VARIABLE        shift and go to state 64
    STRING          shift and go to state 65

    opstring                       shift and go to state 146
    string                         shift and go to state 63

state 111

    (15) asignacion -> tipo VARIABLE IGUAL expresiones . END

    END             shift and go to state 147


state 112

    (47) input -> tipo VARIABLE IGUAL INPUT . PIZQ PDER END

    PIZQ            shift and go to state 148


state 113

    (25) parametros -> tipo . VARIABLE
    (26) parametros -> tipo . VARIABLE COMA parametros

    VARIABLE        shift and go to state 149


state 114

    (13) funciones -> tipo VARIABLE PIZQ parametros . PDER LIZQ codigo RETURN expresion END LDER

    PDER            shift and go to state 150


state 115

    (24) parametros -> empty .

    PDER            reduce using rule 24 (parametros -> empty .)


state 116

    (84) tipo -> VOID .

    VARIABLE        reduce using rule 84 (tipo -> VOID .)


state 117

    (109) indexacion -> VARIABLE CIZQ . valor CDER
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE

    ENTERO          shift and go to state 28
    VARIABLE        shift and go to state 61

    valor                          shift and go to state 151

state 118

    (50) first -> VARIABLE POINT . FIRST PIZQ PDER
    (51) last -> VARIABLE POINT . LAST PIZQ PDER
    (52) length -> VARIABLE POINT . LEN PIZQ PDER
    (55) remove -> VARIABLE POINT . REMOVE PIZQ valor PDER
    (53) add -> VARIABLE POINT . ADD PIZQ valor PDER
    (54) slice -> VARIABLE POINT . SLICE PIZQ valor COMA valor PDER

    FIRST           shift and go to state 88
    LAST            shift and go to state 89
    LEN             shift and go to state 90
    REMOVE          shift and go to state 91
    ADD             shift and go to state 92
    SLICE           shift and go to state 152


state 119

    (16) asignacion -> VARIABLE IGUAL expresiones END .

    PRINT           reduce using rule 16 (asignacion -> VARIABLE IGUAL expresiones END .)
    VARIABLE        reduce using rule 16 (asignacion -> VARIABLE IGUAL expresiones END .)
    IF              reduce using rule 16 (asignacion -> VARIABLE IGUAL expresiones END .)
    FOR             reduce using rule 16 (asignacion -> VARIABLE IGUAL expresiones END .)
    WHILE           reduce using rule 16 (asignacion -> VARIABLE IGUAL expresiones END .)
    DO              reduce using rule 16 (asignacion -> VARIABLE IGUAL expresiones END .)
    VOID            reduce using rule 16 (asignacion -> VARIABLE IGUAL expresiones END .)
    VAR             reduce using rule 16 (asignacion -> VARIABLE IGUAL expresiones END .)
    INT             reduce using rule 16 (asignacion -> VARIABLE IGUAL expresiones END .)
    BOOL            reduce using rule 16 (asignacion -> VARIABLE IGUAL expresiones END .)
    DOUBLE          reduce using rule 16 (asignacion -> VARIABLE IGUAL expresiones END .)
    STR             reduce using rule 16 (asignacion -> VARIABLE IGUAL expresiones END .)
    ENTERO          reduce using rule 16 (asignacion -> VARIABLE IGUAL expresiones END .)
    $end            reduce using rule 16 (asignacion -> VARIABLE IGUAL expresiones END .)
    RETURN          reduce using rule 16 (asignacion -> VARIABLE IGUAL expresiones END .)
    LDER            reduce using rule 16 (asignacion -> VARIABLE IGUAL expresiones END .)


state 120

    (49) lista -> CIZQ elementos . CDER

    CDER            shift and go to state 153


state 121

    (57) elementos -> valor .
    (58) elementos -> valor . COMA elementos

    CDER            reduce using rule 57 (elementos -> valor .)
    LDER            reduce using rule 57 (elementos -> valor .)
    COMA            shift and go to state 154


state 122

    (56) conjuntos -> LIZQ elementos . LDER

    LDER            shift and go to state 155


state 123

    (64) terminoLogico -> PIZQ comparacion . PDER

    PDER            shift and go to state 156


state 124

    (60) opLogicas -> terminoLogico operadorLog . terminoLogico
    (61) opLogicas -> terminoLogico operadorLog . terminoLogico operadorLog opLogicas
    (62) terminoLogico -> . VARIABLE
    (63) terminoLogico -> . BOOLEAN
    (64) terminoLogico -> . PIZQ comparacion PDER

    VARIABLE        shift and go to state 158
    BOOLEAN         shift and go to state 98
    PIZQ            shift and go to state 86

    terminoLogico                  shift and go to state 157

state 125

    (67) operadorLog -> AND .

    VARIABLE        reduce using rule 67 (operadorLog -> AND .)
    BOOLEAN         reduce using rule 67 (operadorLog -> AND .)
    PIZQ            reduce using rule 67 (operadorLog -> AND .)


state 126

    (68) operadorLog -> OR .

    VARIABLE        reduce using rule 68 (operadorLog -> OR .)
    BOOLEAN         reduce using rule 68 (operadorLog -> OR .)
    PIZQ            reduce using rule 68 (operadorLog -> OR .)


state 127

    (50) first -> VARIABLE POINT FIRST PIZQ . PDER

    PDER            shift and go to state 159


state 128

    (51) last -> VARIABLE POINT LAST PIZQ . PDER

    PDER            shift and go to state 160


state 129

    (52) length -> VARIABLE POINT LEN PIZQ . PDER

    PDER            shift and go to state 161


state 130

    (55) remove -> VARIABLE POINT REMOVE PIZQ . valor PDER
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE

    ENTERO          shift and go to state 28
    VARIABLE        shift and go to state 61

    valor                          shift and go to state 162

state 131

    (53) add -> VARIABLE POINT ADD PIZQ . valor PDER
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE

    ENTERO          shift and go to state 28
    VARIABLE        shift and go to state 61

    valor                          shift and go to state 163

state 132

    (88) sentenciaIf -> IF PIZQ comparacion PDER . LIZQ algoritmo LDER varianteIf

    LIZQ            shift and go to state 164


state 133

    (89) sentenciaIf -> IF PIZQ opLogicas PDER . LIZQ algoritmo LDER varianteIf

    LIZQ            shift and go to state 165


state 134

    (96) sentenciaFOR -> FOR PIZQ parametrosF PDER . LIZQ algoritmo LDER

    LIZQ            shift and go to state 166


state 135

    (97) parametrosF -> inicializacionFor END . comparacion END VARIABLE increDecre
    (98) parametrosF -> inicializacionFor END . opLogicas END VARIABLE increDecre
    (66) comparacion -> . expresion operadorComp expresion
    (59) opLogicas -> . terminoLogico
    (60) opLogicas -> . terminoLogico operadorLog terminoLogico
    (61) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (62) terminoLogico -> . VARIABLE
    (63) terminoLogico -> . BOOLEAN
    (64) terminoLogico -> . PIZQ comparacion PDER
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE

    VARIABLE        shift and go to state 97
    BOOLEAN         shift and go to state 98
    PIZQ            shift and go to state 86
    ENTERO          shift and go to state 28

    comparacion                    shift and go to state 167
    opLogicas                      shift and go to state 168
    expresion                      shift and go to state 96
    terminoLogico                  shift and go to state 87
    valor                          shift and go to state 16

state 136

    (99) parametrosF -> VARIABLE IN . VARIABLE

    VARIABLE        shift and go to state 169


state 137

    (100) inicializacionFor -> VARIABLE IGUAL . ENTERO

    ENTERO          shift and go to state 170


state 138

    (101) inicializacionFor -> INT VARIABLE . IGUAL ENTERO

    IGUAL           shift and go to state 171


state 139

    (102) inicializacionFor -> VAR VARIABLE . IGUAL ENTERO

    IGUAL           shift and go to state 172


state 140

    (105) sentenciaWhile -> WHILE PIZQ comparacion PDER . LIZQ algoritmo LDER

    LIZQ            shift and go to state 173


state 141

    (106) sentenciaWhile -> WHILE PIZQ opLogicas PDER . LIZQ algoritmo LDER

    LIZQ            shift and go to state 174


state 142

    (107) sentenciaWhile -> DO LIZQ algoritmo LDER . WHILE PIZQ comparacion PDER END
    (108) sentenciaWhile -> DO LIZQ algoritmo LDER . WHILE PIZQ opLogicas PDER END

    WHILE           shift and go to state 175


state 143

    (14) funciones -> VOID VARIABLE PIZQ parametros . PDER LIZQ codigo LDER

    PDER            shift and go to state 176


state 144

    (46) imprimir -> PRINT PIZQ opstring PDER END .

    PRINT           reduce using rule 46 (imprimir -> PRINT PIZQ opstring PDER END .)
    VARIABLE        reduce using rule 46 (imprimir -> PRINT PIZQ opstring PDER END .)
    IF              reduce using rule 46 (imprimir -> PRINT PIZQ opstring PDER END .)
    FOR             reduce using rule 46 (imprimir -> PRINT PIZQ opstring PDER END .)
    WHILE           reduce using rule 46 (imprimir -> PRINT PIZQ opstring PDER END .)
    DO              reduce using rule 46 (imprimir -> PRINT PIZQ opstring PDER END .)
    VOID            reduce using rule 46 (imprimir -> PRINT PIZQ opstring PDER END .)
    VAR             reduce using rule 46 (imprimir -> PRINT PIZQ opstring PDER END .)
    INT             reduce using rule 46 (imprimir -> PRINT PIZQ opstring PDER END .)
    BOOL            reduce using rule 46 (imprimir -> PRINT PIZQ opstring PDER END .)
    DOUBLE          reduce using rule 46 (imprimir -> PRINT PIZQ opstring PDER END .)
    STR             reduce using rule 46 (imprimir -> PRINT PIZQ opstring PDER END .)
    ENTERO          reduce using rule 46 (imprimir -> PRINT PIZQ opstring PDER END .)
    $end            reduce using rule 46 (imprimir -> PRINT PIZQ opstring PDER END .)
    RETURN          reduce using rule 46 (imprimir -> PRINT PIZQ opstring PDER END .)
    LDER            reduce using rule 46 (imprimir -> PRINT PIZQ opstring PDER END .)


state 145

    (44) opstring -> string MAS opstring .

    PDER            reduce using rule 44 (opstring -> string MAS opstring .)
    END             reduce using rule 44 (opstring -> string MAS opstring .)


state 146

    (45) opstring -> VARIABLE MAS opstring .

    PDER            reduce using rule 45 (opstring -> VARIABLE MAS opstring .)
    END             reduce using rule 45 (opstring -> VARIABLE MAS opstring .)


state 147

    (15) asignacion -> tipo VARIABLE IGUAL expresiones END .

    PRINT           reduce using rule 15 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    VARIABLE        reduce using rule 15 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    IF              reduce using rule 15 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    FOR             reduce using rule 15 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    WHILE           reduce using rule 15 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    DO              reduce using rule 15 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    VOID            reduce using rule 15 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    VAR             reduce using rule 15 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    INT             reduce using rule 15 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    BOOL            reduce using rule 15 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    DOUBLE          reduce using rule 15 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    STR             reduce using rule 15 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    ENTERO          reduce using rule 15 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    $end            reduce using rule 15 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    RETURN          reduce using rule 15 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    LDER            reduce using rule 15 (asignacion -> tipo VARIABLE IGUAL expresiones END .)


state 148

    (47) input -> tipo VARIABLE IGUAL INPUT PIZQ . PDER END

    PDER            shift and go to state 177


state 149

    (25) parametros -> tipo VARIABLE .
    (26) parametros -> tipo VARIABLE . COMA parametros

    PDER            reduce using rule 25 (parametros -> tipo VARIABLE .)
    COMA            shift and go to state 178


state 150

    (13) funciones -> tipo VARIABLE PIZQ parametros PDER . LIZQ codigo RETURN expresion END LDER

    LIZQ            shift and go to state 179


state 151

    (109) indexacion -> VARIABLE CIZQ valor . CDER

    CDER            shift and go to state 180


state 152

    (54) slice -> VARIABLE POINT SLICE . PIZQ valor COMA valor PDER

    PIZQ            shift and go to state 181


state 153

    (49) lista -> CIZQ elementos CDER .

    END             reduce using rule 49 (lista -> CIZQ elementos CDER .)


state 154

    (58) elementos -> valor COMA . elementos
    (57) elementos -> . valor
    (58) elementos -> . valor COMA elementos
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE

    ENTERO          shift and go to state 28
    VARIABLE        shift and go to state 61

    valor                          shift and go to state 121
    elementos                      shift and go to state 182

state 155

    (56) conjuntos -> LIZQ elementos LDER .

    END             reduce using rule 56 (conjuntos -> LIZQ elementos LDER .)


state 156

    (64) terminoLogico -> PIZQ comparacion PDER .

    AND             reduce using rule 64 (terminoLogico -> PIZQ comparacion PDER .)
    OR              reduce using rule 64 (terminoLogico -> PIZQ comparacion PDER .)
    END             reduce using rule 64 (terminoLogico -> PIZQ comparacion PDER .)
    PDER            reduce using rule 64 (terminoLogico -> PIZQ comparacion PDER .)


state 157

    (60) opLogicas -> terminoLogico operadorLog terminoLogico .
    (61) opLogicas -> terminoLogico operadorLog terminoLogico . operadorLog opLogicas
    (67) operadorLog -> . AND
    (68) operadorLog -> . OR

    END             reduce using rule 60 (opLogicas -> terminoLogico operadorLog terminoLogico .)
    PDER            reduce using rule 60 (opLogicas -> terminoLogico operadorLog terminoLogico .)
    AND             shift and go to state 125
    OR              shift and go to state 126

    operadorLog                    shift and go to state 183

state 158

    (62) terminoLogico -> VARIABLE .

    AND             reduce using rule 62 (terminoLogico -> VARIABLE .)
    OR              reduce using rule 62 (terminoLogico -> VARIABLE .)
    END             reduce using rule 62 (terminoLogico -> VARIABLE .)
    PDER            reduce using rule 62 (terminoLogico -> VARIABLE .)


state 159

    (50) first -> VARIABLE POINT FIRST PIZQ PDER .

    END             reduce using rule 50 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    PRINT           reduce using rule 50 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    VARIABLE        reduce using rule 50 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    IF              reduce using rule 50 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    FOR             reduce using rule 50 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    WHILE           reduce using rule 50 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    DO              reduce using rule 50 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    VOID            reduce using rule 50 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    VAR             reduce using rule 50 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    INT             reduce using rule 50 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    BOOL            reduce using rule 50 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    DOUBLE          reduce using rule 50 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    STR             reduce using rule 50 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    ENTERO          reduce using rule 50 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    $end            reduce using rule 50 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    RETURN          reduce using rule 50 (first -> VARIABLE POINT FIRST PIZQ PDER .)
    LDER            reduce using rule 50 (first -> VARIABLE POINT FIRST PIZQ PDER .)


state 160

    (51) last -> VARIABLE POINT LAST PIZQ PDER .

    END             reduce using rule 51 (last -> VARIABLE POINT LAST PIZQ PDER .)
    PRINT           reduce using rule 51 (last -> VARIABLE POINT LAST PIZQ PDER .)
    VARIABLE        reduce using rule 51 (last -> VARIABLE POINT LAST PIZQ PDER .)
    IF              reduce using rule 51 (last -> VARIABLE POINT LAST PIZQ PDER .)
    FOR             reduce using rule 51 (last -> VARIABLE POINT LAST PIZQ PDER .)
    WHILE           reduce using rule 51 (last -> VARIABLE POINT LAST PIZQ PDER .)
    DO              reduce using rule 51 (last -> VARIABLE POINT LAST PIZQ PDER .)
    VOID            reduce using rule 51 (last -> VARIABLE POINT LAST PIZQ PDER .)
    VAR             reduce using rule 51 (last -> VARIABLE POINT LAST PIZQ PDER .)
    INT             reduce using rule 51 (last -> VARIABLE POINT LAST PIZQ PDER .)
    BOOL            reduce using rule 51 (last -> VARIABLE POINT LAST PIZQ PDER .)
    DOUBLE          reduce using rule 51 (last -> VARIABLE POINT LAST PIZQ PDER .)
    STR             reduce using rule 51 (last -> VARIABLE POINT LAST PIZQ PDER .)
    ENTERO          reduce using rule 51 (last -> VARIABLE POINT LAST PIZQ PDER .)
    $end            reduce using rule 51 (last -> VARIABLE POINT LAST PIZQ PDER .)
    RETURN          reduce using rule 51 (last -> VARIABLE POINT LAST PIZQ PDER .)
    LDER            reduce using rule 51 (last -> VARIABLE POINT LAST PIZQ PDER .)


state 161

    (52) length -> VARIABLE POINT LEN PIZQ PDER .

    END             reduce using rule 52 (length -> VARIABLE POINT LEN PIZQ PDER .)
    PRINT           reduce using rule 52 (length -> VARIABLE POINT LEN PIZQ PDER .)
    VARIABLE        reduce using rule 52 (length -> VARIABLE POINT LEN PIZQ PDER .)
    IF              reduce using rule 52 (length -> VARIABLE POINT LEN PIZQ PDER .)
    FOR             reduce using rule 52 (length -> VARIABLE POINT LEN PIZQ PDER .)
    WHILE           reduce using rule 52 (length -> VARIABLE POINT LEN PIZQ PDER .)
    DO              reduce using rule 52 (length -> VARIABLE POINT LEN PIZQ PDER .)
    VOID            reduce using rule 52 (length -> VARIABLE POINT LEN PIZQ PDER .)
    VAR             reduce using rule 52 (length -> VARIABLE POINT LEN PIZQ PDER .)
    INT             reduce using rule 52 (length -> VARIABLE POINT LEN PIZQ PDER .)
    BOOL            reduce using rule 52 (length -> VARIABLE POINT LEN PIZQ PDER .)
    DOUBLE          reduce using rule 52 (length -> VARIABLE POINT LEN PIZQ PDER .)
    STR             reduce using rule 52 (length -> VARIABLE POINT LEN PIZQ PDER .)
    ENTERO          reduce using rule 52 (length -> VARIABLE POINT LEN PIZQ PDER .)
    $end            reduce using rule 52 (length -> VARIABLE POINT LEN PIZQ PDER .)
    RETURN          reduce using rule 52 (length -> VARIABLE POINT LEN PIZQ PDER .)
    LDER            reduce using rule 52 (length -> VARIABLE POINT LEN PIZQ PDER .)


state 162

    (55) remove -> VARIABLE POINT REMOVE PIZQ valor . PDER

    PDER            shift and go to state 184


state 163

    (53) add -> VARIABLE POINT ADD PIZQ valor . PDER

    PDER            shift and go to state 185


state 164

    (88) sentenciaIf -> IF PIZQ comparacion PDER LIZQ . algoritmo LDER varianteIf
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (12) algoritmo -> . expresionSinRetorno
    (46) imprimir -> . PRINT PIZQ opstring PDER END
    (15) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (16) asignacion -> . VARIABLE IGUAL expresiones END
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (66) comparacion -> . expresion operadorComp expresion
    (88) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (89) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (96) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (105) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (108) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (47) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (13) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (14) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (17) expresionSinRetorno -> . funcionStructura END
    (18) expresionSinRetorno -> . funcionStructura
    (80) tipo -> . VAR
    (81) tipo -> . INT
    (82) tipo -> . BOOL
    (83) tipo -> . DOUBLE
    (84) tipo -> . VOID
    (85) tipo -> . STR
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE
    (19) funcionStructura -> . first
    (20) funcionStructura -> . last
    (21) funcionStructura -> . length
    (22) funcionStructura -> . remove
    (23) funcionStructura -> . add
    (50) first -> . VARIABLE POINT FIRST PIZQ PDER
    (51) last -> . VARIABLE POINT LAST PIZQ PDER
    (52) length -> . VARIABLE POINT LEN PIZQ PDER
    (55) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (53) add -> . VARIABLE POINT ADD PIZQ valor PDER

    PRINT           shift and go to state 13
    VARIABLE        shift and go to state 15
    IF              shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    VOID            shift and go to state 21
    VAR             shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    DOUBLE          shift and go to state 26
    STR             shift and go to state 27
    ENTERO          shift and go to state 28

    comparacion                    shift and go to state 6
    algoritmo                      shift and go to state 186
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    expresionSinRetorno            shift and go to state 12
    tipo                           shift and go to state 14
    valor                          shift and go to state 16
    funcionStructura               shift and go to state 22
    first                          shift and go to state 29
    last                           shift and go to state 30
    length                         shift and go to state 31
    remove                         shift and go to state 32
    add                            shift and go to state 33

state 165

    (89) sentenciaIf -> IF PIZQ opLogicas PDER LIZQ . algoritmo LDER varianteIf
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (12) algoritmo -> . expresionSinRetorno
    (46) imprimir -> . PRINT PIZQ opstring PDER END
    (15) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (16) asignacion -> . VARIABLE IGUAL expresiones END
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (66) comparacion -> . expresion operadorComp expresion
    (88) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (89) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (96) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (105) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (108) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (47) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (13) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (14) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (17) expresionSinRetorno -> . funcionStructura END
    (18) expresionSinRetorno -> . funcionStructura
    (80) tipo -> . VAR
    (81) tipo -> . INT
    (82) tipo -> . BOOL
    (83) tipo -> . DOUBLE
    (84) tipo -> . VOID
    (85) tipo -> . STR
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE
    (19) funcionStructura -> . first
    (20) funcionStructura -> . last
    (21) funcionStructura -> . length
    (22) funcionStructura -> . remove
    (23) funcionStructura -> . add
    (50) first -> . VARIABLE POINT FIRST PIZQ PDER
    (51) last -> . VARIABLE POINT LAST PIZQ PDER
    (52) length -> . VARIABLE POINT LEN PIZQ PDER
    (55) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (53) add -> . VARIABLE POINT ADD PIZQ valor PDER

    PRINT           shift and go to state 13
    VARIABLE        shift and go to state 15
    IF              shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    VOID            shift and go to state 21
    VAR             shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    DOUBLE          shift and go to state 26
    STR             shift and go to state 27
    ENTERO          shift and go to state 28

    algoritmo                      shift and go to state 187
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    expresionSinRetorno            shift and go to state 12
    tipo                           shift and go to state 14
    valor                          shift and go to state 16
    funcionStructura               shift and go to state 22
    first                          shift and go to state 29
    last                           shift and go to state 30
    length                         shift and go to state 31
    remove                         shift and go to state 32
    add                            shift and go to state 33

state 166

    (96) sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ . algoritmo LDER
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (12) algoritmo -> . expresionSinRetorno
    (46) imprimir -> . PRINT PIZQ opstring PDER END
    (15) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (16) asignacion -> . VARIABLE IGUAL expresiones END
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (66) comparacion -> . expresion operadorComp expresion
    (88) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (89) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (96) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (105) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (108) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (47) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (13) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (14) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (17) expresionSinRetorno -> . funcionStructura END
    (18) expresionSinRetorno -> . funcionStructura
    (80) tipo -> . VAR
    (81) tipo -> . INT
    (82) tipo -> . BOOL
    (83) tipo -> . DOUBLE
    (84) tipo -> . VOID
    (85) tipo -> . STR
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE
    (19) funcionStructura -> . first
    (20) funcionStructura -> . last
    (21) funcionStructura -> . length
    (22) funcionStructura -> . remove
    (23) funcionStructura -> . add
    (50) first -> . VARIABLE POINT FIRST PIZQ PDER
    (51) last -> . VARIABLE POINT LAST PIZQ PDER
    (52) length -> . VARIABLE POINT LEN PIZQ PDER
    (55) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (53) add -> . VARIABLE POINT ADD PIZQ valor PDER

    PRINT           shift and go to state 13
    VARIABLE        shift and go to state 15
    IF              shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    VOID            shift and go to state 21
    VAR             shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    DOUBLE          shift and go to state 26
    STR             shift and go to state 27
    ENTERO          shift and go to state 28

    algoritmo                      shift and go to state 188
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    expresionSinRetorno            shift and go to state 12
    tipo                           shift and go to state 14
    valor                          shift and go to state 16
    funcionStructura               shift and go to state 22
    first                          shift and go to state 29
    last                           shift and go to state 30
    length                         shift and go to state 31
    remove                         shift and go to state 32
    add                            shift and go to state 33

state 167

    (97) parametrosF -> inicializacionFor END comparacion . END VARIABLE increDecre

    END             shift and go to state 189


state 168

    (98) parametrosF -> inicializacionFor END opLogicas . END VARIABLE increDecre

    END             shift and go to state 190


state 169

    (99) parametrosF -> VARIABLE IN VARIABLE .

    PDER            reduce using rule 99 (parametrosF -> VARIABLE IN VARIABLE .)


state 170

    (100) inicializacionFor -> VARIABLE IGUAL ENTERO .

    END             reduce using rule 100 (inicializacionFor -> VARIABLE IGUAL ENTERO .)


state 171

    (101) inicializacionFor -> INT VARIABLE IGUAL . ENTERO

    ENTERO          shift and go to state 191


state 172

    (102) inicializacionFor -> VAR VARIABLE IGUAL . ENTERO

    ENTERO          shift and go to state 192


state 173

    (105) sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ . algoritmo LDER
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (12) algoritmo -> . expresionSinRetorno
    (46) imprimir -> . PRINT PIZQ opstring PDER END
    (15) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (16) asignacion -> . VARIABLE IGUAL expresiones END
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (66) comparacion -> . expresion operadorComp expresion
    (88) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (89) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (96) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (105) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (108) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (47) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (13) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (14) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (17) expresionSinRetorno -> . funcionStructura END
    (18) expresionSinRetorno -> . funcionStructura
    (80) tipo -> . VAR
    (81) tipo -> . INT
    (82) tipo -> . BOOL
    (83) tipo -> . DOUBLE
    (84) tipo -> . VOID
    (85) tipo -> . STR
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE
    (19) funcionStructura -> . first
    (20) funcionStructura -> . last
    (21) funcionStructura -> . length
    (22) funcionStructura -> . remove
    (23) funcionStructura -> . add
    (50) first -> . VARIABLE POINT FIRST PIZQ PDER
    (51) last -> . VARIABLE POINT LAST PIZQ PDER
    (52) length -> . VARIABLE POINT LEN PIZQ PDER
    (55) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (53) add -> . VARIABLE POINT ADD PIZQ valor PDER

    PRINT           shift and go to state 13
    VARIABLE        shift and go to state 15
    IF              shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    VOID            shift and go to state 21
    VAR             shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    DOUBLE          shift and go to state 26
    STR             shift and go to state 27
    ENTERO          shift and go to state 28

    comparacion                    shift and go to state 6
    algoritmo                      shift and go to state 193
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    expresionSinRetorno            shift and go to state 12
    tipo                           shift and go to state 14
    valor                          shift and go to state 16
    funcionStructura               shift and go to state 22
    first                          shift and go to state 29
    last                           shift and go to state 30
    length                         shift and go to state 31
    remove                         shift and go to state 32
    add                            shift and go to state 33

state 174

    (106) sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ . algoritmo LDER
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (12) algoritmo -> . expresionSinRetorno
    (46) imprimir -> . PRINT PIZQ opstring PDER END
    (15) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (16) asignacion -> . VARIABLE IGUAL expresiones END
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (66) comparacion -> . expresion operadorComp expresion
    (88) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (89) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (96) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (105) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (108) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (47) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (13) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (14) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (17) expresionSinRetorno -> . funcionStructura END
    (18) expresionSinRetorno -> . funcionStructura
    (80) tipo -> . VAR
    (81) tipo -> . INT
    (82) tipo -> . BOOL
    (83) tipo -> . DOUBLE
    (84) tipo -> . VOID
    (85) tipo -> . STR
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE
    (19) funcionStructura -> . first
    (20) funcionStructura -> . last
    (21) funcionStructura -> . length
    (22) funcionStructura -> . remove
    (23) funcionStructura -> . add
    (50) first -> . VARIABLE POINT FIRST PIZQ PDER
    (51) last -> . VARIABLE POINT LAST PIZQ PDER
    (52) length -> . VARIABLE POINT LEN PIZQ PDER
    (55) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (53) add -> . VARIABLE POINT ADD PIZQ valor PDER

    PRINT           shift and go to state 13
    VARIABLE        shift and go to state 15
    IF              shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    VOID            shift and go to state 21
    VAR             shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    DOUBLE          shift and go to state 26
    STR             shift and go to state 27
    ENTERO          shift and go to state 28

    algoritmo                      shift and go to state 194
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    expresionSinRetorno            shift and go to state 12
    tipo                           shift and go to state 14
    valor                          shift and go to state 16
    funcionStructura               shift and go to state 22
    first                          shift and go to state 29
    last                           shift and go to state 30
    length                         shift and go to state 31
    remove                         shift and go to state 32
    add                            shift and go to state 33

state 175

    (107) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE . PIZQ comparacion PDER END
    (108) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE . PIZQ opLogicas PDER END

    PIZQ            shift and go to state 195


state 176

    (14) funciones -> VOID VARIABLE PIZQ parametros PDER . LIZQ codigo LDER

    LIZQ            shift and go to state 196


state 177

    (47) input -> tipo VARIABLE IGUAL INPUT PIZQ PDER . END

    END             shift and go to state 197


state 178

    (26) parametros -> tipo VARIABLE COMA . parametros
    (24) parametros -> . empty
    (25) parametros -> . tipo VARIABLE
    (26) parametros -> . tipo VARIABLE COMA parametros
    (110) empty -> .
    (80) tipo -> . VAR
    (81) tipo -> . INT
    (82) tipo -> . BOOL
    (83) tipo -> . DOUBLE
    (84) tipo -> . VOID
    (85) tipo -> . STR

    PDER            reduce using rule 110 (empty -> .)
    VAR             shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    DOUBLE          shift and go to state 26
    VOID            shift and go to state 116
    STR             shift and go to state 27

    tipo                           shift and go to state 113
    parametros                     shift and go to state 198
    empty                          shift and go to state 115

state 179

    (13) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ . codigo RETURN expresion END LDER
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (12) algoritmo -> . expresionSinRetorno
    (46) imprimir -> . PRINT PIZQ opstring PDER END
    (15) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (16) asignacion -> . VARIABLE IGUAL expresiones END
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (66) comparacion -> . expresion operadorComp expresion
    (88) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (89) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (96) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (105) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (108) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (47) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (13) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (14) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (17) expresionSinRetorno -> . funcionStructura END
    (18) expresionSinRetorno -> . funcionStructura
    (80) tipo -> . VAR
    (81) tipo -> . INT
    (82) tipo -> . BOOL
    (83) tipo -> . DOUBLE
    (84) tipo -> . VOID
    (85) tipo -> . STR
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE
    (19) funcionStructura -> . first
    (20) funcionStructura -> . last
    (21) funcionStructura -> . length
    (22) funcionStructura -> . remove
    (23) funcionStructura -> . add
    (50) first -> . VARIABLE POINT FIRST PIZQ PDER
    (51) last -> . VARIABLE POINT LAST PIZQ PDER
    (52) length -> . VARIABLE POINT LEN PIZQ PDER
    (55) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (53) add -> . VARIABLE POINT ADD PIZQ valor PDER

    PRINT           shift and go to state 13
    VARIABLE        shift and go to state 15
    IF              shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    VOID            shift and go to state 21
    VAR             shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    DOUBLE          shift and go to state 26
    STR             shift and go to state 27
    ENTERO          shift and go to state 28

    tipo                           shift and go to state 14
    codigo                         shift and go to state 199
    expresion                      shift and go to state 5
    algoritmo                      shift and go to state 2
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    expresionSinRetorno            shift and go to state 12
    valor                          shift and go to state 16
    funcionStructura               shift and go to state 22
    first                          shift and go to state 29
    last                           shift and go to state 30
    length                         shift and go to state 31
    remove                         shift and go to state 32
    add                            shift and go to state 33

state 180

    (109) indexacion -> VARIABLE CIZQ valor CDER .

    END             reduce using rule 109 (indexacion -> VARIABLE CIZQ valor CDER .)


state 181

    (54) slice -> VARIABLE POINT SLICE PIZQ . valor COMA valor PDER
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE

    ENTERO          shift and go to state 28
    VARIABLE        shift and go to state 61

    valor                          shift and go to state 200

state 182

    (58) elementos -> valor COMA elementos .

    CDER            reduce using rule 58 (elementos -> valor COMA elementos .)
    LDER            reduce using rule 58 (elementos -> valor COMA elementos .)


state 183

    (61) opLogicas -> terminoLogico operadorLog terminoLogico operadorLog . opLogicas
    (59) opLogicas -> . terminoLogico
    (60) opLogicas -> . terminoLogico operadorLog terminoLogico
    (61) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (62) terminoLogico -> . VARIABLE
    (63) terminoLogico -> . BOOLEAN
    (64) terminoLogico -> . PIZQ comparacion PDER

    VARIABLE        shift and go to state 158
    BOOLEAN         shift and go to state 98
    PIZQ            shift and go to state 86

    terminoLogico                  shift and go to state 87
    opLogicas                      shift and go to state 201

state 184

    (55) remove -> VARIABLE POINT REMOVE PIZQ valor PDER .

    END             reduce using rule 55 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    PRINT           reduce using rule 55 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    VARIABLE        reduce using rule 55 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    IF              reduce using rule 55 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    FOR             reduce using rule 55 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    WHILE           reduce using rule 55 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    DO              reduce using rule 55 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    VOID            reduce using rule 55 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    VAR             reduce using rule 55 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    INT             reduce using rule 55 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    BOOL            reduce using rule 55 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    DOUBLE          reduce using rule 55 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    STR             reduce using rule 55 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    ENTERO          reduce using rule 55 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    $end            reduce using rule 55 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    RETURN          reduce using rule 55 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)
    LDER            reduce using rule 55 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)


state 185

    (53) add -> VARIABLE POINT ADD PIZQ valor PDER .

    END             reduce using rule 53 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    PRINT           reduce using rule 53 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    VARIABLE        reduce using rule 53 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    IF              reduce using rule 53 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    FOR             reduce using rule 53 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    WHILE           reduce using rule 53 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    DO              reduce using rule 53 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    VOID            reduce using rule 53 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    VAR             reduce using rule 53 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    INT             reduce using rule 53 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    BOOL            reduce using rule 53 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    DOUBLE          reduce using rule 53 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    STR             reduce using rule 53 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    ENTERO          reduce using rule 53 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    $end            reduce using rule 53 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    RETURN          reduce using rule 53 (add -> VARIABLE POINT ADD PIZQ valor PDER .)
    LDER            reduce using rule 53 (add -> VARIABLE POINT ADD PIZQ valor PDER .)


state 186

    (88) sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo . LDER varianteIf

    LDER            shift and go to state 202


state 187

    (89) sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo . LDER varianteIf

    LDER            shift and go to state 203


state 188

    (96) sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo . LDER

    LDER            shift and go to state 204


state 189

    (97) parametrosF -> inicializacionFor END comparacion END . VARIABLE increDecre

    VARIABLE        shift and go to state 205


state 190

    (98) parametrosF -> inicializacionFor END opLogicas END . VARIABLE increDecre

    VARIABLE        shift and go to state 206


state 191

    (101) inicializacionFor -> INT VARIABLE IGUAL ENTERO .

    END             reduce using rule 101 (inicializacionFor -> INT VARIABLE IGUAL ENTERO .)


state 192

    (102) inicializacionFor -> VAR VARIABLE IGUAL ENTERO .

    END             reduce using rule 102 (inicializacionFor -> VAR VARIABLE IGUAL ENTERO .)


state 193

    (105) sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo . LDER

    LDER            shift and go to state 207


state 194

    (106) sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo . LDER

    LDER            shift and go to state 208


state 195

    (107) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ . comparacion PDER END
    (108) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ . opLogicas PDER END
    (66) comparacion -> . expresion operadorComp expresion
    (59) opLogicas -> . terminoLogico
    (60) opLogicas -> . terminoLogico operadorLog terminoLogico
    (61) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (62) terminoLogico -> . VARIABLE
    (63) terminoLogico -> . BOOLEAN
    (64) terminoLogico -> . PIZQ comparacion PDER
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE

    VARIABLE        shift and go to state 97
    BOOLEAN         shift and go to state 98
    PIZQ            shift and go to state 86
    ENTERO          shift and go to state 28

    comparacion                    shift and go to state 209
    opLogicas                      shift and go to state 210
    expresion                      shift and go to state 96
    terminoLogico                  shift and go to state 87
    valor                          shift and go to state 16

state 196

    (14) funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ . codigo LDER
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (12) algoritmo -> . expresionSinRetorno
    (46) imprimir -> . PRINT PIZQ opstring PDER END
    (15) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (16) asignacion -> . VARIABLE IGUAL expresiones END
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (66) comparacion -> . expresion operadorComp expresion
    (88) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (89) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (96) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (105) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (108) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (47) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (13) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (14) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (17) expresionSinRetorno -> . funcionStructura END
    (18) expresionSinRetorno -> . funcionStructura
    (80) tipo -> . VAR
    (81) tipo -> . INT
    (82) tipo -> . BOOL
    (83) tipo -> . DOUBLE
    (84) tipo -> . VOID
    (85) tipo -> . STR
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE
    (19) funcionStructura -> . first
    (20) funcionStructura -> . last
    (21) funcionStructura -> . length
    (22) funcionStructura -> . remove
    (23) funcionStructura -> . add
    (50) first -> . VARIABLE POINT FIRST PIZQ PDER
    (51) last -> . VARIABLE POINT LAST PIZQ PDER
    (52) length -> . VARIABLE POINT LEN PIZQ PDER
    (55) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (53) add -> . VARIABLE POINT ADD PIZQ valor PDER

    PRINT           shift and go to state 13
    VARIABLE        shift and go to state 15
    IF              shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    VOID            shift and go to state 21
    VAR             shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    DOUBLE          shift and go to state 26
    STR             shift and go to state 27
    ENTERO          shift and go to state 28

    codigo                         shift and go to state 211
    algoritmo                      shift and go to state 2
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    expresionSinRetorno            shift and go to state 12
    tipo                           shift and go to state 14
    valor                          shift and go to state 16
    funcionStructura               shift and go to state 22
    first                          shift and go to state 29
    last                           shift and go to state 30
    length                         shift and go to state 31
    remove                         shift and go to state 32
    add                            shift and go to state 33

state 197

    (47) input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .

    PRINT           reduce using rule 47 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    VARIABLE        reduce using rule 47 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    IF              reduce using rule 47 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    FOR             reduce using rule 47 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    WHILE           reduce using rule 47 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    DO              reduce using rule 47 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    VOID            reduce using rule 47 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    VAR             reduce using rule 47 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    INT             reduce using rule 47 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    BOOL            reduce using rule 47 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    DOUBLE          reduce using rule 47 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    STR             reduce using rule 47 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    ENTERO          reduce using rule 47 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    $end            reduce using rule 47 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    RETURN          reduce using rule 47 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    LDER            reduce using rule 47 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)


state 198

    (26) parametros -> tipo VARIABLE COMA parametros .

    PDER            reduce using rule 26 (parametros -> tipo VARIABLE COMA parametros .)


state 199

    (13) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo . RETURN expresion END LDER

    RETURN          shift and go to state 212


state 200

    (54) slice -> VARIABLE POINT SLICE PIZQ valor . COMA valor PDER

    COMA            shift and go to state 213


state 201

    (61) opLogicas -> terminoLogico operadorLog terminoLogico operadorLog opLogicas .

    END             reduce using rule 61 (opLogicas -> terminoLogico operadorLog terminoLogico operadorLog opLogicas .)
    PDER            reduce using rule 61 (opLogicas -> terminoLogico operadorLog terminoLogico operadorLog opLogicas .)


state 202

    (88) sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER . varianteIf
    (90) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
    (91) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER
    (92) varianteIf -> . ELSE LIZQ algoritmo LDER
    (93) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (94) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (95) varianteIf -> . empty
    (110) empty -> .

    ELSEIF          shift and go to state 215
    ELSE            shift and go to state 216
    PRINT           reduce using rule 110 (empty -> .)
    VARIABLE        reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    FOR             reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)
    VOID            reduce using rule 110 (empty -> .)
    VAR             reduce using rule 110 (empty -> .)
    INT             reduce using rule 110 (empty -> .)
    BOOL            reduce using rule 110 (empty -> .)
    DOUBLE          reduce using rule 110 (empty -> .)
    STR             reduce using rule 110 (empty -> .)
    ENTERO          reduce using rule 110 (empty -> .)
    $end            reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)
    LDER            reduce using rule 110 (empty -> .)

    varianteIf                     shift and go to state 214
    empty                          shift and go to state 217

state 203

    (89) sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER . varianteIf
    (90) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
    (91) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER
    (92) varianteIf -> . ELSE LIZQ algoritmo LDER
    (93) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (94) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (95) varianteIf -> . empty
    (110) empty -> .

    ELSEIF          shift and go to state 215
    ELSE            shift and go to state 216
    PRINT           reduce using rule 110 (empty -> .)
    VARIABLE        reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    FOR             reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)
    VOID            reduce using rule 110 (empty -> .)
    VAR             reduce using rule 110 (empty -> .)
    INT             reduce using rule 110 (empty -> .)
    BOOL            reduce using rule 110 (empty -> .)
    DOUBLE          reduce using rule 110 (empty -> .)
    STR             reduce using rule 110 (empty -> .)
    ENTERO          reduce using rule 110 (empty -> .)
    $end            reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)
    LDER            reduce using rule 110 (empty -> .)

    varianteIf                     shift and go to state 218
    empty                          shift and go to state 217

state 204

    (96) sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .

    PRINT           reduce using rule 96 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    VARIABLE        reduce using rule 96 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    IF              reduce using rule 96 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    FOR             reduce using rule 96 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    WHILE           reduce using rule 96 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    DO              reduce using rule 96 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    VOID            reduce using rule 96 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    VAR             reduce using rule 96 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    INT             reduce using rule 96 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    BOOL            reduce using rule 96 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    DOUBLE          reduce using rule 96 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    STR             reduce using rule 96 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    ENTERO          reduce using rule 96 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    $end            reduce using rule 96 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    RETURN          reduce using rule 96 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    LDER            reduce using rule 96 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)


state 205

    (97) parametrosF -> inicializacionFor END comparacion END VARIABLE . increDecre
    (103) increDecre -> . INCREMENTO
    (104) increDecre -> . DECREMENTO

    INCREMENTO      shift and go to state 220
    DECREMENTO      shift and go to state 221

    increDecre                     shift and go to state 219

state 206

    (98) parametrosF -> inicializacionFor END opLogicas END VARIABLE . increDecre
    (103) increDecre -> . INCREMENTO
    (104) increDecre -> . DECREMENTO

    INCREMENTO      shift and go to state 220
    DECREMENTO      shift and go to state 221

    increDecre                     shift and go to state 222

state 207

    (105) sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .

    PRINT           reduce using rule 105 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VARIABLE        reduce using rule 105 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    IF              reduce using rule 105 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    FOR             reduce using rule 105 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    WHILE           reduce using rule 105 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    DO              reduce using rule 105 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VOID            reduce using rule 105 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VAR             reduce using rule 105 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    INT             reduce using rule 105 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    BOOL            reduce using rule 105 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    DOUBLE          reduce using rule 105 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    STR             reduce using rule 105 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    ENTERO          reduce using rule 105 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    $end            reduce using rule 105 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    RETURN          reduce using rule 105 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    LDER            reduce using rule 105 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)


state 208

    (106) sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .

    PRINT           reduce using rule 106 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    VARIABLE        reduce using rule 106 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    IF              reduce using rule 106 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    FOR             reduce using rule 106 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    WHILE           reduce using rule 106 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    DO              reduce using rule 106 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    VOID            reduce using rule 106 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    VAR             reduce using rule 106 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    INT             reduce using rule 106 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    BOOL            reduce using rule 106 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    DOUBLE          reduce using rule 106 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    STR             reduce using rule 106 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    ENTERO          reduce using rule 106 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    $end            reduce using rule 106 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    RETURN          reduce using rule 106 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    LDER            reduce using rule 106 (sentenciaWhile -> WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER .)


state 209

    (107) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion . PDER END

    PDER            shift and go to state 223


state 210

    (108) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas . PDER END

    PDER            shift and go to state 224


state 211

    (14) funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo . LDER

    LDER            shift and go to state 225


state 212

    (13) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN . expresion END LDER
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE

    ENTERO          shift and go to state 28
    VARIABLE        shift and go to state 61

    expresion                      shift and go to state 226
    valor                          shift and go to state 16

state 213

    (54) slice -> VARIABLE POINT SLICE PIZQ valor COMA . valor PDER
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE

    ENTERO          shift and go to state 28
    VARIABLE        shift and go to state 61

    valor                          shift and go to state 227

state 214

    (88) sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .

    PRINT           reduce using rule 88 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VARIABLE        reduce using rule 88 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    IF              reduce using rule 88 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    FOR             reduce using rule 88 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    WHILE           reduce using rule 88 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    DO              reduce using rule 88 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VOID            reduce using rule 88 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VAR             reduce using rule 88 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    INT             reduce using rule 88 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    BOOL            reduce using rule 88 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    DOUBLE          reduce using rule 88 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    STR             reduce using rule 88 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    ENTERO          reduce using rule 88 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    $end            reduce using rule 88 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    RETURN          reduce using rule 88 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    LDER            reduce using rule 88 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)


state 215

    (90) varianteIf -> ELSEIF . PIZQ comparacion PDER LIZQ algoritmo LDER
    (91) varianteIf -> ELSEIF . PIZQ opLogicas PDER LIZQ algoritmo LDER
    (93) varianteIf -> ELSEIF . PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (94) varianteIf -> ELSEIF . PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf

    PIZQ            shift and go to state 228


state 216

    (92) varianteIf -> ELSE . LIZQ algoritmo LDER

    LIZQ            shift and go to state 229


state 217

    (95) varianteIf -> empty .

    PRINT           reduce using rule 95 (varianteIf -> empty .)
    VARIABLE        reduce using rule 95 (varianteIf -> empty .)
    IF              reduce using rule 95 (varianteIf -> empty .)
    FOR             reduce using rule 95 (varianteIf -> empty .)
    WHILE           reduce using rule 95 (varianteIf -> empty .)
    DO              reduce using rule 95 (varianteIf -> empty .)
    VOID            reduce using rule 95 (varianteIf -> empty .)
    VAR             reduce using rule 95 (varianteIf -> empty .)
    INT             reduce using rule 95 (varianteIf -> empty .)
    BOOL            reduce using rule 95 (varianteIf -> empty .)
    DOUBLE          reduce using rule 95 (varianteIf -> empty .)
    STR             reduce using rule 95 (varianteIf -> empty .)
    ENTERO          reduce using rule 95 (varianteIf -> empty .)
    $end            reduce using rule 95 (varianteIf -> empty .)
    RETURN          reduce using rule 95 (varianteIf -> empty .)
    LDER            reduce using rule 95 (varianteIf -> empty .)


state 218

    (89) sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .

    PRINT           reduce using rule 89 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    VARIABLE        reduce using rule 89 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    IF              reduce using rule 89 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    FOR             reduce using rule 89 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    WHILE           reduce using rule 89 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    DO              reduce using rule 89 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    VOID            reduce using rule 89 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    VAR             reduce using rule 89 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    INT             reduce using rule 89 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    BOOL            reduce using rule 89 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    DOUBLE          reduce using rule 89 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    STR             reduce using rule 89 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    ENTERO          reduce using rule 89 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    $end            reduce using rule 89 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    RETURN          reduce using rule 89 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    LDER            reduce using rule 89 (sentenciaIf -> IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)


state 219

    (97) parametrosF -> inicializacionFor END comparacion END VARIABLE increDecre .

    PDER            reduce using rule 97 (parametrosF -> inicializacionFor END comparacion END VARIABLE increDecre .)


state 220

    (103) increDecre -> INCREMENTO .

    PDER            reduce using rule 103 (increDecre -> INCREMENTO .)


state 221

    (104) increDecre -> DECREMENTO .

    PDER            reduce using rule 104 (increDecre -> DECREMENTO .)


state 222

    (98) parametrosF -> inicializacionFor END opLogicas END VARIABLE increDecre .

    PDER            reduce using rule 98 (parametrosF -> inicializacionFor END opLogicas END VARIABLE increDecre .)


state 223

    (107) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER . END

    END             shift and go to state 230


state 224

    (108) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER . END

    END             shift and go to state 231


state 225

    (14) funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .

    PRINT           reduce using rule 14 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    VARIABLE        reduce using rule 14 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    IF              reduce using rule 14 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    FOR             reduce using rule 14 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    WHILE           reduce using rule 14 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    DO              reduce using rule 14 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    VOID            reduce using rule 14 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    VAR             reduce using rule 14 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    INT             reduce using rule 14 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    BOOL            reduce using rule 14 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    DOUBLE          reduce using rule 14 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    STR             reduce using rule 14 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    ENTERO          reduce using rule 14 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    $end            reduce using rule 14 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    RETURN          reduce using rule 14 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)
    LDER            reduce using rule 14 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER .)


state 226

    (13) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion . END LDER

    END             shift and go to state 232


state 227

    (54) slice -> VARIABLE POINT SLICE PIZQ valor COMA valor . PDER

    PDER            shift and go to state 233


state 228

    (90) varianteIf -> ELSEIF PIZQ . comparacion PDER LIZQ algoritmo LDER
    (91) varianteIf -> ELSEIF PIZQ . opLogicas PDER LIZQ algoritmo LDER
    (93) varianteIf -> ELSEIF PIZQ . comparacion PDER LIZQ algoritmo LDER varianteIf
    (94) varianteIf -> ELSEIF PIZQ . opLogicas PDER LIZQ algoritmo LDER varianteIf
    (66) comparacion -> . expresion operadorComp expresion
    (59) opLogicas -> . terminoLogico
    (60) opLogicas -> . terminoLogico operadorLog terminoLogico
    (61) opLogicas -> . terminoLogico operadorLog terminoLogico operadorLog opLogicas
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (62) terminoLogico -> . VARIABLE
    (63) terminoLogico -> . BOOLEAN
    (64) terminoLogico -> . PIZQ comparacion PDER
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE

    VARIABLE        shift and go to state 97
    BOOLEAN         shift and go to state 98
    PIZQ            shift and go to state 86
    ENTERO          shift and go to state 28

    comparacion                    shift and go to state 234
    opLogicas                      shift and go to state 235
    expresion                      shift and go to state 96
    terminoLogico                  shift and go to state 87
    valor                          shift and go to state 16

state 229

    (92) varianteIf -> ELSE LIZQ . algoritmo LDER
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (12) algoritmo -> . expresionSinRetorno
    (46) imprimir -> . PRINT PIZQ opstring PDER END
    (15) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (16) asignacion -> . VARIABLE IGUAL expresiones END
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (66) comparacion -> . expresion operadorComp expresion
    (88) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (89) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (96) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (105) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (108) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (47) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (13) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (14) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (17) expresionSinRetorno -> . funcionStructura END
    (18) expresionSinRetorno -> . funcionStructura
    (80) tipo -> . VAR
    (81) tipo -> . INT
    (82) tipo -> . BOOL
    (83) tipo -> . DOUBLE
    (84) tipo -> . VOID
    (85) tipo -> . STR
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE
    (19) funcionStructura -> . first
    (20) funcionStructura -> . last
    (21) funcionStructura -> . length
    (22) funcionStructura -> . remove
    (23) funcionStructura -> . add
    (50) first -> . VARIABLE POINT FIRST PIZQ PDER
    (51) last -> . VARIABLE POINT LAST PIZQ PDER
    (52) length -> . VARIABLE POINT LEN PIZQ PDER
    (55) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (53) add -> . VARIABLE POINT ADD PIZQ valor PDER

    PRINT           shift and go to state 13
    VARIABLE        shift and go to state 15
    IF              shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    VOID            shift and go to state 21
    VAR             shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    DOUBLE          shift and go to state 26
    STR             shift and go to state 27
    ENTERO          shift and go to state 28

    algoritmo                      shift and go to state 236
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    expresionSinRetorno            shift and go to state 12
    tipo                           shift and go to state 14
    valor                          shift and go to state 16
    funcionStructura               shift and go to state 22
    first                          shift and go to state 29
    last                           shift and go to state 30
    length                         shift and go to state 31
    remove                         shift and go to state 32
    add                            shift and go to state 33

state 230

    (107) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .

    PRINT           reduce using rule 107 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    VARIABLE        reduce using rule 107 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    IF              reduce using rule 107 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    FOR             reduce using rule 107 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    WHILE           reduce using rule 107 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    DO              reduce using rule 107 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    VOID            reduce using rule 107 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    VAR             reduce using rule 107 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    INT             reduce using rule 107 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    BOOL            reduce using rule 107 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    DOUBLE          reduce using rule 107 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    STR             reduce using rule 107 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    ENTERO          reduce using rule 107 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    $end            reduce using rule 107 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    RETURN          reduce using rule 107 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    LDER            reduce using rule 107 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)


state 231

    (108) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .

    PRINT           reduce using rule 108 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    VARIABLE        reduce using rule 108 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    IF              reduce using rule 108 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    FOR             reduce using rule 108 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    WHILE           reduce using rule 108 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    DO              reduce using rule 108 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    VOID            reduce using rule 108 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    VAR             reduce using rule 108 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    INT             reduce using rule 108 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    BOOL            reduce using rule 108 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    DOUBLE          reduce using rule 108 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    STR             reduce using rule 108 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    ENTERO          reduce using rule 108 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    $end            reduce using rule 108 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    RETURN          reduce using rule 108 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)
    LDER            reduce using rule 108 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END .)


state 232

    (13) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END . LDER

    LDER            shift and go to state 237


state 233

    (54) slice -> VARIABLE POINT SLICE PIZQ valor COMA valor PDER .

    END             reduce using rule 54 (slice -> VARIABLE POINT SLICE PIZQ valor COMA valor PDER .)


state 234

    (90) varianteIf -> ELSEIF PIZQ comparacion . PDER LIZQ algoritmo LDER
    (93) varianteIf -> ELSEIF PIZQ comparacion . PDER LIZQ algoritmo LDER varianteIf

    PDER            shift and go to state 238


state 235

    (91) varianteIf -> ELSEIF PIZQ opLogicas . PDER LIZQ algoritmo LDER
    (94) varianteIf -> ELSEIF PIZQ opLogicas . PDER LIZQ algoritmo LDER varianteIf

    PDER            shift and go to state 239


state 236

    (92) varianteIf -> ELSE LIZQ algoritmo . LDER

    LDER            shift and go to state 240


state 237

    (13) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .

    PRINT           reduce using rule 13 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    VARIABLE        reduce using rule 13 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    IF              reduce using rule 13 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    FOR             reduce using rule 13 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    WHILE           reduce using rule 13 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    DO              reduce using rule 13 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    VOID            reduce using rule 13 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    VAR             reduce using rule 13 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    INT             reduce using rule 13 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    BOOL            reduce using rule 13 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    DOUBLE          reduce using rule 13 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    STR             reduce using rule 13 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    ENTERO          reduce using rule 13 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    $end            reduce using rule 13 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    RETURN          reduce using rule 13 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)
    LDER            reduce using rule 13 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER .)


state 238

    (90) varianteIf -> ELSEIF PIZQ comparacion PDER . LIZQ algoritmo LDER
    (93) varianteIf -> ELSEIF PIZQ comparacion PDER . LIZQ algoritmo LDER varianteIf

    LIZQ            shift and go to state 241


state 239

    (91) varianteIf -> ELSEIF PIZQ opLogicas PDER . LIZQ algoritmo LDER
    (94) varianteIf -> ELSEIF PIZQ opLogicas PDER . LIZQ algoritmo LDER varianteIf

    LIZQ            shift and go to state 242


state 240

    (92) varianteIf -> ELSE LIZQ algoritmo LDER .

    PRINT           reduce using rule 92 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    VARIABLE        reduce using rule 92 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    IF              reduce using rule 92 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    FOR             reduce using rule 92 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    WHILE           reduce using rule 92 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    DO              reduce using rule 92 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    VOID            reduce using rule 92 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    VAR             reduce using rule 92 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    INT             reduce using rule 92 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    BOOL            reduce using rule 92 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    DOUBLE          reduce using rule 92 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    STR             reduce using rule 92 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    ENTERO          reduce using rule 92 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    $end            reduce using rule 92 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    RETURN          reduce using rule 92 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    LDER            reduce using rule 92 (varianteIf -> ELSE LIZQ algoritmo LDER .)


state 241

    (90) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ . algoritmo LDER
    (93) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ . algoritmo LDER varianteIf
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (12) algoritmo -> . expresionSinRetorno
    (46) imprimir -> . PRINT PIZQ opstring PDER END
    (15) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (16) asignacion -> . VARIABLE IGUAL expresiones END
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (66) comparacion -> . expresion operadorComp expresion
    (88) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (89) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (96) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (105) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (108) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (47) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (13) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (14) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (17) expresionSinRetorno -> . funcionStructura END
    (18) expresionSinRetorno -> . funcionStructura
    (80) tipo -> . VAR
    (81) tipo -> . INT
    (82) tipo -> . BOOL
    (83) tipo -> . DOUBLE
    (84) tipo -> . VOID
    (85) tipo -> . STR
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE
    (19) funcionStructura -> . first
    (20) funcionStructura -> . last
    (21) funcionStructura -> . length
    (22) funcionStructura -> . remove
    (23) funcionStructura -> . add
    (50) first -> . VARIABLE POINT FIRST PIZQ PDER
    (51) last -> . VARIABLE POINT LAST PIZQ PDER
    (52) length -> . VARIABLE POINT LEN PIZQ PDER
    (55) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (53) add -> . VARIABLE POINT ADD PIZQ valor PDER

    PRINT           shift and go to state 13
    VARIABLE        shift and go to state 15
    IF              shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    VOID            shift and go to state 21
    VAR             shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    DOUBLE          shift and go to state 26
    STR             shift and go to state 27
    ENTERO          shift and go to state 28

    comparacion                    shift and go to state 6
    algoritmo                      shift and go to state 243
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    expresionSinRetorno            shift and go to state 12
    tipo                           shift and go to state 14
    valor                          shift and go to state 16
    funcionStructura               shift and go to state 22
    first                          shift and go to state 29
    last                           shift and go to state 30
    length                         shift and go to state 31
    remove                         shift and go to state 32
    add                            shift and go to state 33

state 242

    (91) varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ . algoritmo LDER
    (94) varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ . algoritmo LDER varianteIf
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (12) algoritmo -> . expresionSinRetorno
    (46) imprimir -> . PRINT PIZQ opstring PDER END
    (15) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (16) asignacion -> . VARIABLE IGUAL expresiones END
    (48) expresion -> . valor
    (65) expresion -> . valor operadorMat expresion
    (66) comparacion -> . expresion operadorComp expresion
    (88) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (89) sentenciaIf -> . IF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (96) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (105) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (106) sentenciaWhile -> . WHILE PIZQ opLogicas PDER LIZQ algoritmo LDER
    (107) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (108) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ opLogicas PDER END
    (47) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (13) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ codigo RETURN expresion END LDER
    (14) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ codigo LDER
    (17) expresionSinRetorno -> . funcionStructura END
    (18) expresionSinRetorno -> . funcionStructura
    (80) tipo -> . VAR
    (81) tipo -> . INT
    (82) tipo -> . BOOL
    (83) tipo -> . DOUBLE
    (84) tipo -> . VOID
    (85) tipo -> . STR
    (86) valor -> . ENTERO
    (87) valor -> . VARIABLE
    (19) funcionStructura -> . first
    (20) funcionStructura -> . last
    (21) funcionStructura -> . length
    (22) funcionStructura -> . remove
    (23) funcionStructura -> . add
    (50) first -> . VARIABLE POINT FIRST PIZQ PDER
    (51) last -> . VARIABLE POINT LAST PIZQ PDER
    (52) length -> . VARIABLE POINT LEN PIZQ PDER
    (55) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (53) add -> . VARIABLE POINT ADD PIZQ valor PDER

    PRINT           shift and go to state 13
    VARIABLE        shift and go to state 15
    IF              shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    VOID            shift and go to state 21
    VAR             shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    DOUBLE          shift and go to state 26
    STR             shift and go to state 27
    ENTERO          shift and go to state 28

    algoritmo                      shift and go to state 244
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    expresionSinRetorno            shift and go to state 12
    tipo                           shift and go to state 14
    valor                          shift and go to state 16
    funcionStructura               shift and go to state 22
    first                          shift and go to state 29
    last                           shift and go to state 30
    length                         shift and go to state 31
    remove                         shift and go to state 32
    add                            shift and go to state 33

state 243

    (90) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo . LDER
    (93) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo . LDER varianteIf

    LDER            shift and go to state 245


state 244

    (91) varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo . LDER
    (94) varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo . LDER varianteIf

    LDER            shift and go to state 246


state 245

    (90) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .
    (93) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER . varianteIf
    (90) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
    (91) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER
    (92) varianteIf -> . ELSE LIZQ algoritmo LDER
    (93) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (94) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (95) varianteIf -> . empty
    (110) empty -> .

  ! reduce/reduce conflict for PRINT resolved using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for IF resolved using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for FOR resolved using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for WHILE resolved using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for DO resolved using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for VOID resolved using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for VAR resolved using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for INT resolved using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for BOOL resolved using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for STR resolved using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for ENTERO resolved using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for $end resolved using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for RETURN resolved using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for LDER resolved using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    PRINT           reduce using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VARIABLE        reduce using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    IF              reduce using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    FOR             reduce using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    WHILE           reduce using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    DO              reduce using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VOID            reduce using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VAR             reduce using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    INT             reduce using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    BOOL            reduce using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    DOUBLE          reduce using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    STR             reduce using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    ENTERO          reduce using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    $end            reduce using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    RETURN          reduce using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    LDER            reduce using rule 90 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    ELSEIF          shift and go to state 215
    ELSE            shift and go to state 216

  ! PRINT           [ reduce using rule 110 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! DO              [ reduce using rule 110 (empty -> .) ]
  ! VOID            [ reduce using rule 110 (empty -> .) ]
  ! VAR             [ reduce using rule 110 (empty -> .) ]
  ! INT             [ reduce using rule 110 (empty -> .) ]
  ! BOOL            [ reduce using rule 110 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 110 (empty -> .) ]
  ! STR             [ reduce using rule 110 (empty -> .) ]
  ! ENTERO          [ reduce using rule 110 (empty -> .) ]
  ! $end            [ reduce using rule 110 (empty -> .) ]
  ! RETURN          [ reduce using rule 110 (empty -> .) ]
  ! LDER            [ reduce using rule 110 (empty -> .) ]

    varianteIf                     shift and go to state 247
    empty                          shift and go to state 217

state 246

    (91) varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .
    (94) varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER . varianteIf
    (90) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
    (91) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER
    (92) varianteIf -> . ELSE LIZQ algoritmo LDER
    (93) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (94) varianteIf -> . ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf
    (95) varianteIf -> . empty
    (110) empty -> .

  ! reduce/reduce conflict for PRINT resolved using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for IF resolved using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for FOR resolved using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for WHILE resolved using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for DO resolved using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for VOID resolved using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for VAR resolved using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for INT resolved using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for BOOL resolved using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for STR resolved using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for ENTERO resolved using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for $end resolved using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for RETURN resolved using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for LDER resolved using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    PRINT           reduce using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    VARIABLE        reduce using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    IF              reduce using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    FOR             reduce using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    WHILE           reduce using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    DO              reduce using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    VOID            reduce using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    VAR             reduce using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    INT             reduce using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    BOOL            reduce using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    DOUBLE          reduce using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    STR             reduce using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    ENTERO          reduce using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    $end            reduce using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    RETURN          reduce using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    LDER            reduce using rule 91 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER .)
    ELSEIF          shift and go to state 215
    ELSE            shift and go to state 216

  ! PRINT           [ reduce using rule 110 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! DO              [ reduce using rule 110 (empty -> .) ]
  ! VOID            [ reduce using rule 110 (empty -> .) ]
  ! VAR             [ reduce using rule 110 (empty -> .) ]
  ! INT             [ reduce using rule 110 (empty -> .) ]
  ! BOOL            [ reduce using rule 110 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 110 (empty -> .) ]
  ! STR             [ reduce using rule 110 (empty -> .) ]
  ! ENTERO          [ reduce using rule 110 (empty -> .) ]
  ! $end            [ reduce using rule 110 (empty -> .) ]
  ! RETURN          [ reduce using rule 110 (empty -> .) ]
  ! LDER            [ reduce using rule 110 (empty -> .) ]

    varianteIf                     shift and go to state 248
    empty                          shift and go to state 217

state 247

    (93) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .

    PRINT           reduce using rule 93 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VARIABLE        reduce using rule 93 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    IF              reduce using rule 93 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    FOR             reduce using rule 93 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    WHILE           reduce using rule 93 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    DO              reduce using rule 93 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VOID            reduce using rule 93 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VAR             reduce using rule 93 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    INT             reduce using rule 93 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    BOOL            reduce using rule 93 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    DOUBLE          reduce using rule 93 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    STR             reduce using rule 93 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    ENTERO          reduce using rule 93 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    $end            reduce using rule 93 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    RETURN          reduce using rule 93 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    LDER            reduce using rule 93 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)


state 248

    (94) varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .

    PRINT           reduce using rule 94 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    VARIABLE        reduce using rule 94 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    IF              reduce using rule 94 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    FOR             reduce using rule 94 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    WHILE           reduce using rule 94 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    DO              reduce using rule 94 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    VOID            reduce using rule 94 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    VAR             reduce using rule 94 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    INT             reduce using rule 94 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    BOOL            reduce using rule 94 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    DOUBLE          reduce using rule 94 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    STR             reduce using rule 94 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    ENTERO          reduce using rule 94 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    $end            reduce using rule 94 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    RETURN          reduce using rule 94 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)
    LDER            reduce using rule 94 (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER varianteIf .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARIABLE in state 21 resolved as shift
WARNING: shift/reduce conflict for MAS in state 68 resolved as shift
WARNING: reduce/reduce conflict in state 68 resolved using rule (opstring -> VARIABLE)
WARNING: rejected rule (valor -> VARIABLE) in state 68
WARNING: reduce/reduce conflict in state 68 resolved using rule (opstring -> VARIABLE)
WARNING: rejected rule (terminoLogico -> VARIABLE) in state 68
WARNING: reduce/reduce conflict in state 72 resolved using rule (expresiones -> BOOLEAN)
WARNING: rejected rule (terminoLogico -> BOOLEAN) in state 72
WARNING: reduce/reduce conflict in state 245 resolved using rule (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER)
WARNING: rejected rule (empty -> <empty>) in state 245
WARNING: reduce/reduce conflict in state 246 resolved using rule (varianteIf -> ELSEIF PIZQ opLogicas PDER LIZQ algoritmo LDER)
WARNING: rejected rule (empty -> <empty>) in state 246
