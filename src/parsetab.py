
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND BOOL BOOLEAN BREAK CDER CIZQ COMA CONTINUE DECREMENTO DIF DIGUAL DIV DOUBLE ELSE ELSEIF END ENTERO FIRST FOR IF IGUAL IN INCREMENTO INPUT INT LAST LDER LEN LIZQ MAS MAYOR MAYORIG MENOR MENORIG MOD NEGACION OR PDER PIZQ POINT PRINT PROD REMOVE RESTA RETURN SLICE STRING VAR VARIABLE VOID WHILEalgoritmo : imprimir END\n                    | asignacion END\n                    | expresion END\n                    | comparacion\n                    | sentenciaIf END\n    sentenciaIf : IF PIZQ comparacion PDER LIZQ algoritmo  LDERasignacion : tipo VARIABLE IGUAL expresionimprimir : PRINT PIZQ expresion PDERexpresion : valor\n    expresion : valor operadorMat expresioncomparacion : expresion operadorComp expresionoperadorMat : MAS \n                    | RESTA\n                    | PROD\n                    | DIV\n    operadorComp : MAYOR \n                    | MENOR\n                    | MAYORIG\n                    | MENORIG\n                    | DIGUAL\n                    | DIF\n    tipo : VAR\n            | INT\n            | BOOL\n            | DOUBLE\n    valor : ENTERO\n             | VARIABLE\n    '
    
_lr_action_items = {'PRINT':([0,45,],[7,7,]),'IF':([0,45,],[11,11,]),'VAR':([0,45,],[12,12,]),'INT':([0,45,],[13,13,]),'BOOL':([0,45,],[14,14,]),'DOUBLE':([0,45,],[15,15,]),'ENTERO':([0,20,21,22,23,24,25,26,28,30,31,32,33,34,35,38,45,],[16,16,-16,-17,-18,-19,-20,-21,16,16,-12,-13,-14,-15,16,16,16,]),'VARIABLE':([0,8,12,13,14,15,20,21,22,23,24,25,26,28,30,31,32,33,34,35,38,45,],[9,29,-22,-23,-24,-25,9,-16,-17,-18,-19,-20,-21,9,9,-12,-13,-14,-15,9,9,9,]),'$end':([1,5,9,10,16,17,18,19,27,36,39,],[0,-4,-27,-9,-26,-1,-2,-3,-5,-11,-10,]),'END':([2,3,4,6,9,10,16,39,42,43,47,],[17,18,19,27,-27,-9,-26,-10,-8,-7,-6,]),'MAYOR':([4,9,10,16,39,41,],[21,-27,-9,-26,-10,21,]),'MENOR':([4,9,10,16,39,41,],[22,-27,-9,-26,-10,22,]),'MAYORIG':([4,9,10,16,39,41,],[23,-27,-9,-26,-10,23,]),'MENORIG':([4,9,10,16,39,41,],[24,-27,-9,-26,-10,24,]),'DIGUAL':([4,9,10,16,39,41,],[25,-27,-9,-26,-10,25,]),'DIF':([4,9,10,16,39,41,],[26,-27,-9,-26,-10,26,]),'LDER':([5,9,10,16,17,18,19,27,36,39,46,],[-4,-27,-9,-26,-1,-2,-3,-5,-11,-10,47,]),'PIZQ':([7,11,],[28,35,]),'MAS':([9,10,16,],[-27,31,-26,]),'RESTA':([9,10,16,],[-27,32,-26,]),'PROD':([9,10,16,],[-27,33,-26,]),'DIV':([9,10,16,],[-27,34,-26,]),'PDER':([9,10,16,36,37,39,40,],[-27,-9,-26,-11,42,-10,44,]),'IGUAL':([29,],[38,]),'LIZQ':([44,],[45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'algoritmo':([0,45,],[1,46,]),'imprimir':([0,45,],[2,2,]),'asignacion':([0,45,],[3,3,]),'expresion':([0,20,28,30,35,38,45,],[4,36,37,39,41,43,4,]),'comparacion':([0,35,45,],[5,40,5,]),'sentenciaIf':([0,45,],[6,6,]),'tipo':([0,45,],[8,8,]),'valor':([0,20,28,30,35,38,45,],[10,10,10,10,10,10,10,]),'operadorComp':([4,41,],[20,20,]),'operadorMat':([10,],[30,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> algoritmo","S'",1,None,None,None),
  ('algoritmo -> imprimir END','algoritmo',2,'p_algoritmo','sintaxis_Dart.py',11),
  ('algoritmo -> asignacion END','algoritmo',2,'p_algoritmo','sintaxis_Dart.py',12),
  ('algoritmo -> expresion END','algoritmo',2,'p_algoritmo','sintaxis_Dart.py',13),
  ('algoritmo -> comparacion','algoritmo',1,'p_algoritmo','sintaxis_Dart.py',14),
  ('algoritmo -> sentenciaIf END','algoritmo',2,'p_algoritmo','sintaxis_Dart.py',15),
  ('sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER','sentenciaIf',7,'p_sentenciaIf','sintaxis_Dart.py',19),
  ('asignacion -> tipo VARIABLE IGUAL expresion','asignacion',4,'p_asignacion','sintaxis_Dart.py',22),
  ('imprimir -> PRINT PIZQ expresion PDER','imprimir',4,'p_imprimir','sintaxis_Dart.py',25),
  ('expresion -> valor','expresion',1,'p_expresion','sintaxis_Dart.py',28),
  ('expresion -> valor operadorMat expresion','expresion',3,'p_expresion_aritmetica','sintaxis_Dart.py',31),
  ('comparacion -> expresion operadorComp expresion','comparacion',3,'p_comparacion','sintaxis_Dart.py',34),
  ('operadorMat -> MAS','operadorMat',1,'p_operadorMat','sintaxis_Dart.py',37),
  ('operadorMat -> RESTA','operadorMat',1,'p_operadorMat','sintaxis_Dart.py',38),
  ('operadorMat -> PROD','operadorMat',1,'p_operadorMat','sintaxis_Dart.py',39),
  ('operadorMat -> DIV','operadorMat',1,'p_operadorMat','sintaxis_Dart.py',40),
  ('operadorComp -> MAYOR','operadorComp',1,'p_operadorComp','sintaxis_Dart.py',43),
  ('operadorComp -> MENOR','operadorComp',1,'p_operadorComp','sintaxis_Dart.py',44),
  ('operadorComp -> MAYORIG','operadorComp',1,'p_operadorComp','sintaxis_Dart.py',45),
  ('operadorComp -> MENORIG','operadorComp',1,'p_operadorComp','sintaxis_Dart.py',46),
  ('operadorComp -> DIGUAL','operadorComp',1,'p_operadorComp','sintaxis_Dart.py',47),
  ('operadorComp -> DIF','operadorComp',1,'p_operadorComp','sintaxis_Dart.py',48),
  ('tipo -> VAR','tipo',1,'p_tipo','sintaxis_Dart.py',51),
  ('tipo -> INT','tipo',1,'p_tipo','sintaxis_Dart.py',52),
  ('tipo -> BOOL','tipo',1,'p_tipo','sintaxis_Dart.py',53),
  ('tipo -> DOUBLE','tipo',1,'p_tipo','sintaxis_Dart.py',54),
  ('valor -> ENTERO','valor',1,'p_valor','sintaxis_Dart.py',57),
  ('valor -> VARIABLE','valor',1,'p_valor','sintaxis_Dart.py',58),
]
