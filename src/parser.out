Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ADD
    AND
    BREAK
    COMA
    CONTINUE
    FIRST
    INPUT
    LAST
    LEN
    NEGACION
    OR
    POINT
    REMOVE
    RETURN
    SLICE

Grammar

Rule 0     S' -> algoritmo
Rule 1     algoritmo -> imprimir
Rule 2     algoritmo -> asignacion
Rule 3     algoritmo -> expresion
Rule 4     algoritmo -> comparacion
Rule 5     algoritmo -> sentenciaIf
Rule 6     algoritmo -> sentenciaFOR
Rule 7     algoritmo -> sentenciaWhile
Rule 8     algoritmo -> empty
Rule 9     asignacion -> tipo VARIABLE IGUAL expresiones END
Rule 10    expresiones -> expresion
Rule 11    expresiones -> comparacion
Rule 12    expresiones -> BOOLEAN
Rule 13    expresiones -> opstring
Rule 14    expresiones -> indexacion
Rule 15    string -> STRING
Rule 16    opstring -> string
Rule 17    opstring -> VARIABLE
Rule 18    opstring -> string MAS opstring
Rule 19    imprimir -> PRINT PIZQ expresiones PDER END
Rule 20    expresion -> valor
Rule 21    expresion -> valor operadorMat expresion
Rule 22    comparacion -> expresion operadorComp expresion
Rule 23    operadorMat -> MAS
Rule 24    operadorMat -> RESTA
Rule 25    operadorMat -> PROD
Rule 26    operadorMat -> DIV
Rule 27    operadorMat -> MOD
Rule 28    operadorComp -> MAYOR
Rule 29    operadorComp -> MENOR
Rule 30    operadorComp -> MAYORIG
Rule 31    operadorComp -> MENORIG
Rule 32    operadorComp -> DIGUAL
Rule 33    operadorComp -> DIF
Rule 34    tipo -> VAR
Rule 35    tipo -> INT
Rule 36    tipo -> BOOL
Rule 37    tipo -> DOUBLE
Rule 38    tipo -> empty
Rule 39    tipo -> VOID
Rule 40    valor -> ENTERO
Rule 41    valor -> VARIABLE
Rule 42    sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END
Rule 43    varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
Rule 44    varianteIf -> ELSE LIZQ algoritmo LDER
Rule 45    varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
Rule 46    varianteIf -> empty
Rule 47    sentenciaFOR -> FOR PIZQ parametros PDER LIZQ algoritmo LDER END
Rule 48    parametros -> inicializacionFor END comparacion END VARIABLE increDecre
Rule 49    parametros -> VARIABLE IN VARIABLE
Rule 50    inicializacionFor -> VARIABLE IGUAL ENTERO
Rule 51    inicializacionFor -> INT VARIABLE IGUAL ENTERO
Rule 52    inicializacionFor -> VAR VARIABLE IGUAL ENTERO
Rule 53    increDecre -> INCREMENTO
Rule 54    increDecre -> DECREMENTO
Rule 55    sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END
Rule 56    sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
Rule 57    indexacion -> VARIABLE CIZQ valor CDER
Rule 58    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 
AND                  : 
BOOL                 : 36
BOOLEAN              : 12
BREAK                : 
CDER                 : 57
CIZQ                 : 57
COMA                 : 
CONTINUE             : 
DECREMENTO           : 54
DIF                  : 33
DIGUAL               : 32
DIV                  : 26
DO                   : 56
DOUBLE               : 37
ELSE                 : 44
ELSEIF               : 43 45
END                  : 9 19 42 47 48 48 55 56
ENTERO               : 40 50 51 52
FIRST                : 
FOR                  : 47
IF                   : 42
IGUAL                : 9 50 51 52
IN                   : 49
INCREMENTO           : 53
INPUT                : 
INT                  : 35 51
LAST                 : 
LDER                 : 42 43 44 45 47 55 56
LEN                  : 
LIZQ                 : 42 43 44 45 47 55 56
MAS                  : 18 23
MAYOR                : 28
MAYORIG              : 30
MENOR                : 29
MENORIG              : 31
MOD                  : 27
NEGACION             : 
OR                   : 
PDER                 : 19 42 43 45 47 55 56
PIZQ                 : 19 42 43 45 47 55 56
POINT                : 
PRINT                : 19
PROD                 : 25
REMOVE               : 
RESTA                : 24
RETURN               : 
SLICE                : 
STRING               : 15
VAR                  : 34 52
VARIABLE             : 9 17 41 48 49 49 50 51 52 57
VOID                 : 39
WHILE                : 55 56
error                : 

Nonterminals, with rules where they appear

algoritmo            : 42 43 44 45 47 55 56 0
asignacion           : 2
comparacion          : 4 11 42 43 45 48 55 56
empty                : 8 38 46
expresion            : 3 10 21 22 22
expresiones          : 9 19
imprimir             : 1
increDecre           : 48
indexacion           : 14
inicializacionFor    : 48
operadorComp         : 22
operadorMat          : 21
opstring             : 13 18
parametros           : 47
sentenciaFOR         : 6
sentenciaIf          : 5
sentenciaWhile       : 7
string               : 16 18
tipo                 : 9
valor                : 20 21 57
varianteIf           : 42 45

Parsing method: LALR

state 0

    (0) S' -> . algoritmo
    (1) algoritmo -> . imprimir
    (2) algoritmo -> . asignacion
    (3) algoritmo -> . expresion
    (4) algoritmo -> . comparacion
    (5) algoritmo -> . sentenciaIf
    (6) algoritmo -> . sentenciaFOR
    (7) algoritmo -> . sentenciaWhile
    (8) algoritmo -> . empty
    (19) imprimir -> . PRINT PIZQ expresiones PDER END
    (9) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (20) expresion -> . valor
    (21) expresion -> . valor operadorMat expresion
    (22) comparacion -> . expresion operadorComp expresion
    (42) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END
    (47) sentenciaFOR -> . FOR PIZQ parametros PDER LIZQ algoritmo LDER END
    (55) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END
    (56) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (58) empty -> .
    (34) tipo -> . VAR
    (35) tipo -> . INT
    (36) tipo -> . BOOL
    (37) tipo -> . DOUBLE
    (38) tipo -> . empty
    (39) tipo -> . VOID
    (40) valor -> . ENTERO
    (41) valor -> . VARIABLE

  ! shift/reduce conflict for VARIABLE resolved as shift
    PRINT           shift and go to state 10
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    DO              shift and go to state 17
    $end            reduce using rule 58 (empty -> .)
    VAR             shift and go to state 18
    INT             shift and go to state 19
    BOOL            shift and go to state 20
    DOUBLE          shift and go to state 21
    VOID            shift and go to state 22
    ENTERO          shift and go to state 23
    VARIABLE        shift and go to state 12

  ! VARIABLE        [ reduce using rule 58 (empty -> .) ]

    algoritmo                      shift and go to state 1
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    expresion                      shift and go to state 4
    comparacion                    shift and go to state 5
    sentenciaIf                    shift and go to state 6
    sentenciaFOR                   shift and go to state 7
    sentenciaWhile                 shift and go to state 8
    empty                          shift and go to state 9
    tipo                           shift and go to state 11
    valor                          shift and go to state 13

state 1

    (0) S' -> algoritmo .



state 2

    (1) algoritmo -> imprimir .

    $end            reduce using rule 1 (algoritmo -> imprimir .)
    LDER            reduce using rule 1 (algoritmo -> imprimir .)


state 3

    (2) algoritmo -> asignacion .

    $end            reduce using rule 2 (algoritmo -> asignacion .)
    LDER            reduce using rule 2 (algoritmo -> asignacion .)


state 4

    (3) algoritmo -> expresion .
    (22) comparacion -> expresion . operadorComp expresion
    (28) operadorComp -> . MAYOR
    (29) operadorComp -> . MENOR
    (30) operadorComp -> . MAYORIG
    (31) operadorComp -> . MENORIG
    (32) operadorComp -> . DIGUAL
    (33) operadorComp -> . DIF

    $end            reduce using rule 3 (algoritmo -> expresion .)
    LDER            reduce using rule 3 (algoritmo -> expresion .)
    MAYOR           shift and go to state 25
    MENOR           shift and go to state 26
    MAYORIG         shift and go to state 27
    MENORIG         shift and go to state 28
    DIGUAL          shift and go to state 29
    DIF             shift and go to state 30

    operadorComp                   shift and go to state 24

state 5

    (4) algoritmo -> comparacion .

    $end            reduce using rule 4 (algoritmo -> comparacion .)
    LDER            reduce using rule 4 (algoritmo -> comparacion .)


state 6

    (5) algoritmo -> sentenciaIf .

    $end            reduce using rule 5 (algoritmo -> sentenciaIf .)
    LDER            reduce using rule 5 (algoritmo -> sentenciaIf .)


state 7

    (6) algoritmo -> sentenciaFOR .

    $end            reduce using rule 6 (algoritmo -> sentenciaFOR .)
    LDER            reduce using rule 6 (algoritmo -> sentenciaFOR .)


state 8

    (7) algoritmo -> sentenciaWhile .

    $end            reduce using rule 7 (algoritmo -> sentenciaWhile .)
    LDER            reduce using rule 7 (algoritmo -> sentenciaWhile .)


state 9

    (8) algoritmo -> empty .
    (38) tipo -> empty .

    $end            reduce using rule 8 (algoritmo -> empty .)
    LDER            reduce using rule 8 (algoritmo -> empty .)
    VARIABLE        reduce using rule 38 (tipo -> empty .)


state 10

    (19) imprimir -> PRINT . PIZQ expresiones PDER END

    PIZQ            shift and go to state 31


state 11

    (9) asignacion -> tipo . VARIABLE IGUAL expresiones END

    VARIABLE        shift and go to state 32


state 12

    (41) valor -> VARIABLE .

    MAS             reduce using rule 41 (valor -> VARIABLE .)
    RESTA           reduce using rule 41 (valor -> VARIABLE .)
    PROD            reduce using rule 41 (valor -> VARIABLE .)
    DIV             reduce using rule 41 (valor -> VARIABLE .)
    MOD             reduce using rule 41 (valor -> VARIABLE .)
    MAYOR           reduce using rule 41 (valor -> VARIABLE .)
    MENOR           reduce using rule 41 (valor -> VARIABLE .)
    MAYORIG         reduce using rule 41 (valor -> VARIABLE .)
    MENORIG         reduce using rule 41 (valor -> VARIABLE .)
    DIGUAL          reduce using rule 41 (valor -> VARIABLE .)
    DIF             reduce using rule 41 (valor -> VARIABLE .)
    $end            reduce using rule 41 (valor -> VARIABLE .)
    PDER            reduce using rule 41 (valor -> VARIABLE .)
    LDER            reduce using rule 41 (valor -> VARIABLE .)
    END             reduce using rule 41 (valor -> VARIABLE .)
    CDER            reduce using rule 41 (valor -> VARIABLE .)


state 13

    (20) expresion -> valor .
    (21) expresion -> valor . operadorMat expresion
    (23) operadorMat -> . MAS
    (24) operadorMat -> . RESTA
    (25) operadorMat -> . PROD
    (26) operadorMat -> . DIV
    (27) operadorMat -> . MOD

    MAYOR           reduce using rule 20 (expresion -> valor .)
    MENOR           reduce using rule 20 (expresion -> valor .)
    MAYORIG         reduce using rule 20 (expresion -> valor .)
    MENORIG         reduce using rule 20 (expresion -> valor .)
    DIGUAL          reduce using rule 20 (expresion -> valor .)
    DIF             reduce using rule 20 (expresion -> valor .)
    $end            reduce using rule 20 (expresion -> valor .)
    PDER            reduce using rule 20 (expresion -> valor .)
    LDER            reduce using rule 20 (expresion -> valor .)
    END             reduce using rule 20 (expresion -> valor .)
    MAS             shift and go to state 34
    RESTA           shift and go to state 35
    PROD            shift and go to state 36
    DIV             shift and go to state 37
    MOD             shift and go to state 38

    operadorMat                    shift and go to state 33

state 14

    (42) sentenciaIf -> IF . PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END

    PIZQ            shift and go to state 39


state 15

    (47) sentenciaFOR -> FOR . PIZQ parametros PDER LIZQ algoritmo LDER END

    PIZQ            shift and go to state 40


state 16

    (55) sentenciaWhile -> WHILE . PIZQ comparacion PDER LIZQ algoritmo LDER END

    PIZQ            shift and go to state 41


state 17

    (56) sentenciaWhile -> DO . LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END

    LIZQ            shift and go to state 42


state 18

    (34) tipo -> VAR .

    VARIABLE        reduce using rule 34 (tipo -> VAR .)


state 19

    (35) tipo -> INT .

    VARIABLE        reduce using rule 35 (tipo -> INT .)


state 20

    (36) tipo -> BOOL .

    VARIABLE        reduce using rule 36 (tipo -> BOOL .)


state 21

    (37) tipo -> DOUBLE .

    VARIABLE        reduce using rule 37 (tipo -> DOUBLE .)


state 22

    (39) tipo -> VOID .

    VARIABLE        reduce using rule 39 (tipo -> VOID .)


state 23

    (40) valor -> ENTERO .

    MAS             reduce using rule 40 (valor -> ENTERO .)
    RESTA           reduce using rule 40 (valor -> ENTERO .)
    PROD            reduce using rule 40 (valor -> ENTERO .)
    DIV             reduce using rule 40 (valor -> ENTERO .)
    MOD             reduce using rule 40 (valor -> ENTERO .)
    MAYOR           reduce using rule 40 (valor -> ENTERO .)
    MENOR           reduce using rule 40 (valor -> ENTERO .)
    MAYORIG         reduce using rule 40 (valor -> ENTERO .)
    MENORIG         reduce using rule 40 (valor -> ENTERO .)
    DIGUAL          reduce using rule 40 (valor -> ENTERO .)
    DIF             reduce using rule 40 (valor -> ENTERO .)
    $end            reduce using rule 40 (valor -> ENTERO .)
    PDER            reduce using rule 40 (valor -> ENTERO .)
    LDER            reduce using rule 40 (valor -> ENTERO .)
    END             reduce using rule 40 (valor -> ENTERO .)
    CDER            reduce using rule 40 (valor -> ENTERO .)


state 24

    (22) comparacion -> expresion operadorComp . expresion
    (20) expresion -> . valor
    (21) expresion -> . valor operadorMat expresion
    (40) valor -> . ENTERO
    (41) valor -> . VARIABLE

    ENTERO          shift and go to state 23
    VARIABLE        shift and go to state 12

    expresion                      shift and go to state 43
    valor                          shift and go to state 13

state 25

    (28) operadorComp -> MAYOR .

    ENTERO          reduce using rule 28 (operadorComp -> MAYOR .)
    VARIABLE        reduce using rule 28 (operadorComp -> MAYOR .)


state 26

    (29) operadorComp -> MENOR .

    ENTERO          reduce using rule 29 (operadorComp -> MENOR .)
    VARIABLE        reduce using rule 29 (operadorComp -> MENOR .)


state 27

    (30) operadorComp -> MAYORIG .

    ENTERO          reduce using rule 30 (operadorComp -> MAYORIG .)
    VARIABLE        reduce using rule 30 (operadorComp -> MAYORIG .)


state 28

    (31) operadorComp -> MENORIG .

    ENTERO          reduce using rule 31 (operadorComp -> MENORIG .)
    VARIABLE        reduce using rule 31 (operadorComp -> MENORIG .)


state 29

    (32) operadorComp -> DIGUAL .

    ENTERO          reduce using rule 32 (operadorComp -> DIGUAL .)
    VARIABLE        reduce using rule 32 (operadorComp -> DIGUAL .)


state 30

    (33) operadorComp -> DIF .

    ENTERO          reduce using rule 33 (operadorComp -> DIF .)
    VARIABLE        reduce using rule 33 (operadorComp -> DIF .)


state 31

    (19) imprimir -> PRINT PIZQ . expresiones PDER END
    (10) expresiones -> . expresion
    (11) expresiones -> . comparacion
    (12) expresiones -> . BOOLEAN
    (13) expresiones -> . opstring
    (14) expresiones -> . indexacion
    (20) expresion -> . valor
    (21) expresion -> . valor operadorMat expresion
    (22) comparacion -> . expresion operadorComp expresion
    (16) opstring -> . string
    (17) opstring -> . VARIABLE
    (18) opstring -> . string MAS opstring
    (57) indexacion -> . VARIABLE CIZQ valor CDER
    (40) valor -> . ENTERO
    (41) valor -> . VARIABLE
    (15) string -> . STRING

    BOOLEAN         shift and go to state 47
    VARIABLE        shift and go to state 51
    ENTERO          shift and go to state 23
    STRING          shift and go to state 52

    expresiones                    shift and go to state 44
    expresion                      shift and go to state 45
    comparacion                    shift and go to state 46
    opstring                       shift and go to state 48
    indexacion                     shift and go to state 49
    valor                          shift and go to state 13
    string                         shift and go to state 50

state 32

    (9) asignacion -> tipo VARIABLE . IGUAL expresiones END

    IGUAL           shift and go to state 53


state 33

    (21) expresion -> valor operadorMat . expresion
    (20) expresion -> . valor
    (21) expresion -> . valor operadorMat expresion
    (40) valor -> . ENTERO
    (41) valor -> . VARIABLE

    ENTERO          shift and go to state 23
    VARIABLE        shift and go to state 12

    valor                          shift and go to state 13
    expresion                      shift and go to state 54

state 34

    (23) operadorMat -> MAS .

    ENTERO          reduce using rule 23 (operadorMat -> MAS .)
    VARIABLE        reduce using rule 23 (operadorMat -> MAS .)


state 35

    (24) operadorMat -> RESTA .

    ENTERO          reduce using rule 24 (operadorMat -> RESTA .)
    VARIABLE        reduce using rule 24 (operadorMat -> RESTA .)


state 36

    (25) operadorMat -> PROD .

    ENTERO          reduce using rule 25 (operadorMat -> PROD .)
    VARIABLE        reduce using rule 25 (operadorMat -> PROD .)


state 37

    (26) operadorMat -> DIV .

    ENTERO          reduce using rule 26 (operadorMat -> DIV .)
    VARIABLE        reduce using rule 26 (operadorMat -> DIV .)


state 38

    (27) operadorMat -> MOD .

    ENTERO          reduce using rule 27 (operadorMat -> MOD .)
    VARIABLE        reduce using rule 27 (operadorMat -> MOD .)


state 39

    (42) sentenciaIf -> IF PIZQ . comparacion PDER LIZQ algoritmo LDER varianteIf END
    (22) comparacion -> . expresion operadorComp expresion
    (20) expresion -> . valor
    (21) expresion -> . valor operadorMat expresion
    (40) valor -> . ENTERO
    (41) valor -> . VARIABLE

    ENTERO          shift and go to state 23
    VARIABLE        shift and go to state 12

    comparacion                    shift and go to state 55
    expresion                      shift and go to state 56
    valor                          shift and go to state 13

state 40

    (47) sentenciaFOR -> FOR PIZQ . parametros PDER LIZQ algoritmo LDER END
    (48) parametros -> . inicializacionFor END comparacion END VARIABLE increDecre
    (49) parametros -> . VARIABLE IN VARIABLE
    (50) inicializacionFor -> . VARIABLE IGUAL ENTERO
    (51) inicializacionFor -> . INT VARIABLE IGUAL ENTERO
    (52) inicializacionFor -> . VAR VARIABLE IGUAL ENTERO

    VARIABLE        shift and go to state 59
    INT             shift and go to state 60
    VAR             shift and go to state 61

    parametros                     shift and go to state 57
    inicializacionFor              shift and go to state 58

state 41

    (55) sentenciaWhile -> WHILE PIZQ . comparacion PDER LIZQ algoritmo LDER END
    (22) comparacion -> . expresion operadorComp expresion
    (20) expresion -> . valor
    (21) expresion -> . valor operadorMat expresion
    (40) valor -> . ENTERO
    (41) valor -> . VARIABLE

    ENTERO          shift and go to state 23
    VARIABLE        shift and go to state 12

    comparacion                    shift and go to state 62
    expresion                      shift and go to state 56
    valor                          shift and go to state 13

state 42

    (56) sentenciaWhile -> DO LIZQ . algoritmo LDER WHILE PIZQ comparacion PDER END
    (1) algoritmo -> . imprimir
    (2) algoritmo -> . asignacion
    (3) algoritmo -> . expresion
    (4) algoritmo -> . comparacion
    (5) algoritmo -> . sentenciaIf
    (6) algoritmo -> . sentenciaFOR
    (7) algoritmo -> . sentenciaWhile
    (8) algoritmo -> . empty
    (19) imprimir -> . PRINT PIZQ expresiones PDER END
    (9) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (20) expresion -> . valor
    (21) expresion -> . valor operadorMat expresion
    (22) comparacion -> . expresion operadorComp expresion
    (42) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END
    (47) sentenciaFOR -> . FOR PIZQ parametros PDER LIZQ algoritmo LDER END
    (55) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END
    (56) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (58) empty -> .
    (34) tipo -> . VAR
    (35) tipo -> . INT
    (36) tipo -> . BOOL
    (37) tipo -> . DOUBLE
    (38) tipo -> . empty
    (39) tipo -> . VOID
    (40) valor -> . ENTERO
    (41) valor -> . VARIABLE

  ! shift/reduce conflict for VARIABLE resolved as shift
    PRINT           shift and go to state 10
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    DO              shift and go to state 17
    LDER            reduce using rule 58 (empty -> .)
    VAR             shift and go to state 18
    INT             shift and go to state 19
    BOOL            shift and go to state 20
    DOUBLE          shift and go to state 21
    VOID            shift and go to state 22
    ENTERO          shift and go to state 23
    VARIABLE        shift and go to state 12

  ! VARIABLE        [ reduce using rule 58 (empty -> .) ]

    algoritmo                      shift and go to state 63
    comparacion                    shift and go to state 5
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    expresion                      shift and go to state 4
    sentenciaIf                    shift and go to state 6
    sentenciaFOR                   shift and go to state 7
    sentenciaWhile                 shift and go to state 8
    empty                          shift and go to state 9
    tipo                           shift and go to state 11
    valor                          shift and go to state 13

state 43

    (22) comparacion -> expresion operadorComp expresion .

    $end            reduce using rule 22 (comparacion -> expresion operadorComp expresion .)
    PDER            reduce using rule 22 (comparacion -> expresion operadorComp expresion .)
    LDER            reduce using rule 22 (comparacion -> expresion operadorComp expresion .)
    END             reduce using rule 22 (comparacion -> expresion operadorComp expresion .)


state 44

    (19) imprimir -> PRINT PIZQ expresiones . PDER END

    PDER            shift and go to state 64


state 45

    (10) expresiones -> expresion .
    (22) comparacion -> expresion . operadorComp expresion
    (28) operadorComp -> . MAYOR
    (29) operadorComp -> . MENOR
    (30) operadorComp -> . MAYORIG
    (31) operadorComp -> . MENORIG
    (32) operadorComp -> . DIGUAL
    (33) operadorComp -> . DIF

    PDER            reduce using rule 10 (expresiones -> expresion .)
    END             reduce using rule 10 (expresiones -> expresion .)
    MAYOR           shift and go to state 25
    MENOR           shift and go to state 26
    MAYORIG         shift and go to state 27
    MENORIG         shift and go to state 28
    DIGUAL          shift and go to state 29
    DIF             shift and go to state 30

    operadorComp                   shift and go to state 24

state 46

    (11) expresiones -> comparacion .

    PDER            reduce using rule 11 (expresiones -> comparacion .)
    END             reduce using rule 11 (expresiones -> comparacion .)


state 47

    (12) expresiones -> BOOLEAN .

    PDER            reduce using rule 12 (expresiones -> BOOLEAN .)
    END             reduce using rule 12 (expresiones -> BOOLEAN .)


state 48

    (13) expresiones -> opstring .

    PDER            reduce using rule 13 (expresiones -> opstring .)
    END             reduce using rule 13 (expresiones -> opstring .)


state 49

    (14) expresiones -> indexacion .

    PDER            reduce using rule 14 (expresiones -> indexacion .)
    END             reduce using rule 14 (expresiones -> indexacion .)


state 50

    (16) opstring -> string .
    (18) opstring -> string . MAS opstring

    PDER            reduce using rule 16 (opstring -> string .)
    END             reduce using rule 16 (opstring -> string .)
    MAS             shift and go to state 65


state 51

    (17) opstring -> VARIABLE .
    (57) indexacion -> VARIABLE . CIZQ valor CDER
    (41) valor -> VARIABLE .

  ! reduce/reduce conflict for PDER resolved using rule 17 (opstring -> VARIABLE .)
  ! reduce/reduce conflict for END resolved using rule 17 (opstring -> VARIABLE .)
    PDER            reduce using rule 17 (opstring -> VARIABLE .)
    END             reduce using rule 17 (opstring -> VARIABLE .)
    CIZQ            shift and go to state 66
    MAS             reduce using rule 41 (valor -> VARIABLE .)
    RESTA           reduce using rule 41 (valor -> VARIABLE .)
    PROD            reduce using rule 41 (valor -> VARIABLE .)
    DIV             reduce using rule 41 (valor -> VARIABLE .)
    MOD             reduce using rule 41 (valor -> VARIABLE .)
    MAYOR           reduce using rule 41 (valor -> VARIABLE .)
    MENOR           reduce using rule 41 (valor -> VARIABLE .)
    MAYORIG         reduce using rule 41 (valor -> VARIABLE .)
    MENORIG         reduce using rule 41 (valor -> VARIABLE .)
    DIGUAL          reduce using rule 41 (valor -> VARIABLE .)
    DIF             reduce using rule 41 (valor -> VARIABLE .)

  ! PDER            [ reduce using rule 41 (valor -> VARIABLE .) ]
  ! END             [ reduce using rule 41 (valor -> VARIABLE .) ]


state 52

    (15) string -> STRING .

    MAS             reduce using rule 15 (string -> STRING .)
    PDER            reduce using rule 15 (string -> STRING .)
    END             reduce using rule 15 (string -> STRING .)


state 53

    (9) asignacion -> tipo VARIABLE IGUAL . expresiones END
    (10) expresiones -> . expresion
    (11) expresiones -> . comparacion
    (12) expresiones -> . BOOLEAN
    (13) expresiones -> . opstring
    (14) expresiones -> . indexacion
    (20) expresion -> . valor
    (21) expresion -> . valor operadorMat expresion
    (22) comparacion -> . expresion operadorComp expresion
    (16) opstring -> . string
    (17) opstring -> . VARIABLE
    (18) opstring -> . string MAS opstring
    (57) indexacion -> . VARIABLE CIZQ valor CDER
    (40) valor -> . ENTERO
    (41) valor -> . VARIABLE
    (15) string -> . STRING

    BOOLEAN         shift and go to state 47
    VARIABLE        shift and go to state 51
    ENTERO          shift and go to state 23
    STRING          shift and go to state 52

    expresiones                    shift and go to state 67
    expresion                      shift and go to state 45
    comparacion                    shift and go to state 46
    opstring                       shift and go to state 48
    indexacion                     shift and go to state 49
    valor                          shift and go to state 13
    string                         shift and go to state 50

state 54

    (21) expresion -> valor operadorMat expresion .

    MAYOR           reduce using rule 21 (expresion -> valor operadorMat expresion .)
    MENOR           reduce using rule 21 (expresion -> valor operadorMat expresion .)
    MAYORIG         reduce using rule 21 (expresion -> valor operadorMat expresion .)
    MENORIG         reduce using rule 21 (expresion -> valor operadorMat expresion .)
    DIGUAL          reduce using rule 21 (expresion -> valor operadorMat expresion .)
    DIF             reduce using rule 21 (expresion -> valor operadorMat expresion .)
    $end            reduce using rule 21 (expresion -> valor operadorMat expresion .)
    PDER            reduce using rule 21 (expresion -> valor operadorMat expresion .)
    LDER            reduce using rule 21 (expresion -> valor operadorMat expresion .)
    END             reduce using rule 21 (expresion -> valor operadorMat expresion .)


state 55

    (42) sentenciaIf -> IF PIZQ comparacion . PDER LIZQ algoritmo LDER varianteIf END

    PDER            shift and go to state 68


state 56

    (22) comparacion -> expresion . operadorComp expresion
    (28) operadorComp -> . MAYOR
    (29) operadorComp -> . MENOR
    (30) operadorComp -> . MAYORIG
    (31) operadorComp -> . MENORIG
    (32) operadorComp -> . DIGUAL
    (33) operadorComp -> . DIF

    MAYOR           shift and go to state 25
    MENOR           shift and go to state 26
    MAYORIG         shift and go to state 27
    MENORIG         shift and go to state 28
    DIGUAL          shift and go to state 29
    DIF             shift and go to state 30

    operadorComp                   shift and go to state 24

state 57

    (47) sentenciaFOR -> FOR PIZQ parametros . PDER LIZQ algoritmo LDER END

    PDER            shift and go to state 69


state 58

    (48) parametros -> inicializacionFor . END comparacion END VARIABLE increDecre

    END             shift and go to state 70


state 59

    (49) parametros -> VARIABLE . IN VARIABLE
    (50) inicializacionFor -> VARIABLE . IGUAL ENTERO

    IN              shift and go to state 71
    IGUAL           shift and go to state 72


state 60

    (51) inicializacionFor -> INT . VARIABLE IGUAL ENTERO

    VARIABLE        shift and go to state 73


state 61

    (52) inicializacionFor -> VAR . VARIABLE IGUAL ENTERO

    VARIABLE        shift and go to state 74


state 62

    (55) sentenciaWhile -> WHILE PIZQ comparacion . PDER LIZQ algoritmo LDER END

    PDER            shift and go to state 75


state 63

    (56) sentenciaWhile -> DO LIZQ algoritmo . LDER WHILE PIZQ comparacion PDER END

    LDER            shift and go to state 76


state 64

    (19) imprimir -> PRINT PIZQ expresiones PDER . END

    END             shift and go to state 77


state 65

    (18) opstring -> string MAS . opstring
    (16) opstring -> . string
    (17) opstring -> . VARIABLE
    (18) opstring -> . string MAS opstring
    (15) string -> . STRING

    VARIABLE        shift and go to state 79
    STRING          shift and go to state 52

    string                         shift and go to state 50
    opstring                       shift and go to state 78

state 66

    (57) indexacion -> VARIABLE CIZQ . valor CDER
    (40) valor -> . ENTERO
    (41) valor -> . VARIABLE

    ENTERO          shift and go to state 23
    VARIABLE        shift and go to state 12

    valor                          shift and go to state 80

state 67

    (9) asignacion -> tipo VARIABLE IGUAL expresiones . END

    END             shift and go to state 81


state 68

    (42) sentenciaIf -> IF PIZQ comparacion PDER . LIZQ algoritmo LDER varianteIf END

    LIZQ            shift and go to state 82


state 69

    (47) sentenciaFOR -> FOR PIZQ parametros PDER . LIZQ algoritmo LDER END

    LIZQ            shift and go to state 83


state 70

    (48) parametros -> inicializacionFor END . comparacion END VARIABLE increDecre
    (22) comparacion -> . expresion operadorComp expresion
    (20) expresion -> . valor
    (21) expresion -> . valor operadorMat expresion
    (40) valor -> . ENTERO
    (41) valor -> . VARIABLE

    ENTERO          shift and go to state 23
    VARIABLE        shift and go to state 12

    comparacion                    shift and go to state 84
    expresion                      shift and go to state 56
    valor                          shift and go to state 13

state 71

    (49) parametros -> VARIABLE IN . VARIABLE

    VARIABLE        shift and go to state 85


state 72

    (50) inicializacionFor -> VARIABLE IGUAL . ENTERO

    ENTERO          shift and go to state 86


state 73

    (51) inicializacionFor -> INT VARIABLE . IGUAL ENTERO

    IGUAL           shift and go to state 87


state 74

    (52) inicializacionFor -> VAR VARIABLE . IGUAL ENTERO

    IGUAL           shift and go to state 88


state 75

    (55) sentenciaWhile -> WHILE PIZQ comparacion PDER . LIZQ algoritmo LDER END

    LIZQ            shift and go to state 89


state 76

    (56) sentenciaWhile -> DO LIZQ algoritmo LDER . WHILE PIZQ comparacion PDER END

    WHILE           shift and go to state 90


state 77

    (19) imprimir -> PRINT PIZQ expresiones PDER END .

    $end            reduce using rule 19 (imprimir -> PRINT PIZQ expresiones PDER END .)
    LDER            reduce using rule 19 (imprimir -> PRINT PIZQ expresiones PDER END .)


state 78

    (18) opstring -> string MAS opstring .

    PDER            reduce using rule 18 (opstring -> string MAS opstring .)
    END             reduce using rule 18 (opstring -> string MAS opstring .)


state 79

    (17) opstring -> VARIABLE .

    PDER            reduce using rule 17 (opstring -> VARIABLE .)
    END             reduce using rule 17 (opstring -> VARIABLE .)


state 80

    (57) indexacion -> VARIABLE CIZQ valor . CDER

    CDER            shift and go to state 91


state 81

    (9) asignacion -> tipo VARIABLE IGUAL expresiones END .

    $end            reduce using rule 9 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    LDER            reduce using rule 9 (asignacion -> tipo VARIABLE IGUAL expresiones END .)


state 82

    (42) sentenciaIf -> IF PIZQ comparacion PDER LIZQ . algoritmo LDER varianteIf END
    (1) algoritmo -> . imprimir
    (2) algoritmo -> . asignacion
    (3) algoritmo -> . expresion
    (4) algoritmo -> . comparacion
    (5) algoritmo -> . sentenciaIf
    (6) algoritmo -> . sentenciaFOR
    (7) algoritmo -> . sentenciaWhile
    (8) algoritmo -> . empty
    (19) imprimir -> . PRINT PIZQ expresiones PDER END
    (9) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (20) expresion -> . valor
    (21) expresion -> . valor operadorMat expresion
    (22) comparacion -> . expresion operadorComp expresion
    (42) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END
    (47) sentenciaFOR -> . FOR PIZQ parametros PDER LIZQ algoritmo LDER END
    (55) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END
    (56) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (58) empty -> .
    (34) tipo -> . VAR
    (35) tipo -> . INT
    (36) tipo -> . BOOL
    (37) tipo -> . DOUBLE
    (38) tipo -> . empty
    (39) tipo -> . VOID
    (40) valor -> . ENTERO
    (41) valor -> . VARIABLE

  ! shift/reduce conflict for VARIABLE resolved as shift
    PRINT           shift and go to state 10
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    DO              shift and go to state 17
    LDER            reduce using rule 58 (empty -> .)
    VAR             shift and go to state 18
    INT             shift and go to state 19
    BOOL            shift and go to state 20
    DOUBLE          shift and go to state 21
    VOID            shift and go to state 22
    ENTERO          shift and go to state 23
    VARIABLE        shift and go to state 12

  ! VARIABLE        [ reduce using rule 58 (empty -> .) ]

    comparacion                    shift and go to state 5
    algoritmo                      shift and go to state 92
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    expresion                      shift and go to state 4
    sentenciaIf                    shift and go to state 6
    sentenciaFOR                   shift and go to state 7
    sentenciaWhile                 shift and go to state 8
    empty                          shift and go to state 9
    tipo                           shift and go to state 11
    valor                          shift and go to state 13

state 83

    (47) sentenciaFOR -> FOR PIZQ parametros PDER LIZQ . algoritmo LDER END
    (1) algoritmo -> . imprimir
    (2) algoritmo -> . asignacion
    (3) algoritmo -> . expresion
    (4) algoritmo -> . comparacion
    (5) algoritmo -> . sentenciaIf
    (6) algoritmo -> . sentenciaFOR
    (7) algoritmo -> . sentenciaWhile
    (8) algoritmo -> . empty
    (19) imprimir -> . PRINT PIZQ expresiones PDER END
    (9) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (20) expresion -> . valor
    (21) expresion -> . valor operadorMat expresion
    (22) comparacion -> . expresion operadorComp expresion
    (42) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END
    (47) sentenciaFOR -> . FOR PIZQ parametros PDER LIZQ algoritmo LDER END
    (55) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END
    (56) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (58) empty -> .
    (34) tipo -> . VAR
    (35) tipo -> . INT
    (36) tipo -> . BOOL
    (37) tipo -> . DOUBLE
    (38) tipo -> . empty
    (39) tipo -> . VOID
    (40) valor -> . ENTERO
    (41) valor -> . VARIABLE

  ! shift/reduce conflict for VARIABLE resolved as shift
    PRINT           shift and go to state 10
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    DO              shift and go to state 17
    LDER            reduce using rule 58 (empty -> .)
    VAR             shift and go to state 18
    INT             shift and go to state 19
    BOOL            shift and go to state 20
    DOUBLE          shift and go to state 21
    VOID            shift and go to state 22
    ENTERO          shift and go to state 23
    VARIABLE        shift and go to state 12

  ! VARIABLE        [ reduce using rule 58 (empty -> .) ]

    algoritmo                      shift and go to state 93
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    expresion                      shift and go to state 4
    comparacion                    shift and go to state 5
    sentenciaIf                    shift and go to state 6
    sentenciaFOR                   shift and go to state 7
    sentenciaWhile                 shift and go to state 8
    empty                          shift and go to state 9
    tipo                           shift and go to state 11
    valor                          shift and go to state 13

state 84

    (48) parametros -> inicializacionFor END comparacion . END VARIABLE increDecre

    END             shift and go to state 94


state 85

    (49) parametros -> VARIABLE IN VARIABLE .

    PDER            reduce using rule 49 (parametros -> VARIABLE IN VARIABLE .)


state 86

    (50) inicializacionFor -> VARIABLE IGUAL ENTERO .

    END             reduce using rule 50 (inicializacionFor -> VARIABLE IGUAL ENTERO .)


state 87

    (51) inicializacionFor -> INT VARIABLE IGUAL . ENTERO

    ENTERO          shift and go to state 95


state 88

    (52) inicializacionFor -> VAR VARIABLE IGUAL . ENTERO

    ENTERO          shift and go to state 96


state 89

    (55) sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ . algoritmo LDER END
    (1) algoritmo -> . imprimir
    (2) algoritmo -> . asignacion
    (3) algoritmo -> . expresion
    (4) algoritmo -> . comparacion
    (5) algoritmo -> . sentenciaIf
    (6) algoritmo -> . sentenciaFOR
    (7) algoritmo -> . sentenciaWhile
    (8) algoritmo -> . empty
    (19) imprimir -> . PRINT PIZQ expresiones PDER END
    (9) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (20) expresion -> . valor
    (21) expresion -> . valor operadorMat expresion
    (22) comparacion -> . expresion operadorComp expresion
    (42) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END
    (47) sentenciaFOR -> . FOR PIZQ parametros PDER LIZQ algoritmo LDER END
    (55) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END
    (56) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (58) empty -> .
    (34) tipo -> . VAR
    (35) tipo -> . INT
    (36) tipo -> . BOOL
    (37) tipo -> . DOUBLE
    (38) tipo -> . empty
    (39) tipo -> . VOID
    (40) valor -> . ENTERO
    (41) valor -> . VARIABLE

  ! shift/reduce conflict for VARIABLE resolved as shift
    PRINT           shift and go to state 10
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    DO              shift and go to state 17
    LDER            reduce using rule 58 (empty -> .)
    VAR             shift and go to state 18
    INT             shift and go to state 19
    BOOL            shift and go to state 20
    DOUBLE          shift and go to state 21
    VOID            shift and go to state 22
    ENTERO          shift and go to state 23
    VARIABLE        shift and go to state 12

  ! VARIABLE        [ reduce using rule 58 (empty -> .) ]

    comparacion                    shift and go to state 5
    algoritmo                      shift and go to state 97
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    expresion                      shift and go to state 4
    sentenciaIf                    shift and go to state 6
    sentenciaFOR                   shift and go to state 7
    sentenciaWhile                 shift and go to state 8
    empty                          shift and go to state 9
    tipo                           shift and go to state 11
    valor                          shift and go to state 13

state 90

    (56) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE . PIZQ comparacion PDER END

    PIZQ            shift and go to state 98


state 91

    (57) indexacion -> VARIABLE CIZQ valor CDER .

    PDER            reduce using rule 57 (indexacion -> VARIABLE CIZQ valor CDER .)
    END             reduce using rule 57 (indexacion -> VARIABLE CIZQ valor CDER .)


state 92

    (42) sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo . LDER varianteIf END

    LDER            shift and go to state 99


state 93

    (47) sentenciaFOR -> FOR PIZQ parametros PDER LIZQ algoritmo . LDER END

    LDER            shift and go to state 100


state 94

    (48) parametros -> inicializacionFor END comparacion END . VARIABLE increDecre

    VARIABLE        shift and go to state 101


state 95

    (51) inicializacionFor -> INT VARIABLE IGUAL ENTERO .

    END             reduce using rule 51 (inicializacionFor -> INT VARIABLE IGUAL ENTERO .)


state 96

    (52) inicializacionFor -> VAR VARIABLE IGUAL ENTERO .

    END             reduce using rule 52 (inicializacionFor -> VAR VARIABLE IGUAL ENTERO .)


state 97

    (55) sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo . LDER END

    LDER            shift and go to state 102


state 98

    (56) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ . comparacion PDER END
    (22) comparacion -> . expresion operadorComp expresion
    (20) expresion -> . valor
    (21) expresion -> . valor operadorMat expresion
    (40) valor -> . ENTERO
    (41) valor -> . VARIABLE

    ENTERO          shift and go to state 23
    VARIABLE        shift and go to state 12

    comparacion                    shift and go to state 103
    expresion                      shift and go to state 56
    valor                          shift and go to state 13

state 99

    (42) sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER . varianteIf END
    (43) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
    (44) varianteIf -> . ELSE LIZQ algoritmo LDER
    (45) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (46) varianteIf -> . empty
    (58) empty -> .

    ELSEIF          shift and go to state 105
    ELSE            shift and go to state 106
    END             reduce using rule 58 (empty -> .)

    varianteIf                     shift and go to state 104
    empty                          shift and go to state 107

state 100

    (47) sentenciaFOR -> FOR PIZQ parametros PDER LIZQ algoritmo LDER . END

    END             shift and go to state 108


state 101

    (48) parametros -> inicializacionFor END comparacion END VARIABLE . increDecre
    (53) increDecre -> . INCREMENTO
    (54) increDecre -> . DECREMENTO

    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111

    increDecre                     shift and go to state 109

state 102

    (55) sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER . END

    END             shift and go to state 112


state 103

    (56) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion . PDER END

    PDER            shift and go to state 113


state 104

    (42) sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf . END

    END             shift and go to state 114


state 105

    (43) varianteIf -> ELSEIF . PIZQ comparacion PDER LIZQ algoritmo LDER
    (45) varianteIf -> ELSEIF . PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf

    PIZQ            shift and go to state 115


state 106

    (44) varianteIf -> ELSE . LIZQ algoritmo LDER

    LIZQ            shift and go to state 116


state 107

    (46) varianteIf -> empty .

    END             reduce using rule 46 (varianteIf -> empty .)


state 108

    (47) sentenciaFOR -> FOR PIZQ parametros PDER LIZQ algoritmo LDER END .

    $end            reduce using rule 47 (sentenciaFOR -> FOR PIZQ parametros PDER LIZQ algoritmo LDER END .)
    LDER            reduce using rule 47 (sentenciaFOR -> FOR PIZQ parametros PDER LIZQ algoritmo LDER END .)


state 109

    (48) parametros -> inicializacionFor END comparacion END VARIABLE increDecre .

    PDER            reduce using rule 48 (parametros -> inicializacionFor END comparacion END VARIABLE increDecre .)


state 110

    (53) increDecre -> INCREMENTO .

    PDER            reduce using rule 53 (increDecre -> INCREMENTO .)


state 111

    (54) increDecre -> DECREMENTO .

    PDER            reduce using rule 54 (increDecre -> DECREMENTO .)


state 112

    (55) sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END .

    $end            reduce using rule 55 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END .)
    LDER            reduce using rule 55 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END .)


state 113

    (56) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER . END

    END             shift and go to state 117


state 114

    (42) sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END .

    $end            reduce using rule 42 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END .)
    LDER            reduce using rule 42 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END .)


state 115

    (43) varianteIf -> ELSEIF PIZQ . comparacion PDER LIZQ algoritmo LDER
    (45) varianteIf -> ELSEIF PIZQ . comparacion PDER LIZQ algoritmo LDER varianteIf
    (22) comparacion -> . expresion operadorComp expresion
    (20) expresion -> . valor
    (21) expresion -> . valor operadorMat expresion
    (40) valor -> . ENTERO
    (41) valor -> . VARIABLE

    ENTERO          shift and go to state 23
    VARIABLE        shift and go to state 12

    comparacion                    shift and go to state 118
    expresion                      shift and go to state 56
    valor                          shift and go to state 13

state 116

    (44) varianteIf -> ELSE LIZQ . algoritmo LDER
    (1) algoritmo -> . imprimir
    (2) algoritmo -> . asignacion
    (3) algoritmo -> . expresion
    (4) algoritmo -> . comparacion
    (5) algoritmo -> . sentenciaIf
    (6) algoritmo -> . sentenciaFOR
    (7) algoritmo -> . sentenciaWhile
    (8) algoritmo -> . empty
    (19) imprimir -> . PRINT PIZQ expresiones PDER END
    (9) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (20) expresion -> . valor
    (21) expresion -> . valor operadorMat expresion
    (22) comparacion -> . expresion operadorComp expresion
    (42) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END
    (47) sentenciaFOR -> . FOR PIZQ parametros PDER LIZQ algoritmo LDER END
    (55) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END
    (56) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (58) empty -> .
    (34) tipo -> . VAR
    (35) tipo -> . INT
    (36) tipo -> . BOOL
    (37) tipo -> . DOUBLE
    (38) tipo -> . empty
    (39) tipo -> . VOID
    (40) valor -> . ENTERO
    (41) valor -> . VARIABLE

  ! shift/reduce conflict for VARIABLE resolved as shift
    PRINT           shift and go to state 10
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    DO              shift and go to state 17
    LDER            reduce using rule 58 (empty -> .)
    VAR             shift and go to state 18
    INT             shift and go to state 19
    BOOL            shift and go to state 20
    DOUBLE          shift and go to state 21
    VOID            shift and go to state 22
    ENTERO          shift and go to state 23
    VARIABLE        shift and go to state 12

  ! VARIABLE        [ reduce using rule 58 (empty -> .) ]

    algoritmo                      shift and go to state 119
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    expresion                      shift and go to state 4
    comparacion                    shift and go to state 5
    sentenciaIf                    shift and go to state 6
    sentenciaFOR                   shift and go to state 7
    sentenciaWhile                 shift and go to state 8
    empty                          shift and go to state 9
    tipo                           shift and go to state 11
    valor                          shift and go to state 13

state 117

    (56) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .

    $end            reduce using rule 56 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    LDER            reduce using rule 56 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)


state 118

    (43) varianteIf -> ELSEIF PIZQ comparacion . PDER LIZQ algoritmo LDER
    (45) varianteIf -> ELSEIF PIZQ comparacion . PDER LIZQ algoritmo LDER varianteIf

    PDER            shift and go to state 120


state 119

    (44) varianteIf -> ELSE LIZQ algoritmo . LDER

    LDER            shift and go to state 121


state 120

    (43) varianteIf -> ELSEIF PIZQ comparacion PDER . LIZQ algoritmo LDER
    (45) varianteIf -> ELSEIF PIZQ comparacion PDER . LIZQ algoritmo LDER varianteIf

    LIZQ            shift and go to state 122


state 121

    (44) varianteIf -> ELSE LIZQ algoritmo LDER .

    END             reduce using rule 44 (varianteIf -> ELSE LIZQ algoritmo LDER .)


state 122

    (43) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ . algoritmo LDER
    (45) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ . algoritmo LDER varianteIf
    (1) algoritmo -> . imprimir
    (2) algoritmo -> . asignacion
    (3) algoritmo -> . expresion
    (4) algoritmo -> . comparacion
    (5) algoritmo -> . sentenciaIf
    (6) algoritmo -> . sentenciaFOR
    (7) algoritmo -> . sentenciaWhile
    (8) algoritmo -> . empty
    (19) imprimir -> . PRINT PIZQ expresiones PDER END
    (9) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (20) expresion -> . valor
    (21) expresion -> . valor operadorMat expresion
    (22) comparacion -> . expresion operadorComp expresion
    (42) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf END
    (47) sentenciaFOR -> . FOR PIZQ parametros PDER LIZQ algoritmo LDER END
    (55) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER END
    (56) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (58) empty -> .
    (34) tipo -> . VAR
    (35) tipo -> . INT
    (36) tipo -> . BOOL
    (37) tipo -> . DOUBLE
    (38) tipo -> . empty
    (39) tipo -> . VOID
    (40) valor -> . ENTERO
    (41) valor -> . VARIABLE

  ! shift/reduce conflict for VARIABLE resolved as shift
    PRINT           shift and go to state 10
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    DO              shift and go to state 17
    LDER            reduce using rule 58 (empty -> .)
    VAR             shift and go to state 18
    INT             shift and go to state 19
    BOOL            shift and go to state 20
    DOUBLE          shift and go to state 21
    VOID            shift and go to state 22
    ENTERO          shift and go to state 23
    VARIABLE        shift and go to state 12

  ! VARIABLE        [ reduce using rule 58 (empty -> .) ]

    comparacion                    shift and go to state 5
    algoritmo                      shift and go to state 123
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    expresion                      shift and go to state 4
    sentenciaIf                    shift and go to state 6
    sentenciaFOR                   shift and go to state 7
    sentenciaWhile                 shift and go to state 8
    empty                          shift and go to state 9
    tipo                           shift and go to state 11
    valor                          shift and go to state 13

state 123

    (43) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo . LDER
    (45) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo . LDER varianteIf

    LDER            shift and go to state 124


state 124

    (43) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .
    (45) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER . varianteIf
    (43) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
    (44) varianteIf -> . ELSE LIZQ algoritmo LDER
    (45) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (46) varianteIf -> . empty
    (58) empty -> .

  ! reduce/reduce conflict for END resolved using rule 43 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    END             reduce using rule 43 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    ELSEIF          shift and go to state 105
    ELSE            shift and go to state 106

  ! END             [ reduce using rule 58 (empty -> .) ]

    varianteIf                     shift and go to state 125
    empty                          shift and go to state 107

state 125

    (45) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .

    END             reduce using rule 45 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARIABLE in state 0 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 42 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 82 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 83 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 89 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 116 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 122 resolved as shift
WARNING: reduce/reduce conflict in state 51 resolved using rule (opstring -> VARIABLE)
WARNING: rejected rule (valor -> VARIABLE) in state 51
WARNING: reduce/reduce conflict in state 124 resolved using rule (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER)
WARNING: rejected rule (empty -> <empty>) in state 124
