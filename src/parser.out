Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BREAK
    CONTINUE
    NEGACION
    OR
    SLICE

Grammar

Rule 0     S' -> codigo
Rule 1     codigo -> algoritmo
Rule 2     codigo -> algoritmo codigo
Rule 3     algoritmo -> imprimir
Rule 4     algoritmo -> asignacion
Rule 5     algoritmo -> expresion END
Rule 6     algoritmo -> comparacion END
Rule 7     algoritmo -> sentenciaIf
Rule 8     algoritmo -> sentenciaFOR
Rule 9     algoritmo -> sentenciaWhile
Rule 10    algoritmo -> input
Rule 11    algoritmo -> funciones
Rule 12    funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER
Rule 13    funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER
Rule 14    asignacion -> tipo VARIABLE IGUAL expresiones END
Rule 15    asignacion -> VARIABLE IGUAL expresiones END
Rule 16    parametros -> tipo VARIABLE
Rule 17    parametros -> tipo VARIABLE COMA parametros
Rule 18    expresiones -> expresion
Rule 19    expresiones -> comparacion
Rule 20    expresiones -> BOOLEAN
Rule 21    expresiones -> opstring
Rule 22    expresiones -> indexacion
Rule 23    expresiones -> lista
Rule 24    expresiones -> conjuntos
Rule 25    expresiones -> first
Rule 26    expresiones -> last
Rule 27    expresiones -> length
Rule 28    expresiones -> remove
Rule 29    expresiones -> add
Rule 30    string -> STRING
Rule 31    opstring -> string
Rule 32    opstring -> VARIABLE
Rule 33    opstring -> string MAS opstring
Rule 34    imprimir -> PRINT PIZQ opstring PDER END
Rule 35    input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END
Rule 36    expresion -> valor
Rule 37    lista -> CIZQ elementos CDER
Rule 38    first -> VARIABLE POINT FIRST PIZQ PDER
Rule 39    last -> VARIABLE POINT LAST PIZQ PDER
Rule 40    length -> VARIABLE POINT LEN PIZQ PDER
Rule 41    add -> VARIABLE POINT ADD PIZQ valor PDER
Rule 42    remove -> VARIABLE POINT REMOVE PIZQ valor PDER
Rule 43    conjuntos -> LIZQ elementos LDER
Rule 44    elementos -> valor
Rule 45    elementos -> valor COMA elementos
Rule 46    expresion -> valor operadorMat expresion
Rule 47    comparacion -> expresion operadorComp expresion
Rule 48    operadorMat -> MAS
Rule 49    operadorMat -> RESTA
Rule 50    operadorMat -> PROD
Rule 51    operadorMat -> DIV
Rule 52    operadorMat -> MOD
Rule 53    operadorComp -> MAYOR
Rule 54    operadorComp -> MENOR
Rule 55    operadorComp -> MAYORIG
Rule 56    operadorComp -> MENORIG
Rule 57    operadorComp -> DIGUAL
Rule 58    operadorComp -> DIF
Rule 59    tipo -> VAR
Rule 60    tipo -> INT
Rule 61    tipo -> BOOL
Rule 62    tipo -> DOUBLE
Rule 63    tipo -> VOID
Rule 64    tipo -> STR
Rule 65    valor -> ENTERO
Rule 66    valor -> VARIABLE
Rule 67    sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
Rule 68    varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
Rule 69    varianteIf -> ELSE LIZQ algoritmo LDER
Rule 70    varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
Rule 71    varianteIf -> empty
Rule 72    sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
Rule 73    parametrosF -> inicializacionFor END comparacion END VARIABLE increDecre
Rule 74    parametrosF -> VARIABLE IN VARIABLE
Rule 75    inicializacionFor -> VARIABLE IGUAL ENTERO
Rule 76    inicializacionFor -> INT VARIABLE IGUAL ENTERO
Rule 77    inicializacionFor -> VAR VARIABLE IGUAL ENTERO
Rule 78    increDecre -> INCREMENTO
Rule 79    increDecre -> DECREMENTO
Rule 80    sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
Rule 81    sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
Rule 82    indexacion -> VARIABLE CIZQ valor CDER
Rule 83    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 41
AND                  : 
BOOL                 : 61
BOOLEAN              : 20
BREAK                : 
CDER                 : 37 82
CIZQ                 : 37 82
COMA                 : 17 45
CONTINUE             : 
DECREMENTO           : 79
DIF                  : 58
DIGUAL               : 57
DIV                  : 51
DO                   : 81
DOUBLE               : 62
ELSE                 : 69
ELSEIF               : 68 70
END                  : 5 6 12 14 15 34 35 73 73 81
ENTERO               : 65 75 76 77
FIRST                : 38
FOR                  : 72
IF                   : 67
IGUAL                : 14 15 35 75 76 77
IN                   : 74
INCREMENTO           : 78
INPUT                : 35
INT                  : 60 76
LAST                 : 39
LDER                 : 12 13 43 67 68 69 70 72 80 81
LEN                  : 40
LIZQ                 : 12 13 43 67 68 69 70 72 80 81
MAS                  : 33 48
MAYOR                : 53
MAYORIG              : 55
MENOR                : 54
MENORIG              : 56
MOD                  : 52
NEGACION             : 
OR                   : 
PDER                 : 12 13 34 35 38 39 40 41 42 67 68 70 72 80 81
PIZQ                 : 12 13 34 35 38 39 40 41 42 67 68 70 72 80 81
POINT                : 38 39 40 41 42
PRINT                : 34
PROD                 : 50
REMOVE               : 42
RESTA                : 49
RETURN               : 12
SLICE                : 
STR                  : 64
STRING               : 30
VAR                  : 59 77
VARIABLE             : 12 13 14 15 16 17 32 35 38 39 40 41 42 66 73 74 74 75 76 77 82
VOID                 : 13 63
WHILE                : 80 81
error                : 

Nonterminals, with rules where they appear

add                  : 29
algoritmo            : 1 2 12 13 67 68 69 70 72 80 81
asignacion           : 4
codigo               : 2 0
comparacion          : 6 19 67 68 70 73 80 81
conjuntos            : 24
elementos            : 37 43 45
empty                : 71
expresion            : 5 18 46 47 47
expresiones          : 14 15
first                : 25
funciones            : 11
imprimir             : 3
increDecre           : 73
indexacion           : 22
inicializacionFor    : 73
input                : 10
last                 : 26
length               : 27
lista                : 23
operadorComp         : 47
operadorMat          : 46
opstring             : 21 33 34
parametros           : 12 13 17
parametrosF          : 72
remove               : 28
sentenciaFOR         : 8
sentenciaIf          : 7
sentenciaWhile       : 9
string               : 31 33
tipo                 : 12 14 16 17 35
valor                : 12 36 41 42 44 45 46 82
varianteIf           : 67 70

Parsing method: LALR

state 0

    (0) S' -> . codigo
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (34) imprimir -> . PRINT PIZQ opstring PDER END
    (14) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (15) asignacion -> . VARIABLE IGUAL expresiones END
    (36) expresion -> . valor
    (46) expresion -> . valor operadorMat expresion
    (47) comparacion -> . expresion operadorComp expresion
    (67) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (72) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (80) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (81) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (35) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER
    (13) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER
    (59) tipo -> . VAR
    (60) tipo -> . INT
    (61) tipo -> . BOOL
    (62) tipo -> . DOUBLE
    (63) tipo -> . VOID
    (64) tipo -> . STR
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    PRINT           shift and go to state 12
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    VOID            shift and go to state 20
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    STR             shift and go to state 25
    ENTERO          shift and go to state 26

    codigo                         shift and go to state 1
    algoritmo                      shift and go to state 2
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    tipo                           shift and go to state 13
    valor                          shift and go to state 15

state 1

    (0) S' -> codigo .



state 2

    (1) codigo -> algoritmo .
    (2) codigo -> algoritmo . codigo
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (34) imprimir -> . PRINT PIZQ opstring PDER END
    (14) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (15) asignacion -> . VARIABLE IGUAL expresiones END
    (36) expresion -> . valor
    (46) expresion -> . valor operadorMat expresion
    (47) comparacion -> . expresion operadorComp expresion
    (67) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (72) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (80) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (81) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (35) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER
    (13) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER
    (59) tipo -> . VAR
    (60) tipo -> . INT
    (61) tipo -> . BOOL
    (62) tipo -> . DOUBLE
    (63) tipo -> . VOID
    (64) tipo -> . STR
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    $end            reduce using rule 1 (codigo -> algoritmo .)
    PRINT           shift and go to state 12
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    VOID            shift and go to state 20
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    STR             shift and go to state 25
    ENTERO          shift and go to state 26

    algoritmo                      shift and go to state 2
    codigo                         shift and go to state 27
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    tipo                           shift and go to state 13
    valor                          shift and go to state 15

state 3

    (3) algoritmo -> imprimir .

    PRINT           reduce using rule 3 (algoritmo -> imprimir .)
    VARIABLE        reduce using rule 3 (algoritmo -> imprimir .)
    IF              reduce using rule 3 (algoritmo -> imprimir .)
    FOR             reduce using rule 3 (algoritmo -> imprimir .)
    WHILE           reduce using rule 3 (algoritmo -> imprimir .)
    DO              reduce using rule 3 (algoritmo -> imprimir .)
    VOID            reduce using rule 3 (algoritmo -> imprimir .)
    VAR             reduce using rule 3 (algoritmo -> imprimir .)
    INT             reduce using rule 3 (algoritmo -> imprimir .)
    BOOL            reduce using rule 3 (algoritmo -> imprimir .)
    DOUBLE          reduce using rule 3 (algoritmo -> imprimir .)
    STR             reduce using rule 3 (algoritmo -> imprimir .)
    ENTERO          reduce using rule 3 (algoritmo -> imprimir .)
    $end            reduce using rule 3 (algoritmo -> imprimir .)
    LDER            reduce using rule 3 (algoritmo -> imprimir .)
    RETURN          reduce using rule 3 (algoritmo -> imprimir .)


state 4

    (4) algoritmo -> asignacion .

    PRINT           reduce using rule 4 (algoritmo -> asignacion .)
    VARIABLE        reduce using rule 4 (algoritmo -> asignacion .)
    IF              reduce using rule 4 (algoritmo -> asignacion .)
    FOR             reduce using rule 4 (algoritmo -> asignacion .)
    WHILE           reduce using rule 4 (algoritmo -> asignacion .)
    DO              reduce using rule 4 (algoritmo -> asignacion .)
    VOID            reduce using rule 4 (algoritmo -> asignacion .)
    VAR             reduce using rule 4 (algoritmo -> asignacion .)
    INT             reduce using rule 4 (algoritmo -> asignacion .)
    BOOL            reduce using rule 4 (algoritmo -> asignacion .)
    DOUBLE          reduce using rule 4 (algoritmo -> asignacion .)
    STR             reduce using rule 4 (algoritmo -> asignacion .)
    ENTERO          reduce using rule 4 (algoritmo -> asignacion .)
    $end            reduce using rule 4 (algoritmo -> asignacion .)
    LDER            reduce using rule 4 (algoritmo -> asignacion .)
    RETURN          reduce using rule 4 (algoritmo -> asignacion .)


state 5

    (5) algoritmo -> expresion . END
    (47) comparacion -> expresion . operadorComp expresion
    (53) operadorComp -> . MAYOR
    (54) operadorComp -> . MENOR
    (55) operadorComp -> . MAYORIG
    (56) operadorComp -> . MENORIG
    (57) operadorComp -> . DIGUAL
    (58) operadorComp -> . DIF

    END             shift and go to state 28
    MAYOR           shift and go to state 30
    MENOR           shift and go to state 31
    MAYORIG         shift and go to state 32
    MENORIG         shift and go to state 33
    DIGUAL          shift and go to state 34
    DIF             shift and go to state 35

    operadorComp                   shift and go to state 29

state 6

    (6) algoritmo -> comparacion . END

    END             shift and go to state 36


state 7

    (7) algoritmo -> sentenciaIf .

    PRINT           reduce using rule 7 (algoritmo -> sentenciaIf .)
    VARIABLE        reduce using rule 7 (algoritmo -> sentenciaIf .)
    IF              reduce using rule 7 (algoritmo -> sentenciaIf .)
    FOR             reduce using rule 7 (algoritmo -> sentenciaIf .)
    WHILE           reduce using rule 7 (algoritmo -> sentenciaIf .)
    DO              reduce using rule 7 (algoritmo -> sentenciaIf .)
    VOID            reduce using rule 7 (algoritmo -> sentenciaIf .)
    VAR             reduce using rule 7 (algoritmo -> sentenciaIf .)
    INT             reduce using rule 7 (algoritmo -> sentenciaIf .)
    BOOL            reduce using rule 7 (algoritmo -> sentenciaIf .)
    DOUBLE          reduce using rule 7 (algoritmo -> sentenciaIf .)
    STR             reduce using rule 7 (algoritmo -> sentenciaIf .)
    ENTERO          reduce using rule 7 (algoritmo -> sentenciaIf .)
    $end            reduce using rule 7 (algoritmo -> sentenciaIf .)
    LDER            reduce using rule 7 (algoritmo -> sentenciaIf .)
    RETURN          reduce using rule 7 (algoritmo -> sentenciaIf .)


state 8

    (8) algoritmo -> sentenciaFOR .

    PRINT           reduce using rule 8 (algoritmo -> sentenciaFOR .)
    VARIABLE        reduce using rule 8 (algoritmo -> sentenciaFOR .)
    IF              reduce using rule 8 (algoritmo -> sentenciaFOR .)
    FOR             reduce using rule 8 (algoritmo -> sentenciaFOR .)
    WHILE           reduce using rule 8 (algoritmo -> sentenciaFOR .)
    DO              reduce using rule 8 (algoritmo -> sentenciaFOR .)
    VOID            reduce using rule 8 (algoritmo -> sentenciaFOR .)
    VAR             reduce using rule 8 (algoritmo -> sentenciaFOR .)
    INT             reduce using rule 8 (algoritmo -> sentenciaFOR .)
    BOOL            reduce using rule 8 (algoritmo -> sentenciaFOR .)
    DOUBLE          reduce using rule 8 (algoritmo -> sentenciaFOR .)
    STR             reduce using rule 8 (algoritmo -> sentenciaFOR .)
    ENTERO          reduce using rule 8 (algoritmo -> sentenciaFOR .)
    $end            reduce using rule 8 (algoritmo -> sentenciaFOR .)
    LDER            reduce using rule 8 (algoritmo -> sentenciaFOR .)
    RETURN          reduce using rule 8 (algoritmo -> sentenciaFOR .)


state 9

    (9) algoritmo -> sentenciaWhile .

    PRINT           reduce using rule 9 (algoritmo -> sentenciaWhile .)
    VARIABLE        reduce using rule 9 (algoritmo -> sentenciaWhile .)
    IF              reduce using rule 9 (algoritmo -> sentenciaWhile .)
    FOR             reduce using rule 9 (algoritmo -> sentenciaWhile .)
    WHILE           reduce using rule 9 (algoritmo -> sentenciaWhile .)
    DO              reduce using rule 9 (algoritmo -> sentenciaWhile .)
    VOID            reduce using rule 9 (algoritmo -> sentenciaWhile .)
    VAR             reduce using rule 9 (algoritmo -> sentenciaWhile .)
    INT             reduce using rule 9 (algoritmo -> sentenciaWhile .)
    BOOL            reduce using rule 9 (algoritmo -> sentenciaWhile .)
    DOUBLE          reduce using rule 9 (algoritmo -> sentenciaWhile .)
    STR             reduce using rule 9 (algoritmo -> sentenciaWhile .)
    ENTERO          reduce using rule 9 (algoritmo -> sentenciaWhile .)
    $end            reduce using rule 9 (algoritmo -> sentenciaWhile .)
    LDER            reduce using rule 9 (algoritmo -> sentenciaWhile .)
    RETURN          reduce using rule 9 (algoritmo -> sentenciaWhile .)


state 10

    (10) algoritmo -> input .

    PRINT           reduce using rule 10 (algoritmo -> input .)
    VARIABLE        reduce using rule 10 (algoritmo -> input .)
    IF              reduce using rule 10 (algoritmo -> input .)
    FOR             reduce using rule 10 (algoritmo -> input .)
    WHILE           reduce using rule 10 (algoritmo -> input .)
    DO              reduce using rule 10 (algoritmo -> input .)
    VOID            reduce using rule 10 (algoritmo -> input .)
    VAR             reduce using rule 10 (algoritmo -> input .)
    INT             reduce using rule 10 (algoritmo -> input .)
    BOOL            reduce using rule 10 (algoritmo -> input .)
    DOUBLE          reduce using rule 10 (algoritmo -> input .)
    STR             reduce using rule 10 (algoritmo -> input .)
    ENTERO          reduce using rule 10 (algoritmo -> input .)
    $end            reduce using rule 10 (algoritmo -> input .)
    LDER            reduce using rule 10 (algoritmo -> input .)
    RETURN          reduce using rule 10 (algoritmo -> input .)


state 11

    (11) algoritmo -> funciones .

    PRINT           reduce using rule 11 (algoritmo -> funciones .)
    VARIABLE        reduce using rule 11 (algoritmo -> funciones .)
    IF              reduce using rule 11 (algoritmo -> funciones .)
    FOR             reduce using rule 11 (algoritmo -> funciones .)
    WHILE           reduce using rule 11 (algoritmo -> funciones .)
    DO              reduce using rule 11 (algoritmo -> funciones .)
    VOID            reduce using rule 11 (algoritmo -> funciones .)
    VAR             reduce using rule 11 (algoritmo -> funciones .)
    INT             reduce using rule 11 (algoritmo -> funciones .)
    BOOL            reduce using rule 11 (algoritmo -> funciones .)
    DOUBLE          reduce using rule 11 (algoritmo -> funciones .)
    STR             reduce using rule 11 (algoritmo -> funciones .)
    ENTERO          reduce using rule 11 (algoritmo -> funciones .)
    $end            reduce using rule 11 (algoritmo -> funciones .)
    LDER            reduce using rule 11 (algoritmo -> funciones .)
    RETURN          reduce using rule 11 (algoritmo -> funciones .)


state 12

    (34) imprimir -> PRINT . PIZQ opstring PDER END

    PIZQ            shift and go to state 37


state 13

    (14) asignacion -> tipo . VARIABLE IGUAL expresiones END
    (35) input -> tipo . VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> tipo . VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER

    VARIABLE        shift and go to state 38


state 14

    (15) asignacion -> VARIABLE . IGUAL expresiones END
    (66) valor -> VARIABLE .

    IGUAL           shift and go to state 39
    MAS             reduce using rule 66 (valor -> VARIABLE .)
    RESTA           reduce using rule 66 (valor -> VARIABLE .)
    PROD            reduce using rule 66 (valor -> VARIABLE .)
    DIV             reduce using rule 66 (valor -> VARIABLE .)
    MOD             reduce using rule 66 (valor -> VARIABLE .)
    END             reduce using rule 66 (valor -> VARIABLE .)
    MAYOR           reduce using rule 66 (valor -> VARIABLE .)
    MENOR           reduce using rule 66 (valor -> VARIABLE .)
    MAYORIG         reduce using rule 66 (valor -> VARIABLE .)
    MENORIG         reduce using rule 66 (valor -> VARIABLE .)
    DIGUAL          reduce using rule 66 (valor -> VARIABLE .)
    DIF             reduce using rule 66 (valor -> VARIABLE .)


state 15

    (36) expresion -> valor .
    (46) expresion -> valor . operadorMat expresion
    (48) operadorMat -> . MAS
    (49) operadorMat -> . RESTA
    (50) operadorMat -> . PROD
    (51) operadorMat -> . DIV
    (52) operadorMat -> . MOD

    END             reduce using rule 36 (expresion -> valor .)
    MAYOR           reduce using rule 36 (expresion -> valor .)
    MENOR           reduce using rule 36 (expresion -> valor .)
    MAYORIG         reduce using rule 36 (expresion -> valor .)
    MENORIG         reduce using rule 36 (expresion -> valor .)
    DIGUAL          reduce using rule 36 (expresion -> valor .)
    DIF             reduce using rule 36 (expresion -> valor .)
    PDER            reduce using rule 36 (expresion -> valor .)
    MAS             shift and go to state 41
    RESTA           shift and go to state 42
    PROD            shift and go to state 43
    DIV             shift and go to state 44
    MOD             shift and go to state 45

    operadorMat                    shift and go to state 40

state 16

    (67) sentenciaIf -> IF . PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf

    PIZQ            shift and go to state 46


state 17

    (72) sentenciaFOR -> FOR . PIZQ parametrosF PDER LIZQ algoritmo LDER

    PIZQ            shift and go to state 47


state 18

    (80) sentenciaWhile -> WHILE . PIZQ comparacion PDER LIZQ algoritmo LDER

    PIZQ            shift and go to state 48


state 19

    (81) sentenciaWhile -> DO . LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END

    LIZQ            shift and go to state 49


state 20

    (13) funciones -> VOID . VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER
    (63) tipo -> VOID .

  ! shift/reduce conflict for VARIABLE resolved as shift
    VARIABLE        shift and go to state 50

  ! VARIABLE        [ reduce using rule 63 (tipo -> VOID .) ]


state 21

    (59) tipo -> VAR .

    VARIABLE        reduce using rule 59 (tipo -> VAR .)


state 22

    (60) tipo -> INT .

    VARIABLE        reduce using rule 60 (tipo -> INT .)


state 23

    (61) tipo -> BOOL .

    VARIABLE        reduce using rule 61 (tipo -> BOOL .)


state 24

    (62) tipo -> DOUBLE .

    VARIABLE        reduce using rule 62 (tipo -> DOUBLE .)


state 25

    (64) tipo -> STR .

    VARIABLE        reduce using rule 64 (tipo -> STR .)


state 26

    (65) valor -> ENTERO .

    MAS             reduce using rule 65 (valor -> ENTERO .)
    RESTA           reduce using rule 65 (valor -> ENTERO .)
    PROD            reduce using rule 65 (valor -> ENTERO .)
    DIV             reduce using rule 65 (valor -> ENTERO .)
    MOD             reduce using rule 65 (valor -> ENTERO .)
    END             reduce using rule 65 (valor -> ENTERO .)
    MAYOR           reduce using rule 65 (valor -> ENTERO .)
    MENOR           reduce using rule 65 (valor -> ENTERO .)
    MAYORIG         reduce using rule 65 (valor -> ENTERO .)
    MENORIG         reduce using rule 65 (valor -> ENTERO .)
    DIGUAL          reduce using rule 65 (valor -> ENTERO .)
    DIF             reduce using rule 65 (valor -> ENTERO .)
    PDER            reduce using rule 65 (valor -> ENTERO .)
    COMA            reduce using rule 65 (valor -> ENTERO .)
    CDER            reduce using rule 65 (valor -> ENTERO .)
    LDER            reduce using rule 65 (valor -> ENTERO .)


state 27

    (2) codigo -> algoritmo codigo .

    $end            reduce using rule 2 (codigo -> algoritmo codigo .)


state 28

    (5) algoritmo -> expresion END .

    PRINT           reduce using rule 5 (algoritmo -> expresion END .)
    VARIABLE        reduce using rule 5 (algoritmo -> expresion END .)
    IF              reduce using rule 5 (algoritmo -> expresion END .)
    FOR             reduce using rule 5 (algoritmo -> expresion END .)
    WHILE           reduce using rule 5 (algoritmo -> expresion END .)
    DO              reduce using rule 5 (algoritmo -> expresion END .)
    VOID            reduce using rule 5 (algoritmo -> expresion END .)
    VAR             reduce using rule 5 (algoritmo -> expresion END .)
    INT             reduce using rule 5 (algoritmo -> expresion END .)
    BOOL            reduce using rule 5 (algoritmo -> expresion END .)
    DOUBLE          reduce using rule 5 (algoritmo -> expresion END .)
    STR             reduce using rule 5 (algoritmo -> expresion END .)
    ENTERO          reduce using rule 5 (algoritmo -> expresion END .)
    $end            reduce using rule 5 (algoritmo -> expresion END .)
    LDER            reduce using rule 5 (algoritmo -> expresion END .)
    RETURN          reduce using rule 5 (algoritmo -> expresion END .)


state 29

    (47) comparacion -> expresion operadorComp . expresion
    (36) expresion -> . valor
    (46) expresion -> . valor operadorMat expresion
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    expresion                      shift and go to state 51
    valor                          shift and go to state 15

state 30

    (53) operadorComp -> MAYOR .

    ENTERO          reduce using rule 53 (operadorComp -> MAYOR .)
    VARIABLE        reduce using rule 53 (operadorComp -> MAYOR .)


state 31

    (54) operadorComp -> MENOR .

    ENTERO          reduce using rule 54 (operadorComp -> MENOR .)
    VARIABLE        reduce using rule 54 (operadorComp -> MENOR .)


state 32

    (55) operadorComp -> MAYORIG .

    ENTERO          reduce using rule 55 (operadorComp -> MAYORIG .)
    VARIABLE        reduce using rule 55 (operadorComp -> MAYORIG .)


state 33

    (56) operadorComp -> MENORIG .

    ENTERO          reduce using rule 56 (operadorComp -> MENORIG .)
    VARIABLE        reduce using rule 56 (operadorComp -> MENORIG .)


state 34

    (57) operadorComp -> DIGUAL .

    ENTERO          reduce using rule 57 (operadorComp -> DIGUAL .)
    VARIABLE        reduce using rule 57 (operadorComp -> DIGUAL .)


state 35

    (58) operadorComp -> DIF .

    ENTERO          reduce using rule 58 (operadorComp -> DIF .)
    VARIABLE        reduce using rule 58 (operadorComp -> DIF .)


state 36

    (6) algoritmo -> comparacion END .

    PRINT           reduce using rule 6 (algoritmo -> comparacion END .)
    VARIABLE        reduce using rule 6 (algoritmo -> comparacion END .)
    IF              reduce using rule 6 (algoritmo -> comparacion END .)
    FOR             reduce using rule 6 (algoritmo -> comparacion END .)
    WHILE           reduce using rule 6 (algoritmo -> comparacion END .)
    DO              reduce using rule 6 (algoritmo -> comparacion END .)
    VOID            reduce using rule 6 (algoritmo -> comparacion END .)
    VAR             reduce using rule 6 (algoritmo -> comparacion END .)
    INT             reduce using rule 6 (algoritmo -> comparacion END .)
    BOOL            reduce using rule 6 (algoritmo -> comparacion END .)
    DOUBLE          reduce using rule 6 (algoritmo -> comparacion END .)
    STR             reduce using rule 6 (algoritmo -> comparacion END .)
    ENTERO          reduce using rule 6 (algoritmo -> comparacion END .)
    $end            reduce using rule 6 (algoritmo -> comparacion END .)
    LDER            reduce using rule 6 (algoritmo -> comparacion END .)
    RETURN          reduce using rule 6 (algoritmo -> comparacion END .)


state 37

    (34) imprimir -> PRINT PIZQ . opstring PDER END
    (31) opstring -> . string
    (32) opstring -> . VARIABLE
    (33) opstring -> . string MAS opstring
    (30) string -> . STRING

    VARIABLE        shift and go to state 55
    STRING          shift and go to state 56

    opstring                       shift and go to state 53
    string                         shift and go to state 54

state 38

    (14) asignacion -> tipo VARIABLE . IGUAL expresiones END
    (35) input -> tipo VARIABLE . IGUAL INPUT PIZQ PDER END
    (12) funciones -> tipo VARIABLE . PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER

    IGUAL           shift and go to state 57
    PIZQ            shift and go to state 58


state 39

    (15) asignacion -> VARIABLE IGUAL . expresiones END
    (18) expresiones -> . expresion
    (19) expresiones -> . comparacion
    (20) expresiones -> . BOOLEAN
    (21) expresiones -> . opstring
    (22) expresiones -> . indexacion
    (23) expresiones -> . lista
    (24) expresiones -> . conjuntos
    (25) expresiones -> . first
    (26) expresiones -> . last
    (27) expresiones -> . length
    (28) expresiones -> . remove
    (29) expresiones -> . add
    (36) expresion -> . valor
    (46) expresion -> . valor operadorMat expresion
    (47) comparacion -> . expresion operadorComp expresion
    (31) opstring -> . string
    (32) opstring -> . VARIABLE
    (33) opstring -> . string MAS opstring
    (82) indexacion -> . VARIABLE CIZQ valor CDER
    (37) lista -> . CIZQ elementos CDER
    (43) conjuntos -> . LIZQ elementos LDER
    (38) first -> . VARIABLE POINT FIRST PIZQ PDER
    (39) last -> . VARIABLE POINT LAST PIZQ PDER
    (40) length -> . VARIABLE POINT LEN PIZQ PDER
    (42) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (41) add -> . VARIABLE POINT ADD PIZQ valor PDER
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE
    (30) string -> . STRING

    BOOLEAN         shift and go to state 63
    VARIABLE        shift and go to state 59
    CIZQ            shift and go to state 73
    LIZQ            shift and go to state 74
    ENTERO          shift and go to state 26
    STRING          shift and go to state 56

    expresiones                    shift and go to state 60
    expresion                      shift and go to state 61
    comparacion                    shift and go to state 62
    opstring                       shift and go to state 64
    indexacion                     shift and go to state 65
    lista                          shift and go to state 66
    conjuntos                      shift and go to state 67
    first                          shift and go to state 68
    last                           shift and go to state 69
    length                         shift and go to state 70
    remove                         shift and go to state 71
    add                            shift and go to state 72
    valor                          shift and go to state 15
    string                         shift and go to state 54

state 40

    (46) expresion -> valor operadorMat . expresion
    (36) expresion -> . valor
    (46) expresion -> . valor operadorMat expresion
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    valor                          shift and go to state 15
    expresion                      shift and go to state 75

state 41

    (48) operadorMat -> MAS .

    ENTERO          reduce using rule 48 (operadorMat -> MAS .)
    VARIABLE        reduce using rule 48 (operadorMat -> MAS .)


state 42

    (49) operadorMat -> RESTA .

    ENTERO          reduce using rule 49 (operadorMat -> RESTA .)
    VARIABLE        reduce using rule 49 (operadorMat -> RESTA .)


state 43

    (50) operadorMat -> PROD .

    ENTERO          reduce using rule 50 (operadorMat -> PROD .)
    VARIABLE        reduce using rule 50 (operadorMat -> PROD .)


state 44

    (51) operadorMat -> DIV .

    ENTERO          reduce using rule 51 (operadorMat -> DIV .)
    VARIABLE        reduce using rule 51 (operadorMat -> DIV .)


state 45

    (52) operadorMat -> MOD .

    ENTERO          reduce using rule 52 (operadorMat -> MOD .)
    VARIABLE        reduce using rule 52 (operadorMat -> MOD .)


state 46

    (67) sentenciaIf -> IF PIZQ . comparacion PDER LIZQ algoritmo LDER varianteIf
    (47) comparacion -> . expresion operadorComp expresion
    (36) expresion -> . valor
    (46) expresion -> . valor operadorMat expresion
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    comparacion                    shift and go to state 76
    expresion                      shift and go to state 77
    valor                          shift and go to state 15

state 47

    (72) sentenciaFOR -> FOR PIZQ . parametrosF PDER LIZQ algoritmo LDER
    (73) parametrosF -> . inicializacionFor END comparacion END VARIABLE increDecre
    (74) parametrosF -> . VARIABLE IN VARIABLE
    (75) inicializacionFor -> . VARIABLE IGUAL ENTERO
    (76) inicializacionFor -> . INT VARIABLE IGUAL ENTERO
    (77) inicializacionFor -> . VAR VARIABLE IGUAL ENTERO

    VARIABLE        shift and go to state 80
    INT             shift and go to state 81
    VAR             shift and go to state 82

    parametrosF                    shift and go to state 78
    inicializacionFor              shift and go to state 79

state 48

    (80) sentenciaWhile -> WHILE PIZQ . comparacion PDER LIZQ algoritmo LDER
    (47) comparacion -> . expresion operadorComp expresion
    (36) expresion -> . valor
    (46) expresion -> . valor operadorMat expresion
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    comparacion                    shift and go to state 83
    expresion                      shift and go to state 77
    valor                          shift and go to state 15

state 49

    (81) sentenciaWhile -> DO LIZQ . algoritmo LDER WHILE PIZQ comparacion PDER END
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (34) imprimir -> . PRINT PIZQ opstring PDER END
    (14) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (15) asignacion -> . VARIABLE IGUAL expresiones END
    (36) expresion -> . valor
    (46) expresion -> . valor operadorMat expresion
    (47) comparacion -> . expresion operadorComp expresion
    (67) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (72) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (80) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (81) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (35) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER
    (13) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER
    (59) tipo -> . VAR
    (60) tipo -> . INT
    (61) tipo -> . BOOL
    (62) tipo -> . DOUBLE
    (63) tipo -> . VOID
    (64) tipo -> . STR
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    PRINT           shift and go to state 12
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    VOID            shift and go to state 20
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    STR             shift and go to state 25
    ENTERO          shift and go to state 26

    algoritmo                      shift and go to state 84
    comparacion                    shift and go to state 6
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    tipo                           shift and go to state 13
    valor                          shift and go to state 15

state 50

    (13) funciones -> VOID VARIABLE . PIZQ parametros PDER LIZQ algoritmo LDER

    PIZQ            shift and go to state 85


state 51

    (47) comparacion -> expresion operadorComp expresion .

    END             reduce using rule 47 (comparacion -> expresion operadorComp expresion .)
    PDER            reduce using rule 47 (comparacion -> expresion operadorComp expresion .)


state 52

    (66) valor -> VARIABLE .

    MAS             reduce using rule 66 (valor -> VARIABLE .)
    RESTA           reduce using rule 66 (valor -> VARIABLE .)
    PROD            reduce using rule 66 (valor -> VARIABLE .)
    DIV             reduce using rule 66 (valor -> VARIABLE .)
    MOD             reduce using rule 66 (valor -> VARIABLE .)
    END             reduce using rule 66 (valor -> VARIABLE .)
    PDER            reduce using rule 66 (valor -> VARIABLE .)
    MAYOR           reduce using rule 66 (valor -> VARIABLE .)
    MENOR           reduce using rule 66 (valor -> VARIABLE .)
    MAYORIG         reduce using rule 66 (valor -> VARIABLE .)
    MENORIG         reduce using rule 66 (valor -> VARIABLE .)
    DIGUAL          reduce using rule 66 (valor -> VARIABLE .)
    DIF             reduce using rule 66 (valor -> VARIABLE .)
    COMA            reduce using rule 66 (valor -> VARIABLE .)
    CDER            reduce using rule 66 (valor -> VARIABLE .)
    LDER            reduce using rule 66 (valor -> VARIABLE .)


state 53

    (34) imprimir -> PRINT PIZQ opstring . PDER END

    PDER            shift and go to state 86


state 54

    (31) opstring -> string .
    (33) opstring -> string . MAS opstring

    PDER            reduce using rule 31 (opstring -> string .)
    END             reduce using rule 31 (opstring -> string .)
    MAS             shift and go to state 87


state 55

    (32) opstring -> VARIABLE .

    PDER            reduce using rule 32 (opstring -> VARIABLE .)
    END             reduce using rule 32 (opstring -> VARIABLE .)


state 56

    (30) string -> STRING .

    MAS             reduce using rule 30 (string -> STRING .)
    PDER            reduce using rule 30 (string -> STRING .)
    END             reduce using rule 30 (string -> STRING .)


state 57

    (14) asignacion -> tipo VARIABLE IGUAL . expresiones END
    (35) input -> tipo VARIABLE IGUAL . INPUT PIZQ PDER END
    (18) expresiones -> . expresion
    (19) expresiones -> . comparacion
    (20) expresiones -> . BOOLEAN
    (21) expresiones -> . opstring
    (22) expresiones -> . indexacion
    (23) expresiones -> . lista
    (24) expresiones -> . conjuntos
    (25) expresiones -> . first
    (26) expresiones -> . last
    (27) expresiones -> . length
    (28) expresiones -> . remove
    (29) expresiones -> . add
    (36) expresion -> . valor
    (46) expresion -> . valor operadorMat expresion
    (47) comparacion -> . expresion operadorComp expresion
    (31) opstring -> . string
    (32) opstring -> . VARIABLE
    (33) opstring -> . string MAS opstring
    (82) indexacion -> . VARIABLE CIZQ valor CDER
    (37) lista -> . CIZQ elementos CDER
    (43) conjuntos -> . LIZQ elementos LDER
    (38) first -> . VARIABLE POINT FIRST PIZQ PDER
    (39) last -> . VARIABLE POINT LAST PIZQ PDER
    (40) length -> . VARIABLE POINT LEN PIZQ PDER
    (42) remove -> . VARIABLE POINT REMOVE PIZQ valor PDER
    (41) add -> . VARIABLE POINT ADD PIZQ valor PDER
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE
    (30) string -> . STRING

    INPUT           shift and go to state 89
    BOOLEAN         shift and go to state 63
    VARIABLE        shift and go to state 59
    CIZQ            shift and go to state 73
    LIZQ            shift and go to state 74
    ENTERO          shift and go to state 26
    STRING          shift and go to state 56

    expresiones                    shift and go to state 88
    expresion                      shift and go to state 61
    comparacion                    shift and go to state 62
    opstring                       shift and go to state 64
    indexacion                     shift and go to state 65
    lista                          shift and go to state 66
    conjuntos                      shift and go to state 67
    first                          shift and go to state 68
    last                           shift and go to state 69
    length                         shift and go to state 70
    remove                         shift and go to state 71
    add                            shift and go to state 72
    valor                          shift and go to state 15
    string                         shift and go to state 54

state 58

    (12) funciones -> tipo VARIABLE PIZQ . parametros PDER LIZQ algoritmo RETURN valor END LDER
    (16) parametros -> . tipo VARIABLE
    (17) parametros -> . tipo VARIABLE COMA parametros
    (59) tipo -> . VAR
    (60) tipo -> . INT
    (61) tipo -> . BOOL
    (62) tipo -> . DOUBLE
    (63) tipo -> . VOID
    (64) tipo -> . STR

    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    VOID            shift and go to state 92
    STR             shift and go to state 25

    tipo                           shift and go to state 90
    parametros                     shift and go to state 91

state 59

    (32) opstring -> VARIABLE .
    (82) indexacion -> VARIABLE . CIZQ valor CDER
    (38) first -> VARIABLE . POINT FIRST PIZQ PDER
    (39) last -> VARIABLE . POINT LAST PIZQ PDER
    (40) length -> VARIABLE . POINT LEN PIZQ PDER
    (42) remove -> VARIABLE . POINT REMOVE PIZQ valor PDER
    (41) add -> VARIABLE . POINT ADD PIZQ valor PDER
    (66) valor -> VARIABLE .

  ! reduce/reduce conflict for END resolved using rule 32 (opstring -> VARIABLE .)
    END             reduce using rule 32 (opstring -> VARIABLE .)
    CIZQ            shift and go to state 93
    POINT           shift and go to state 94
    MAS             reduce using rule 66 (valor -> VARIABLE .)
    RESTA           reduce using rule 66 (valor -> VARIABLE .)
    PROD            reduce using rule 66 (valor -> VARIABLE .)
    DIV             reduce using rule 66 (valor -> VARIABLE .)
    MOD             reduce using rule 66 (valor -> VARIABLE .)
    MAYOR           reduce using rule 66 (valor -> VARIABLE .)
    MENOR           reduce using rule 66 (valor -> VARIABLE .)
    MAYORIG         reduce using rule 66 (valor -> VARIABLE .)
    MENORIG         reduce using rule 66 (valor -> VARIABLE .)
    DIGUAL          reduce using rule 66 (valor -> VARIABLE .)
    DIF             reduce using rule 66 (valor -> VARIABLE .)

  ! END             [ reduce using rule 66 (valor -> VARIABLE .) ]


state 60

    (15) asignacion -> VARIABLE IGUAL expresiones . END

    END             shift and go to state 95


state 61

    (18) expresiones -> expresion .
    (47) comparacion -> expresion . operadorComp expresion
    (53) operadorComp -> . MAYOR
    (54) operadorComp -> . MENOR
    (55) operadorComp -> . MAYORIG
    (56) operadorComp -> . MENORIG
    (57) operadorComp -> . DIGUAL
    (58) operadorComp -> . DIF

    END             reduce using rule 18 (expresiones -> expresion .)
    MAYOR           shift and go to state 30
    MENOR           shift and go to state 31
    MAYORIG         shift and go to state 32
    MENORIG         shift and go to state 33
    DIGUAL          shift and go to state 34
    DIF             shift and go to state 35

    operadorComp                   shift and go to state 29

state 62

    (19) expresiones -> comparacion .

    END             reduce using rule 19 (expresiones -> comparacion .)


state 63

    (20) expresiones -> BOOLEAN .

    END             reduce using rule 20 (expresiones -> BOOLEAN .)


state 64

    (21) expresiones -> opstring .

    END             reduce using rule 21 (expresiones -> opstring .)


state 65

    (22) expresiones -> indexacion .

    END             reduce using rule 22 (expresiones -> indexacion .)


state 66

    (23) expresiones -> lista .

    END             reduce using rule 23 (expresiones -> lista .)


state 67

    (24) expresiones -> conjuntos .

    END             reduce using rule 24 (expresiones -> conjuntos .)


state 68

    (25) expresiones -> first .

    END             reduce using rule 25 (expresiones -> first .)


state 69

    (26) expresiones -> last .

    END             reduce using rule 26 (expresiones -> last .)


state 70

    (27) expresiones -> length .

    END             reduce using rule 27 (expresiones -> length .)


state 71

    (28) expresiones -> remove .

    END             reduce using rule 28 (expresiones -> remove .)


state 72

    (29) expresiones -> add .

    END             reduce using rule 29 (expresiones -> add .)


state 73

    (37) lista -> CIZQ . elementos CDER
    (44) elementos -> . valor
    (45) elementos -> . valor COMA elementos
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    elementos                      shift and go to state 96
    valor                          shift and go to state 97

state 74

    (43) conjuntos -> LIZQ . elementos LDER
    (44) elementos -> . valor
    (45) elementos -> . valor COMA elementos
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    elementos                      shift and go to state 98
    valor                          shift and go to state 97

state 75

    (46) expresion -> valor operadorMat expresion .

    END             reduce using rule 46 (expresion -> valor operadorMat expresion .)
    MAYOR           reduce using rule 46 (expresion -> valor operadorMat expresion .)
    MENOR           reduce using rule 46 (expresion -> valor operadorMat expresion .)
    MAYORIG         reduce using rule 46 (expresion -> valor operadorMat expresion .)
    MENORIG         reduce using rule 46 (expresion -> valor operadorMat expresion .)
    DIGUAL          reduce using rule 46 (expresion -> valor operadorMat expresion .)
    DIF             reduce using rule 46 (expresion -> valor operadorMat expresion .)
    PDER            reduce using rule 46 (expresion -> valor operadorMat expresion .)


state 76

    (67) sentenciaIf -> IF PIZQ comparacion . PDER LIZQ algoritmo LDER varianteIf

    PDER            shift and go to state 99


state 77

    (47) comparacion -> expresion . operadorComp expresion
    (53) operadorComp -> . MAYOR
    (54) operadorComp -> . MENOR
    (55) operadorComp -> . MAYORIG
    (56) operadorComp -> . MENORIG
    (57) operadorComp -> . DIGUAL
    (58) operadorComp -> . DIF

    MAYOR           shift and go to state 30
    MENOR           shift and go to state 31
    MAYORIG         shift and go to state 32
    MENORIG         shift and go to state 33
    DIGUAL          shift and go to state 34
    DIF             shift and go to state 35

    operadorComp                   shift and go to state 29

state 78

    (72) sentenciaFOR -> FOR PIZQ parametrosF . PDER LIZQ algoritmo LDER

    PDER            shift and go to state 100


state 79

    (73) parametrosF -> inicializacionFor . END comparacion END VARIABLE increDecre

    END             shift and go to state 101


state 80

    (74) parametrosF -> VARIABLE . IN VARIABLE
    (75) inicializacionFor -> VARIABLE . IGUAL ENTERO

    IN              shift and go to state 102
    IGUAL           shift and go to state 103


state 81

    (76) inicializacionFor -> INT . VARIABLE IGUAL ENTERO

    VARIABLE        shift and go to state 104


state 82

    (77) inicializacionFor -> VAR . VARIABLE IGUAL ENTERO

    VARIABLE        shift and go to state 105


state 83

    (80) sentenciaWhile -> WHILE PIZQ comparacion . PDER LIZQ algoritmo LDER

    PDER            shift and go to state 106


state 84

    (81) sentenciaWhile -> DO LIZQ algoritmo . LDER WHILE PIZQ comparacion PDER END

    LDER            shift and go to state 107


state 85

    (13) funciones -> VOID VARIABLE PIZQ . parametros PDER LIZQ algoritmo LDER
    (16) parametros -> . tipo VARIABLE
    (17) parametros -> . tipo VARIABLE COMA parametros
    (59) tipo -> . VAR
    (60) tipo -> . INT
    (61) tipo -> . BOOL
    (62) tipo -> . DOUBLE
    (63) tipo -> . VOID
    (64) tipo -> . STR

    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    VOID            shift and go to state 92
    STR             shift and go to state 25

    parametros                     shift and go to state 108
    tipo                           shift and go to state 90

state 86

    (34) imprimir -> PRINT PIZQ opstring PDER . END

    END             shift and go to state 109


state 87

    (33) opstring -> string MAS . opstring
    (31) opstring -> . string
    (32) opstring -> . VARIABLE
    (33) opstring -> . string MAS opstring
    (30) string -> . STRING

    VARIABLE        shift and go to state 55
    STRING          shift and go to state 56

    string                         shift and go to state 54
    opstring                       shift and go to state 110

state 88

    (14) asignacion -> tipo VARIABLE IGUAL expresiones . END

    END             shift and go to state 111


state 89

    (35) input -> tipo VARIABLE IGUAL INPUT . PIZQ PDER END

    PIZQ            shift and go to state 112


state 90

    (16) parametros -> tipo . VARIABLE
    (17) parametros -> tipo . VARIABLE COMA parametros

    VARIABLE        shift and go to state 113


state 91

    (12) funciones -> tipo VARIABLE PIZQ parametros . PDER LIZQ algoritmo RETURN valor END LDER

    PDER            shift and go to state 114


state 92

    (63) tipo -> VOID .

    VARIABLE        reduce using rule 63 (tipo -> VOID .)


state 93

    (82) indexacion -> VARIABLE CIZQ . valor CDER
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    valor                          shift and go to state 115

state 94

    (38) first -> VARIABLE POINT . FIRST PIZQ PDER
    (39) last -> VARIABLE POINT . LAST PIZQ PDER
    (40) length -> VARIABLE POINT . LEN PIZQ PDER
    (42) remove -> VARIABLE POINT . REMOVE PIZQ valor PDER
    (41) add -> VARIABLE POINT . ADD PIZQ valor PDER

    FIRST           shift and go to state 116
    LAST            shift and go to state 117
    LEN             shift and go to state 118
    REMOVE          shift and go to state 119
    ADD             shift and go to state 120


state 95

    (15) asignacion -> VARIABLE IGUAL expresiones END .

    PRINT           reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    VARIABLE        reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    IF              reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    FOR             reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    WHILE           reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    DO              reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    VOID            reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    VAR             reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    INT             reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    BOOL            reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    DOUBLE          reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    STR             reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    ENTERO          reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    $end            reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    LDER            reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)
    RETURN          reduce using rule 15 (asignacion -> VARIABLE IGUAL expresiones END .)


state 96

    (37) lista -> CIZQ elementos . CDER

    CDER            shift and go to state 121


state 97

    (44) elementos -> valor .
    (45) elementos -> valor . COMA elementos

    CDER            reduce using rule 44 (elementos -> valor .)
    LDER            reduce using rule 44 (elementos -> valor .)
    COMA            shift and go to state 122


state 98

    (43) conjuntos -> LIZQ elementos . LDER

    LDER            shift and go to state 123


state 99

    (67) sentenciaIf -> IF PIZQ comparacion PDER . LIZQ algoritmo LDER varianteIf

    LIZQ            shift and go to state 124


state 100

    (72) sentenciaFOR -> FOR PIZQ parametrosF PDER . LIZQ algoritmo LDER

    LIZQ            shift and go to state 125


state 101

    (73) parametrosF -> inicializacionFor END . comparacion END VARIABLE increDecre
    (47) comparacion -> . expresion operadorComp expresion
    (36) expresion -> . valor
    (46) expresion -> . valor operadorMat expresion
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    comparacion                    shift and go to state 126
    expresion                      shift and go to state 77
    valor                          shift and go to state 15

state 102

    (74) parametrosF -> VARIABLE IN . VARIABLE

    VARIABLE        shift and go to state 127


state 103

    (75) inicializacionFor -> VARIABLE IGUAL . ENTERO

    ENTERO          shift and go to state 128


state 104

    (76) inicializacionFor -> INT VARIABLE . IGUAL ENTERO

    IGUAL           shift and go to state 129


state 105

    (77) inicializacionFor -> VAR VARIABLE . IGUAL ENTERO

    IGUAL           shift and go to state 130


state 106

    (80) sentenciaWhile -> WHILE PIZQ comparacion PDER . LIZQ algoritmo LDER

    LIZQ            shift and go to state 131


state 107

    (81) sentenciaWhile -> DO LIZQ algoritmo LDER . WHILE PIZQ comparacion PDER END

    WHILE           shift and go to state 132


state 108

    (13) funciones -> VOID VARIABLE PIZQ parametros . PDER LIZQ algoritmo LDER

    PDER            shift and go to state 133


state 109

    (34) imprimir -> PRINT PIZQ opstring PDER END .

    PRINT           reduce using rule 34 (imprimir -> PRINT PIZQ opstring PDER END .)
    VARIABLE        reduce using rule 34 (imprimir -> PRINT PIZQ opstring PDER END .)
    IF              reduce using rule 34 (imprimir -> PRINT PIZQ opstring PDER END .)
    FOR             reduce using rule 34 (imprimir -> PRINT PIZQ opstring PDER END .)
    WHILE           reduce using rule 34 (imprimir -> PRINT PIZQ opstring PDER END .)
    DO              reduce using rule 34 (imprimir -> PRINT PIZQ opstring PDER END .)
    VOID            reduce using rule 34 (imprimir -> PRINT PIZQ opstring PDER END .)
    VAR             reduce using rule 34 (imprimir -> PRINT PIZQ opstring PDER END .)
    INT             reduce using rule 34 (imprimir -> PRINT PIZQ opstring PDER END .)
    BOOL            reduce using rule 34 (imprimir -> PRINT PIZQ opstring PDER END .)
    DOUBLE          reduce using rule 34 (imprimir -> PRINT PIZQ opstring PDER END .)
    STR             reduce using rule 34 (imprimir -> PRINT PIZQ opstring PDER END .)
    ENTERO          reduce using rule 34 (imprimir -> PRINT PIZQ opstring PDER END .)
    $end            reduce using rule 34 (imprimir -> PRINT PIZQ opstring PDER END .)
    LDER            reduce using rule 34 (imprimir -> PRINT PIZQ opstring PDER END .)
    RETURN          reduce using rule 34 (imprimir -> PRINT PIZQ opstring PDER END .)


state 110

    (33) opstring -> string MAS opstring .

    PDER            reduce using rule 33 (opstring -> string MAS opstring .)
    END             reduce using rule 33 (opstring -> string MAS opstring .)


state 111

    (14) asignacion -> tipo VARIABLE IGUAL expresiones END .

    PRINT           reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    VARIABLE        reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    IF              reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    FOR             reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    WHILE           reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    DO              reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    VOID            reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    VAR             reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    INT             reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    BOOL            reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    DOUBLE          reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    STR             reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    ENTERO          reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    $end            reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    LDER            reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)
    RETURN          reduce using rule 14 (asignacion -> tipo VARIABLE IGUAL expresiones END .)


state 112

    (35) input -> tipo VARIABLE IGUAL INPUT PIZQ . PDER END

    PDER            shift and go to state 134


state 113

    (16) parametros -> tipo VARIABLE .
    (17) parametros -> tipo VARIABLE . COMA parametros

    PDER            reduce using rule 16 (parametros -> tipo VARIABLE .)
    COMA            shift and go to state 135


state 114

    (12) funciones -> tipo VARIABLE PIZQ parametros PDER . LIZQ algoritmo RETURN valor END LDER

    LIZQ            shift and go to state 136


state 115

    (82) indexacion -> VARIABLE CIZQ valor . CDER

    CDER            shift and go to state 137


state 116

    (38) first -> VARIABLE POINT FIRST . PIZQ PDER

    PIZQ            shift and go to state 138


state 117

    (39) last -> VARIABLE POINT LAST . PIZQ PDER

    PIZQ            shift and go to state 139


state 118

    (40) length -> VARIABLE POINT LEN . PIZQ PDER

    PIZQ            shift and go to state 140


state 119

    (42) remove -> VARIABLE POINT REMOVE . PIZQ valor PDER

    PIZQ            shift and go to state 141


state 120

    (41) add -> VARIABLE POINT ADD . PIZQ valor PDER

    PIZQ            shift and go to state 142


state 121

    (37) lista -> CIZQ elementos CDER .

    END             reduce using rule 37 (lista -> CIZQ elementos CDER .)


state 122

    (45) elementos -> valor COMA . elementos
    (44) elementos -> . valor
    (45) elementos -> . valor COMA elementos
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    valor                          shift and go to state 97
    elementos                      shift and go to state 143

state 123

    (43) conjuntos -> LIZQ elementos LDER .

    END             reduce using rule 43 (conjuntos -> LIZQ elementos LDER .)


state 124

    (67) sentenciaIf -> IF PIZQ comparacion PDER LIZQ . algoritmo LDER varianteIf
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (34) imprimir -> . PRINT PIZQ opstring PDER END
    (14) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (15) asignacion -> . VARIABLE IGUAL expresiones END
    (36) expresion -> . valor
    (46) expresion -> . valor operadorMat expresion
    (47) comparacion -> . expresion operadorComp expresion
    (67) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (72) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (80) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (81) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (35) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER
    (13) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER
    (59) tipo -> . VAR
    (60) tipo -> . INT
    (61) tipo -> . BOOL
    (62) tipo -> . DOUBLE
    (63) tipo -> . VOID
    (64) tipo -> . STR
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    PRINT           shift and go to state 12
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    VOID            shift and go to state 20
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    STR             shift and go to state 25
    ENTERO          shift and go to state 26

    comparacion                    shift and go to state 6
    algoritmo                      shift and go to state 144
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    tipo                           shift and go to state 13
    valor                          shift and go to state 15

state 125

    (72) sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ . algoritmo LDER
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (34) imprimir -> . PRINT PIZQ opstring PDER END
    (14) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (15) asignacion -> . VARIABLE IGUAL expresiones END
    (36) expresion -> . valor
    (46) expresion -> . valor operadorMat expresion
    (47) comparacion -> . expresion operadorComp expresion
    (67) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (72) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (80) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (81) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (35) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER
    (13) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER
    (59) tipo -> . VAR
    (60) tipo -> . INT
    (61) tipo -> . BOOL
    (62) tipo -> . DOUBLE
    (63) tipo -> . VOID
    (64) tipo -> . STR
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    PRINT           shift and go to state 12
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    VOID            shift and go to state 20
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    STR             shift and go to state 25
    ENTERO          shift and go to state 26

    algoritmo                      shift and go to state 145
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    tipo                           shift and go to state 13
    valor                          shift and go to state 15

state 126

    (73) parametrosF -> inicializacionFor END comparacion . END VARIABLE increDecre

    END             shift and go to state 146


state 127

    (74) parametrosF -> VARIABLE IN VARIABLE .

    PDER            reduce using rule 74 (parametrosF -> VARIABLE IN VARIABLE .)


state 128

    (75) inicializacionFor -> VARIABLE IGUAL ENTERO .

    END             reduce using rule 75 (inicializacionFor -> VARIABLE IGUAL ENTERO .)


state 129

    (76) inicializacionFor -> INT VARIABLE IGUAL . ENTERO

    ENTERO          shift and go to state 147


state 130

    (77) inicializacionFor -> VAR VARIABLE IGUAL . ENTERO

    ENTERO          shift and go to state 148


state 131

    (80) sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ . algoritmo LDER
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (34) imprimir -> . PRINT PIZQ opstring PDER END
    (14) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (15) asignacion -> . VARIABLE IGUAL expresiones END
    (36) expresion -> . valor
    (46) expresion -> . valor operadorMat expresion
    (47) comparacion -> . expresion operadorComp expresion
    (67) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (72) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (80) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (81) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (35) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER
    (13) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER
    (59) tipo -> . VAR
    (60) tipo -> . INT
    (61) tipo -> . BOOL
    (62) tipo -> . DOUBLE
    (63) tipo -> . VOID
    (64) tipo -> . STR
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    PRINT           shift and go to state 12
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    VOID            shift and go to state 20
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    STR             shift and go to state 25
    ENTERO          shift and go to state 26

    comparacion                    shift and go to state 6
    algoritmo                      shift and go to state 149
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    tipo                           shift and go to state 13
    valor                          shift and go to state 15

state 132

    (81) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE . PIZQ comparacion PDER END

    PIZQ            shift and go to state 150


state 133

    (13) funciones -> VOID VARIABLE PIZQ parametros PDER . LIZQ algoritmo LDER

    LIZQ            shift and go to state 151


state 134

    (35) input -> tipo VARIABLE IGUAL INPUT PIZQ PDER . END

    END             shift and go to state 152


state 135

    (17) parametros -> tipo VARIABLE COMA . parametros
    (16) parametros -> . tipo VARIABLE
    (17) parametros -> . tipo VARIABLE COMA parametros
    (59) tipo -> . VAR
    (60) tipo -> . INT
    (61) tipo -> . BOOL
    (62) tipo -> . DOUBLE
    (63) tipo -> . VOID
    (64) tipo -> . STR

    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    VOID            shift and go to state 92
    STR             shift and go to state 25

    tipo                           shift and go to state 90
    parametros                     shift and go to state 153

state 136

    (12) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ . algoritmo RETURN valor END LDER
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (34) imprimir -> . PRINT PIZQ opstring PDER END
    (14) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (15) asignacion -> . VARIABLE IGUAL expresiones END
    (36) expresion -> . valor
    (46) expresion -> . valor operadorMat expresion
    (47) comparacion -> . expresion operadorComp expresion
    (67) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (72) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (80) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (81) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (35) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER
    (13) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER
    (59) tipo -> . VAR
    (60) tipo -> . INT
    (61) tipo -> . BOOL
    (62) tipo -> . DOUBLE
    (63) tipo -> . VOID
    (64) tipo -> . STR
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    PRINT           shift and go to state 12
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    VOID            shift and go to state 20
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    STR             shift and go to state 25
    ENTERO          shift and go to state 26

    tipo                           shift and go to state 13
    algoritmo                      shift and go to state 154
    valor                          shift and go to state 15
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11

state 137

    (82) indexacion -> VARIABLE CIZQ valor CDER .

    END             reduce using rule 82 (indexacion -> VARIABLE CIZQ valor CDER .)


state 138

    (38) first -> VARIABLE POINT FIRST PIZQ . PDER

    PDER            shift and go to state 155


state 139

    (39) last -> VARIABLE POINT LAST PIZQ . PDER

    PDER            shift and go to state 156


state 140

    (40) length -> VARIABLE POINT LEN PIZQ . PDER

    PDER            shift and go to state 157


state 141

    (42) remove -> VARIABLE POINT REMOVE PIZQ . valor PDER
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    valor                          shift and go to state 158

state 142

    (41) add -> VARIABLE POINT ADD PIZQ . valor PDER
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    valor                          shift and go to state 159

state 143

    (45) elementos -> valor COMA elementos .

    CDER            reduce using rule 45 (elementos -> valor COMA elementos .)
    LDER            reduce using rule 45 (elementos -> valor COMA elementos .)


state 144

    (67) sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo . LDER varianteIf

    LDER            shift and go to state 160


state 145

    (72) sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo . LDER

    LDER            shift and go to state 161


state 146

    (73) parametrosF -> inicializacionFor END comparacion END . VARIABLE increDecre

    VARIABLE        shift and go to state 162


state 147

    (76) inicializacionFor -> INT VARIABLE IGUAL ENTERO .

    END             reduce using rule 76 (inicializacionFor -> INT VARIABLE IGUAL ENTERO .)


state 148

    (77) inicializacionFor -> VAR VARIABLE IGUAL ENTERO .

    END             reduce using rule 77 (inicializacionFor -> VAR VARIABLE IGUAL ENTERO .)


state 149

    (80) sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo . LDER

    LDER            shift and go to state 163


state 150

    (81) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ . comparacion PDER END
    (47) comparacion -> . expresion operadorComp expresion
    (36) expresion -> . valor
    (46) expresion -> . valor operadorMat expresion
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    comparacion                    shift and go to state 164
    expresion                      shift and go to state 77
    valor                          shift and go to state 15

state 151

    (13) funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ . algoritmo LDER
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (34) imprimir -> . PRINT PIZQ opstring PDER END
    (14) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (15) asignacion -> . VARIABLE IGUAL expresiones END
    (36) expresion -> . valor
    (46) expresion -> . valor operadorMat expresion
    (47) comparacion -> . expresion operadorComp expresion
    (67) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (72) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (80) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (81) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (35) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER
    (13) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER
    (59) tipo -> . VAR
    (60) tipo -> . INT
    (61) tipo -> . BOOL
    (62) tipo -> . DOUBLE
    (63) tipo -> . VOID
    (64) tipo -> . STR
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    PRINT           shift and go to state 12
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    VOID            shift and go to state 20
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    STR             shift and go to state 25
    ENTERO          shift and go to state 26

    algoritmo                      shift and go to state 165
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    tipo                           shift and go to state 13
    valor                          shift and go to state 15

state 152

    (35) input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .

    PRINT           reduce using rule 35 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    VARIABLE        reduce using rule 35 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    IF              reduce using rule 35 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    FOR             reduce using rule 35 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    WHILE           reduce using rule 35 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    DO              reduce using rule 35 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    VOID            reduce using rule 35 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    VAR             reduce using rule 35 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    INT             reduce using rule 35 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    BOOL            reduce using rule 35 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    DOUBLE          reduce using rule 35 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    STR             reduce using rule 35 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    ENTERO          reduce using rule 35 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    $end            reduce using rule 35 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    LDER            reduce using rule 35 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)
    RETURN          reduce using rule 35 (input -> tipo VARIABLE IGUAL INPUT PIZQ PDER END .)


state 153

    (17) parametros -> tipo VARIABLE COMA parametros .

    PDER            reduce using rule 17 (parametros -> tipo VARIABLE COMA parametros .)


state 154

    (12) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo . RETURN valor END LDER

    RETURN          shift and go to state 166


state 155

    (38) first -> VARIABLE POINT FIRST PIZQ PDER .

    END             reduce using rule 38 (first -> VARIABLE POINT FIRST PIZQ PDER .)


state 156

    (39) last -> VARIABLE POINT LAST PIZQ PDER .

    END             reduce using rule 39 (last -> VARIABLE POINT LAST PIZQ PDER .)


state 157

    (40) length -> VARIABLE POINT LEN PIZQ PDER .

    END             reduce using rule 40 (length -> VARIABLE POINT LEN PIZQ PDER .)


state 158

    (42) remove -> VARIABLE POINT REMOVE PIZQ valor . PDER

    PDER            shift and go to state 167


state 159

    (41) add -> VARIABLE POINT ADD PIZQ valor . PDER

    PDER            shift and go to state 168


state 160

    (67) sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER . varianteIf
    (68) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
    (69) varianteIf -> . ELSE LIZQ algoritmo LDER
    (70) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (71) varianteIf -> . empty
    (83) empty -> .

    ELSEIF          shift and go to state 170
    ELSE            shift and go to state 171
    PRINT           reduce using rule 83 (empty -> .)
    VARIABLE        reduce using rule 83 (empty -> .)
    IF              reduce using rule 83 (empty -> .)
    FOR             reduce using rule 83 (empty -> .)
    WHILE           reduce using rule 83 (empty -> .)
    DO              reduce using rule 83 (empty -> .)
    VOID            reduce using rule 83 (empty -> .)
    VAR             reduce using rule 83 (empty -> .)
    INT             reduce using rule 83 (empty -> .)
    BOOL            reduce using rule 83 (empty -> .)
    DOUBLE          reduce using rule 83 (empty -> .)
    STR             reduce using rule 83 (empty -> .)
    ENTERO          reduce using rule 83 (empty -> .)
    $end            reduce using rule 83 (empty -> .)
    LDER            reduce using rule 83 (empty -> .)
    RETURN          reduce using rule 83 (empty -> .)

    varianteIf                     shift and go to state 169
    empty                          shift and go to state 172

state 161

    (72) sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .

    PRINT           reduce using rule 72 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    VARIABLE        reduce using rule 72 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    IF              reduce using rule 72 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    FOR             reduce using rule 72 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    WHILE           reduce using rule 72 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    DO              reduce using rule 72 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    VOID            reduce using rule 72 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    VAR             reduce using rule 72 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    INT             reduce using rule 72 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    BOOL            reduce using rule 72 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    DOUBLE          reduce using rule 72 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    STR             reduce using rule 72 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    ENTERO          reduce using rule 72 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    $end            reduce using rule 72 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    LDER            reduce using rule 72 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)
    RETURN          reduce using rule 72 (sentenciaFOR -> FOR PIZQ parametrosF PDER LIZQ algoritmo LDER .)


state 162

    (73) parametrosF -> inicializacionFor END comparacion END VARIABLE . increDecre
    (78) increDecre -> . INCREMENTO
    (79) increDecre -> . DECREMENTO

    INCREMENTO      shift and go to state 174
    DECREMENTO      shift and go to state 175

    increDecre                     shift and go to state 173

state 163

    (80) sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .

    PRINT           reduce using rule 80 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VARIABLE        reduce using rule 80 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    IF              reduce using rule 80 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    FOR             reduce using rule 80 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    WHILE           reduce using rule 80 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    DO              reduce using rule 80 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VOID            reduce using rule 80 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VAR             reduce using rule 80 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    INT             reduce using rule 80 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    BOOL            reduce using rule 80 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    DOUBLE          reduce using rule 80 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    STR             reduce using rule 80 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    ENTERO          reduce using rule 80 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    $end            reduce using rule 80 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    LDER            reduce using rule 80 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    RETURN          reduce using rule 80 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)


state 164

    (81) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion . PDER END

    PDER            shift and go to state 176


state 165

    (13) funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo . LDER

    LDER            shift and go to state 177


state 166

    (12) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN . valor END LDER
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    valor                          shift and go to state 178

state 167

    (42) remove -> VARIABLE POINT REMOVE PIZQ valor PDER .

    END             reduce using rule 42 (remove -> VARIABLE POINT REMOVE PIZQ valor PDER .)


state 168

    (41) add -> VARIABLE POINT ADD PIZQ valor PDER .

    END             reduce using rule 41 (add -> VARIABLE POINT ADD PIZQ valor PDER .)


state 169

    (67) sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .

    PRINT           reduce using rule 67 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VARIABLE        reduce using rule 67 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    IF              reduce using rule 67 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    FOR             reduce using rule 67 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    WHILE           reduce using rule 67 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    DO              reduce using rule 67 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VOID            reduce using rule 67 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VAR             reduce using rule 67 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    INT             reduce using rule 67 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    BOOL            reduce using rule 67 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    DOUBLE          reduce using rule 67 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    STR             reduce using rule 67 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    ENTERO          reduce using rule 67 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    $end            reduce using rule 67 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    LDER            reduce using rule 67 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    RETURN          reduce using rule 67 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)


state 170

    (68) varianteIf -> ELSEIF . PIZQ comparacion PDER LIZQ algoritmo LDER
    (70) varianteIf -> ELSEIF . PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf

    PIZQ            shift and go to state 179


state 171

    (69) varianteIf -> ELSE . LIZQ algoritmo LDER

    LIZQ            shift and go to state 180


state 172

    (71) varianteIf -> empty .

    PRINT           reduce using rule 71 (varianteIf -> empty .)
    VARIABLE        reduce using rule 71 (varianteIf -> empty .)
    IF              reduce using rule 71 (varianteIf -> empty .)
    FOR             reduce using rule 71 (varianteIf -> empty .)
    WHILE           reduce using rule 71 (varianteIf -> empty .)
    DO              reduce using rule 71 (varianteIf -> empty .)
    VOID            reduce using rule 71 (varianteIf -> empty .)
    VAR             reduce using rule 71 (varianteIf -> empty .)
    INT             reduce using rule 71 (varianteIf -> empty .)
    BOOL            reduce using rule 71 (varianteIf -> empty .)
    DOUBLE          reduce using rule 71 (varianteIf -> empty .)
    STR             reduce using rule 71 (varianteIf -> empty .)
    ENTERO          reduce using rule 71 (varianteIf -> empty .)
    $end            reduce using rule 71 (varianteIf -> empty .)
    LDER            reduce using rule 71 (varianteIf -> empty .)
    RETURN          reduce using rule 71 (varianteIf -> empty .)


state 173

    (73) parametrosF -> inicializacionFor END comparacion END VARIABLE increDecre .

    PDER            reduce using rule 73 (parametrosF -> inicializacionFor END comparacion END VARIABLE increDecre .)


state 174

    (78) increDecre -> INCREMENTO .

    PDER            reduce using rule 78 (increDecre -> INCREMENTO .)


state 175

    (79) increDecre -> DECREMENTO .

    PDER            reduce using rule 79 (increDecre -> DECREMENTO .)


state 176

    (81) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER . END

    END             shift and go to state 181


state 177

    (13) funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER .

    PRINT           reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER .)
    VARIABLE        reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER .)
    IF              reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER .)
    FOR             reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER .)
    WHILE           reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER .)
    DO              reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER .)
    VOID            reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER .)
    VAR             reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER .)
    INT             reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER .)
    BOOL            reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER .)
    DOUBLE          reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER .)
    STR             reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER .)
    ENTERO          reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER .)
    $end            reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER .)
    LDER            reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER .)
    RETURN          reduce using rule 13 (funciones -> VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER .)


state 178

    (12) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor . END LDER

    END             shift and go to state 182


state 179

    (68) varianteIf -> ELSEIF PIZQ . comparacion PDER LIZQ algoritmo LDER
    (70) varianteIf -> ELSEIF PIZQ . comparacion PDER LIZQ algoritmo LDER varianteIf
    (47) comparacion -> . expresion operadorComp expresion
    (36) expresion -> . valor
    (46) expresion -> . valor operadorMat expresion
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    ENTERO          shift and go to state 26
    VARIABLE        shift and go to state 52

    comparacion                    shift and go to state 183
    expresion                      shift and go to state 77
    valor                          shift and go to state 15

state 180

    (69) varianteIf -> ELSE LIZQ . algoritmo LDER
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (34) imprimir -> . PRINT PIZQ opstring PDER END
    (14) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (15) asignacion -> . VARIABLE IGUAL expresiones END
    (36) expresion -> . valor
    (46) expresion -> . valor operadorMat expresion
    (47) comparacion -> . expresion operadorComp expresion
    (67) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (72) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (80) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (81) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (35) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER
    (13) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER
    (59) tipo -> . VAR
    (60) tipo -> . INT
    (61) tipo -> . BOOL
    (62) tipo -> . DOUBLE
    (63) tipo -> . VOID
    (64) tipo -> . STR
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    PRINT           shift and go to state 12
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    VOID            shift and go to state 20
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    STR             shift and go to state 25
    ENTERO          shift and go to state 26

    algoritmo                      shift and go to state 184
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    comparacion                    shift and go to state 6
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    tipo                           shift and go to state 13
    valor                          shift and go to state 15

state 181

    (81) sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .

    PRINT           reduce using rule 81 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    VARIABLE        reduce using rule 81 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    IF              reduce using rule 81 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    FOR             reduce using rule 81 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    WHILE           reduce using rule 81 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    DO              reduce using rule 81 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    VOID            reduce using rule 81 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    VAR             reduce using rule 81 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    INT             reduce using rule 81 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    BOOL            reduce using rule 81 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    DOUBLE          reduce using rule 81 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    STR             reduce using rule 81 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    ENTERO          reduce using rule 81 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    $end            reduce using rule 81 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    LDER            reduce using rule 81 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)
    RETURN          reduce using rule 81 (sentenciaWhile -> DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END .)


state 182

    (12) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END . LDER

    LDER            shift and go to state 185


state 183

    (68) varianteIf -> ELSEIF PIZQ comparacion . PDER LIZQ algoritmo LDER
    (70) varianteIf -> ELSEIF PIZQ comparacion . PDER LIZQ algoritmo LDER varianteIf

    PDER            shift and go to state 186


state 184

    (69) varianteIf -> ELSE LIZQ algoritmo . LDER

    LDER            shift and go to state 187


state 185

    (12) funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER .

    PRINT           reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER .)
    VARIABLE        reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER .)
    IF              reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER .)
    FOR             reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER .)
    WHILE           reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER .)
    DO              reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER .)
    VOID            reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER .)
    VAR             reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER .)
    INT             reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER .)
    BOOL            reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER .)
    DOUBLE          reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER .)
    STR             reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER .)
    ENTERO          reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER .)
    $end            reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER .)
    LDER            reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER .)
    RETURN          reduce using rule 12 (funciones -> tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER .)


state 186

    (68) varianteIf -> ELSEIF PIZQ comparacion PDER . LIZQ algoritmo LDER
    (70) varianteIf -> ELSEIF PIZQ comparacion PDER . LIZQ algoritmo LDER varianteIf

    LIZQ            shift and go to state 188


state 187

    (69) varianteIf -> ELSE LIZQ algoritmo LDER .

    PRINT           reduce using rule 69 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    VARIABLE        reduce using rule 69 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    IF              reduce using rule 69 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    FOR             reduce using rule 69 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    WHILE           reduce using rule 69 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    DO              reduce using rule 69 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    VOID            reduce using rule 69 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    VAR             reduce using rule 69 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    INT             reduce using rule 69 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    BOOL            reduce using rule 69 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    DOUBLE          reduce using rule 69 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    STR             reduce using rule 69 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    ENTERO          reduce using rule 69 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    $end            reduce using rule 69 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    LDER            reduce using rule 69 (varianteIf -> ELSE LIZQ algoritmo LDER .)
    RETURN          reduce using rule 69 (varianteIf -> ELSE LIZQ algoritmo LDER .)


state 188

    (68) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ . algoritmo LDER
    (70) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ . algoritmo LDER varianteIf
    (3) algoritmo -> . imprimir
    (4) algoritmo -> . asignacion
    (5) algoritmo -> . expresion END
    (6) algoritmo -> . comparacion END
    (7) algoritmo -> . sentenciaIf
    (8) algoritmo -> . sentenciaFOR
    (9) algoritmo -> . sentenciaWhile
    (10) algoritmo -> . input
    (11) algoritmo -> . funciones
    (34) imprimir -> . PRINT PIZQ opstring PDER END
    (14) asignacion -> . tipo VARIABLE IGUAL expresiones END
    (15) asignacion -> . VARIABLE IGUAL expresiones END
    (36) expresion -> . valor
    (46) expresion -> . valor operadorMat expresion
    (47) comparacion -> . expresion operadorComp expresion
    (67) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (72) sentenciaFOR -> . FOR PIZQ parametrosF PDER LIZQ algoritmo LDER
    (80) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (81) sentenciaWhile -> . DO LIZQ algoritmo LDER WHILE PIZQ comparacion PDER END
    (35) input -> . tipo VARIABLE IGUAL INPUT PIZQ PDER END
    (12) funciones -> . tipo VARIABLE PIZQ parametros PDER LIZQ algoritmo RETURN valor END LDER
    (13) funciones -> . VOID VARIABLE PIZQ parametros PDER LIZQ algoritmo LDER
    (59) tipo -> . VAR
    (60) tipo -> . INT
    (61) tipo -> . BOOL
    (62) tipo -> . DOUBLE
    (63) tipo -> . VOID
    (64) tipo -> . STR
    (65) valor -> . ENTERO
    (66) valor -> . VARIABLE

    PRINT           shift and go to state 12
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    VOID            shift and go to state 20
    VAR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    DOUBLE          shift and go to state 24
    STR             shift and go to state 25
    ENTERO          shift and go to state 26

    comparacion                    shift and go to state 6
    algoritmo                      shift and go to state 189
    imprimir                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    sentenciaIf                    shift and go to state 7
    sentenciaFOR                   shift and go to state 8
    sentenciaWhile                 shift and go to state 9
    input                          shift and go to state 10
    funciones                      shift and go to state 11
    tipo                           shift and go to state 13
    valor                          shift and go to state 15

state 189

    (68) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo . LDER
    (70) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo . LDER varianteIf

    LDER            shift and go to state 190


state 190

    (68) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .
    (70) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER . varianteIf
    (68) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER
    (69) varianteIf -> . ELSE LIZQ algoritmo LDER
    (70) varianteIf -> . ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf
    (71) varianteIf -> . empty
    (83) empty -> .

  ! reduce/reduce conflict for PRINT resolved using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for IF resolved using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for FOR resolved using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for WHILE resolved using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for DO resolved using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for VOID resolved using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for VAR resolved using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for INT resolved using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for BOOL resolved using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for STR resolved using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for ENTERO resolved using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for $end resolved using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for LDER resolved using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
  ! reduce/reduce conflict for RETURN resolved using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    PRINT           reduce using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VARIABLE        reduce using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    IF              reduce using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    FOR             reduce using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    WHILE           reduce using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    DO              reduce using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VOID            reduce using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    VAR             reduce using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    INT             reduce using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    BOOL            reduce using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    DOUBLE          reduce using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    STR             reduce using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    ENTERO          reduce using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    $end            reduce using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    LDER            reduce using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    RETURN          reduce using rule 68 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    ELSEIF          shift and go to state 170
    ELSE            shift and go to state 171

  ! PRINT           [ reduce using rule 83 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 83 (empty -> .) ]
  ! IF              [ reduce using rule 83 (empty -> .) ]
  ! FOR             [ reduce using rule 83 (empty -> .) ]
  ! WHILE           [ reduce using rule 83 (empty -> .) ]
  ! DO              [ reduce using rule 83 (empty -> .) ]
  ! VOID            [ reduce using rule 83 (empty -> .) ]
  ! VAR             [ reduce using rule 83 (empty -> .) ]
  ! INT             [ reduce using rule 83 (empty -> .) ]
  ! BOOL            [ reduce using rule 83 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 83 (empty -> .) ]
  ! STR             [ reduce using rule 83 (empty -> .) ]
  ! ENTERO          [ reduce using rule 83 (empty -> .) ]
  ! $end            [ reduce using rule 83 (empty -> .) ]
  ! LDER            [ reduce using rule 83 (empty -> .) ]
  ! RETURN          [ reduce using rule 83 (empty -> .) ]

    varianteIf                     shift and go to state 191
    empty                          shift and go to state 172

state 191

    (70) varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .

    PRINT           reduce using rule 70 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VARIABLE        reduce using rule 70 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    IF              reduce using rule 70 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    FOR             reduce using rule 70 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    WHILE           reduce using rule 70 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    DO              reduce using rule 70 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VOID            reduce using rule 70 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    VAR             reduce using rule 70 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    INT             reduce using rule 70 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    BOOL            reduce using rule 70 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    DOUBLE          reduce using rule 70 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    STR             reduce using rule 70 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    ENTERO          reduce using rule 70 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    $end            reduce using rule 70 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    LDER            reduce using rule 70 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)
    RETURN          reduce using rule 70 (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER varianteIf .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARIABLE in state 20 resolved as shift
WARNING: reduce/reduce conflict in state 59 resolved using rule (opstring -> VARIABLE)
WARNING: rejected rule (valor -> VARIABLE) in state 59
WARNING: reduce/reduce conflict in state 190 resolved using rule (varianteIf -> ELSEIF PIZQ comparacion PDER LIZQ algoritmo LDER)
WARNING: rejected rule (empty -> <empty>) in state 190
